<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.ProjectSystem.VS</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.AddMessageResult">
            <summary>
            Indicates the level of processing that has occurred by a particular extension
            and what level of processing should still occur.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Build.AddMessageResult.NotHandled">
            <summary>
            The message was not handled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Build.AddMessageResult.HandledAndStopProcessing">
            <summary>
            The message has been added and does not need to be processed further by the other providers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider">
            <summary>
            Provides access to the error list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider.SuspendRefresh">
            <summary>
            Stops refreshing the error list until <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider.ResumeRefresh"/> is called.
            </summary>
            <devremarks>Dev15: Consider making this async</devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider.ResumeRefresh">
            <summary>
            Restarts the refreshing of the error list after it has been suspended.
            </summary>
            <devremarks>Dev15: Consider making this async</devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider.AddMessageAsync(Microsoft.VisualStudio.ProjectSystem.VS.Build.TargetGeneratedError)">
            <summary>
            Adds the specified message to the error list.
            </summary>
            <param name="error">The message that needs to be added to the error list.</param>
            <returns>Task whose result is <see cref="F:Microsoft.VisualStudio.ProjectSystem.VS.Build.AddMessageResult.HandledAndStopProcessing"/> if the message has been added and does not need to be processed further by
            the other providers. Otherwise, set the result to <see cref="F:Microsoft.VisualStudio.ProjectSystem.VS.Build.AddMessageResult.NotHandled"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider.ClearMessageFromTargetAsync(System.String)">
            <summary>
            Clears the messages that are associated with the specified target.
            </summary>
            <param name="targetName">The target.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider.ClearAllAsync">
            <summary>
            Clears all the messages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggerProvider">
            <summary>
            Creates instances of MSBuild loggers for VS windows.
            </summary>
            <remarks>
            This contract defines the boundary between the VS shell system
            and the consumer to help avoid taking unnecessary assembly dependencies
            in the client.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggerProvider.CreateLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.Boolean)">
            <summary>
            Creates a MSBuild logger that connects to the Visual Studio Output Window.
            </summary>
            <param name="output">The IVsOutputWindowPane instance the created logger will emit to.
            If null, no logger will be created and null will be returned.</param>
            <param name="populateErrorList"><c>true</c> if the error list should be populated as well as the output window; <c>false</c> otherwise.</param>
            <returns>Instance of the MSBuild logger, or null if unable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggerProvider.CreateLoggerAsync(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a MSBuild logger that connects to the Visual Studio Output Window.
            </summary>
            <param name="outputPane">The IVsOutputWindowPane instance the created logger will emit to.
            If null, no logger will be created and null will be returned.</param>
            <param name="populateErrorList"><c>true</c> if the error list should be populated as well as the output window; <c>false</c> otherwise.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Instance of the MSBuild logger, or null if unable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggerProvider.CreateLoggerAsync(System.IO.TextWriter,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a MSBuild logger that connects to the Visual Studio Output Window.
            </summary>
            <param name="outputWriter">
            The <see cref="T:System.IO.TextWriter"/> instance the created logger will emit to.
            <see cref="M:System.IDisposable.Dispose"/> will not be called on this instance at the conclusion of the build.
            If null, no logger will be created and null will be returned.
            </param>
            <param name="populateErrorList"><c>true</c> if the error list should be populated as well as the output window; <c>false</c> otherwise.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Instance of the MSBuild logger, or null if unable.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsProjectBuildLoggingService">
            <summary>
            Project build logging service. Does not require project to be loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsProjectBuildLoggingService.CreateProjectBuildLoggerProvider(Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggingProjectInfo)">
            <summary>
            Creates a logger provider object for project build logging. Each project should have its own logger provider.
            </summary>
            <param name="loggingProject">Object to provide project data nesessary for build logging <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggingProjectInfo"/></param>
            <returns>Project build logger provider.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggingProjectInfo">
            <summary>
            Gets project data nesessary for build logging.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggingProjectInfo.ProjectFullPath">
            <summary>
            Gets project full path.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggingProjectInfo.ProjectGuid">
            <summary>
            Gets project guid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggingProjectInfo.VsHierarchy">
            <summary>
            Gets project hierarchy
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource.#ctor(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource"/> class.
            </summary>
            <param name="sourceTypeIdentifier">The type of data exposed by this table. Usually a value from <see cref="T:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources"/>.</param>
            <param name="displayName">A human readable description of what this table contains. May be <c>null</c>.</param>
            <param name="hierarchy">The owning hierarchy for this table.</param>
            <param name="projectIdGuid">The ProjectID Guid, pre-boxed as a reference type to keep GC pressure down.</param>
            <param name="identifier">A persistent identifier that is coupled with the owner of the data source. Multiple instances of a data source with matching identifiers is allowed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource.DisplayName">
            <summary>
            Localized name to identify the source in any UI displayed to the user. Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource.Identifier">
            <summary>
            An identifier for this data source that can be used by others to recognize the data source later, even across sessions.
            </summary>
            <remarks>
            <para>This identifier cannot change over the lifetime of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource.SourceTypeIdentifier">
            <summary>
            Identifier that describes the type of entries provided by this source (e.g. <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.CommentTableDataSource"/>)
            </summary>
            <remarks>
            <para>Different sources can have the same identifier (e.g. there could be multiple sources of <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableDataSources.ErrorTableDataSource"/>).</para>
            <para>This identifier cannot change over the lifetime of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource"/>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource.Hierarchy">
            <summary>
            Gets the owning hierarchy for this table.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource.ProjectIdGuid">
            <summary>
            Gets the ProjectID Guid, pre-boxed as a reference type to keep GC pressure down.
            </summary>
            <remarks>
            This is intentionally typed as <see cref="T:System.Object"/> to prevent re-boxing
            of the value-type <see cref="T:System.Guid"/> every time the value is queried
            by <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry">
            <summary>
            A basic implementation of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry"/> interface,
            supplying the necessary behavior to represent an individual entry in
            the tabular data service (i.e. the error list).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.SupportedColumnNames">
            <summary>
            The columns supported by this data source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.tableDataSource">
            <summary>
            The table data source to use for some common values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.#ctor(Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry"/> class.
            </summary>
            <param name="tableDataSource">The table data source to use for some common values.</param>
            <param name="id">An optional object that uniquely identifies this entry.</param>
            <param name="values">
            An optional set of values to return from <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)"/>.
            If <c>null</c> or empty, a derived-type is expected to override the
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.TryGetValue(System.String,System.Object@)"/> method to return data.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.Identity">
            <summary>
            Gets an optional object that uniquely identifies this entry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.Values">
            <summary>
            Gets the values to return from <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.TryGetValue(System.String,System.Object@)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves the value of some column based on the content of the
            dictionary originally supplied to the constructor or other
            common values obtained from the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource"/>.
            </summary>
            <param name="keyName">The name of the column whose value is to be retrieved.</param>
            <param name="content">Receives the value of the column.</param>
            <returns><c>true</c> if the column being queried is found and has a value; <c>false</c> otherwise.</returns>
            <remarks>
            Derived types may override this method, but should call the base method
            if the overriding method cannot supply a value for a column.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.CanSetValue(System.String)">
            <summary>
            Checks whether a column can have its value changed.
            </summary>
            <param name="keyName">The name of the column.</param>
            <returns><c>true</c> if the value can be changed; <c>false</c> otherwise.</returns>
            <remarks>
            The default implementation of this method always returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry.TrySetValue(System.String,System.Object)">
            <summary>
            Changes the value of a column to the specified value, if supported.
            </summary>
            <param name="keyName">The name of the column.</param>
            <param name="content">The value to set the column to.</param>
            <returns><c>true</c> if the value was changed; <c>false</c> otherwise.</returns>
            <remarks>
            The default implementation of this method always returns <c>false</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.TargetGeneratedError">
            <summary>
            An error that appears in the Visual Studio error list that is the result of building a specific MSBuild target.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.TargetGeneratedError.#ctor(System.String,Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.TargetGeneratedError"/> class.
            </summary>
            <param name="generatingTarget">The build target that produced the error.</param>
            <param name="buildEventArgs">The build event args that represent the error.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TargetGeneratedError.GeneratingTarget">
            <summary>
            Gets or sets the target that produced this error list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Build.TargetGeneratedError.BuildEventArgs">
            <summary>
            Gets or sets the associated build event args.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.ITextWriterWithMessageId">
            <summary>
            This is optional interface to implement by TextWriter logger wrappers for output window
            to allow passing the correlation id (ProviderGUID + messageID) for the output window message.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.ITextWriterWithMessageId.WriteLineWithId(System.Guid,System.UInt32,System.String)">
            <summary>
            Output a  message to IVsOutputWindowPane that can be correlated to Error tasks.
            </summary>
            <param name="messageProviderGuid">provider Guid. Provider (defined by the Guid) is essentially "namespace" for the messages id's.
            It is expected all id's to be unique within the scope of the same provider.</param>
            <param name="messageId">message ID (unique withing <paramref name="messageProviderGuid"/> provider)</param>
            <param name="value">string to output</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsOutputWindowTextWriterFactory">
            <summary>
            A factory that wraps Visual Studio output window panes with a thread-safe .NET <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsOutputWindowTextWriterFactory.CreateTextWriter(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Creates a wrapping, thread-safe <see cref="T:System.IO.TextWriter"/> around a Visual Studio output window pane.
            </summary>
            <param name="outputWindowPane">The output window pane to wrap.</param>
            <returns>A disposable wrapper around the <see cref="T:System.IO.TextWriter"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute">
            <summary>
            Metadata attribute that identifies the COM type this export supports
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute"/> class
            </summary>
            <param name="comType">The com type this export implements</param>
            <param name="includeInherited">
            If true, all inerited interfaces of <paramref name="comType"/> will be added.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute"/> class
            </summary>
            <param name="iid">The com type interface id this export implements</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute.Iid">
            <summary>
            Gets the com interface id this export supports
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute.IncludeInherited">
            <summary>
            If all inherited Id's are to be added or not
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceMetadataView">
            <summary>
            Metadata for com service exports.
            We use a concrete class so that we can flatten the Iid property from string[][] to string[].
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceMetadataView.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceMetadataView"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceMetadataView.AppliesTo">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IAppliesToMetadataView"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceMetadataView.Iid">
            <summary>
            Gets the COM interface id's this export supports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ComServiceMetadataView.OrderPrecedence">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute">
            <summary>
            Generates a package definition (pkgdef) that wires up some project filename extension
            to the CPS project package and factory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.CpsPackageGuid">
            <summary>
            The CPS package GUID.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.folderGuid">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.FolderGuid"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute"/> class.
            </summary>
            <param name="projectTypeGuid">A unique value specific to this project file extension.</param>
            <param name="displayName">The tree node name in the create new project and add new item dialogs.</param>
            <param name="displayProjectFileExtensions">The text that appears in the Open Project dialog's file filter combo box, a semicolon, and the filter itself.</param>
            <param name="defaultProjectExtension">The default project filename extension.</param>
            <param name="language">The LanguageVsTemplate value.</param>
            <param name="resourcePackageGuid">The GUID of the package that contains localized resources for these strings.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.ProjectTypeGuid">
            <summary>
            Gets a unique value specific to this project file extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.ResourcePackage">
            <summary>
            Gets the GUID of the package that contains localized resources for these strings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.DisplayName">
            <summary>
            Gets the tree node name in the create new project and add new item dialogs.
            Takes precedence over the nameResourceID value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.DisplayProjectFileExtensions">
            <summary>
            Gets the text that appears in the Open Project dialog's file filter combo box, a semicolon, and the filter itself.
            </summary>
            <example>My Project Files (*.myproj);*.myproj</example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.DefaultProjectExtension">
            <summary>
            Gets the default project filename extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.PossibleProjectExtensions">
            <summary>
            Gets all the allowed project filename extensions for this project type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.Capabilities">
            <summary>
            Gets the initial project capabilities of the project system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.ProjectTemplatesDir">
            <summary>
            Gets the directory where project templates may be discovered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.LanguageVsTemplate">
            <summary>
            Gets the value for the LanguageVsTemplate setting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.SortPriority">
            <summary>
            Affect the order in which project are displayed in the new project dialog
            </summary>
            <value>Default is 100</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.NewProjectRequireNewFolderVsTemplate">
            <summary>
            Gets or sets a value indicating whether a new project requires an empty folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.ProjectSubTypeVsTemplate">
            <summary>
            Gets or sets the ProjectSubTypeVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.DisplayProjectTypeVsTemplate">
            <summary>
            Gets or sets the DisplayProjectTypeVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.TemplateGroupIDsVsTemplate">
            <summary>
            Gets or sets the TemplateGroupIDsVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.TemplateIDsVsTemplate">
            <summary>
            Gets or sets the TemplateIDsVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.ShowOnlySpecifiedTemplatesVsTemplate">
            <summary>
            Gets or sets the ShowOnlySpecifiedTemplatesVsTemplate value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.DisableAsynchronousSolutionLoad">
            <summary>
            Gets or sets the DisableAsynchronousSolutionLoad value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.DisableAsynchronousProjectTreeLoad">
            <summary>
            Gets or sets the DisableAsynchronousProjectTreeLoad value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.FolderGuid">
            <summary>
            Gets or sets the Folder guid.
            This can be used to control where the project node appear in the New Project dialog
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.NewPrjTemplateRegKey(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Gets the path to the registry key for new project templates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.MakeRootedWithMacros(System.String,System.String)">
            <summary>
            Roots a relative path to another path, taking care to consider leading macros as already rooted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Gets the path to the registry key that settings should fall under.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService2">
            <summary>
            Obtains the project GUID in an asynchronous way.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService2.GetProjectGuidAsync">
            <summary>
            Gets the project identifier that uniquely identifies this project within a solution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectItemContextMenuProvider">
            <summary>
            An extension component to provide context menu to be shown in the solution explorer for a specific project item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectItemContextMenuProvider.TryGetContextMenu(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Guid@,System.Int32@)">
            <summary>
            Gets the context menu for a project item.
            </summary>
            <param name="projectItem">The project item</param>
            <param name="menuCommandGuid">The menu command guid to retrieve the menu</param>
            <param name="menuCommandId">The menu command id to retrieve the menu</param>
            <returns>True, if the provider knows the context menu to be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectItemContextMenuProvider.TryGetMixedItemsContextMenu(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},System.Guid@,System.Int32@)">
            <summary>
            Gets the context menu, when different type of project items are selected.
            This function is only called when TryToGetContextMenu returns different menu for selected items.
            </summary>
            <param name="projectItems">Multiple project items</param>
            <param name="menuCommandGuid">The menu command guid to retrieve the menu</param>
            <param name="menuCommandId">The menu command id to retrieve the menu</param>
            <returns>True, if the provider knows the context menu to be used.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebuggerProperties">
            <summary>
            Property manipulation routines commonly needed by debugger providers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebuggerProperties.PropertySerializer">
            <summary>
            A serializer capable of reading types from the property system commonly relevant to debuggers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebuggerProperties.CreateReader(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader"/> class that is prepared
            to read properties from a given dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebuggerProperties.AddSymbolPath(Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings,System.String)">
            <summary>
            Adds the PDBSEARCHPATH parameter to the <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Options"/> property.
            </summary>
            <param name="info">The <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings"/> whose Options property should be appended to.</param>
            <param name="symbolsPath">A custom symbols path to pass to the debugger.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase">
            <summary>
            A convenient base class for CPS debugger providers.
            </summary>
            <remarks>
            Derived classes may override the <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/> method
            in order to add extra behavior when actually launching the debugger.
            Throwing <see cref="T:System.NotImplementedException"/> from <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.QueryDebugTargetsCountAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>
            and <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.QueryDebugTargetsAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/> is acceptable if <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>
            is also overridden to give the proprietary behavior that is incompatible with the debugger structs.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.DeploymentPackage">
            <summary>
            The GUID of the deployment package.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.ServiceProvider">
            <summary>
            Gets the Visual Studio global IServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.ThreadingService">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.ConfiguredProject">
            <summary>
            Gets the Configured Project to which this debugger applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.VsHierarchies">
            <summary>
            Gets the IVsHierarchies implementation.
            </summary>
            <value>The project node.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.VsHierarchy">
            <summary>
            Gets the project IVsHierarchy that is launching the process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.QueryDebugTargetsCountAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugQueryTarget"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.QueryDebugTargetsAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugQueryTarget"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.CanLaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            Gets whether the debugger can launch in the current configuration.
            </summary>
            <param name="launchOptions">
            The launch options that would be passed to a subsequent call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>.
            </param>
            <remarks>
            This method may be called at any time and the implementation should be fast enough to
            perform well if called every time the UI is updated (potentially several times per second).
            Implementers SHOULD NOT rely on this method being called directly before a call to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>.  No state should be saved within this method to be used
            by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            Launches the project's target executable (or some other configured process)
            and optionally attaches a debugger to it.
            </summary>
            <param name="launchOptions">
            A set of default launch options that can be used to initialize each <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings"/> instance.
            These options may be customized by the particular debug launch implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if the debugger cannot start.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.GetDebuggerStruct(Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings)">
            <summary>
            Copy information over from the contract struct to the native one.
            </summary>
            <returns>The native struct.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.GetDebuggerStruct4(Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings)">
            <summary>
            Copy information over from the contract struct to the native one.
            </summary>
            <returns>The native struct.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.FreeDebuggerStruct(Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2)">
            <summary>
            Frees memory allocated by <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.GetDebuggerStruct(Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings)"/> to initialize members within a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.FreeDebuggerStruct(Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4)">
            <summary>
            Frees memory allocated by <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.GetDebuggerStruct(Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings)"/> to initialize members within a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.CopyStructArrayToIntPtr``1(``0[],System.IntPtr,System.Int32@)">
            <summary>
            Copies an array of structures to a native memory address.
            </summary>
            <typeparam name="T">The type of structure to copy.</typeparam>
            <param name="list">The list of structures to copy.</param>
            <param name="nativeArrayPointer">The address to copy the structures to.  The allocated memory at this address must be at least <c>.SizeOf(typeof(T)) * list.Length</c></param>
            <param name="initializedStructures">A 0-initialized local variable that will receive the number of
            elements actually copied and initialized.  This should be the variable passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.DestroyStructArray``1(System.IntPtr,System.Int32)"/>.</param>
            <remarks>
            We use a <c>ref</c> parameter instead of <c>out</c> or a return value because no matter how an exception
            might be thrown from this method, we must indicate to the caller what must be destroyed in order to avoid a memory leak.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.DestroyStructArray``1(System.IntPtr,System.Int32)">
            <summary>
            Frees memory blocks allocated as part of a prior call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.CopyStructArrayToIntPtr``1(``0[],System.IntPtr,System.Int32@)"/>.
            </summary>
            <typeparam name="T">The type passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.CopyStructArrayToIntPtr``1(``0[],System.IntPtr,System.Int32@)"/> earlier.</typeparam>
            <param name="structArray">The pointer to the first element in the native structure array that was allocated before.</param>
            <param name="arrayLength">The number of elements in the structure array.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings[])">
            <summary>
            Launches a Visual Studio debugger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.GetLaunchResult(Microsoft.VisualStudio.Shell.Interop.VsDebugTargetProcessInfo)">
            <summary>
            Converts a VS launch result into a managed-friendly one.
            </summary>
            <param name="processInfo">The process launch info provided from the VS debugger.</param>
            <returns>The managed-friendly luanch result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.GetSerializedEnvironmentString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.GetGuidBytes(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Collects an array of GUIDs into an array of bytes.
            </summary>
            <remarks>
            The order of the GUIDs are preserved, and each GUID is copied exactly one after the other in the byte array.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchResult">
            <summary>
            Describes a debugger-launched process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchResult.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchResult"/> class.
            </summary>
            <param name="creationTime">The creation time of the process.</param>
            <param name="processId">The process ID.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchResult.CreationTime">
            <summary>
            Gets the launch time of the process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase.LaunchResult.ProcessId">
            <summary>
            Gets the launched process ID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings">
            <summary>
            A structure that a CPS debugger provider must fill out to fire up a debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.additionalDebugEngines">
            <summary>
            Backing for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.AdditionalDebugEngines"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.environment">
            <summary>
            Backing for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Environment"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.#ctor(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.LaunchOperation">
            <summary>
            specifies how this process should be launched or attached
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.dlo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.LaunchOptions">
            <summary>
            launch flags that were passed to IVsDebuggableProjectCfg::Launch
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.LaunchFlags.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.AppPackageLaunchInfo">
            <summary>
            Gets information required to start/launch Windows Store apps.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.LaunchDebugEngineGuid">
            <summary>
            guid of debug engine used for launch, (DLO_CreateProcess)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidLaunchDebugEngine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.AdditionalDebugEngines">
            <summary>
            Collection of debug engine guids.  Should not include the <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.LaunchDebugEngineGuid"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.PortSupplierGuid">
            <summary>
            port supplier guid
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidPortSupplier.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.PortName">
            <summary>
            name of port from above supplier (NULL is fine)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrPortName.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.RemoteMachine">
            <summary>
            NULL for local machine, or remote machine name
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrRemoteMachine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.CurrentDirectory">
            <summary>
            current directory (DLO_CreateProcess)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrCurDir.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Executable">
            <summary>
            The name of the executable
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrExe
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Arguments">
            <summary>
            specifies how this process should be launched or attached
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrArg
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Environment">
            <summary>
            Get the dictionary for environment variables to set in the debuggee.
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrEnv.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Options">
            <summary>
            custom options, specific to each guidLaunchDebugEngine.
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrOptions.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.StandardInputHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdInput.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.StandardOutputHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdOutput.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.StandardErrorHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdError.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.SendToOutputWindow">
            <summary>
            if TRUE, stdout and stderr will be routed to the output window
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.fSendToOutputWindow.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.ProcessId">
            <summary>
            process id (DLO_AlreadyRunning)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.dwProcessId.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Unknown">
            <summary>
            interface pointer - usage depends on DEBUG_LAUNCH_OPERATION
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.pUnknown.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.Project">
            <summary>
            The project that is launching the debuggee process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings.ProcessLanguageGuid">
            <summary>
            Language of the hosting process. Used to preload EE's
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidProcessLanguage.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugPageGuidProvider">
            <summary>
            An interface a project can implement to provide the Guid for
            the Debug Property Page
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugPageGuidProvider.GetDebugPropertyPageGuidAsync">
            <summary>
            Get the Guid of the Debug Property page
            </summary>
            <returns>Task containing the Guid of the Debug Property page</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation">
            <summary>
            Direction on how the debugger should launch or attach to the application.
            </summary>
            <remarks>
            The members of this enum have values that match the native structure
            <see cref="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION"/>
            to allow direct copying.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.AlreadyRunning">
            <summary>
            Attach to a process
            </summary>
            <remarks>
             bstrExe is the process name, or a NULL character followed by
             a string indicating the hexadecimal process id
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.CreateProcess">
            <summary>
            Launch the application
            </summary>
            <remarks>
            bstrExe is the full path to the exe,
             bstrArg are the arguments to pass to CreateProcess,
             clsidCustom specifies the single debug engine to use (NULL for default),
             or dwClsidCount and pclsidList specify the debug engines to use
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.Custom">
            <summary>
            Deprecated -- same as DLO_CreateProcess
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.LaunchByWebServer">
            <summary>
            Use special HTTP verb to debug
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.AttachToHostingProcess">
            <summary>
            Attach to a hosting process
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.StartDebuggingHostingProcess">
            <summary>
            Start debugging
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.LaunchBrowser">
            <summary>
            Launch a browser for web services or web browser debuggers
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.AppPackageDebug">
            <summary>
            The debugger should launch and/or register for debugging of a Windows 8 appcontainer
            application. When using this option, VsAppPackageLaunchInfo should be supplied, along
            with bstrExe, launch flags, remote connection information and engine information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation.AttachToSuspendedLaunchProcess">
            <summary>
            The debugger should attach to the specified process, where the specified
            process is a newly-launched process, which was launched using the CREATE_SUSPENDED
            flag to the Win32 CreateProcess API. This allows the debugger to act as though
            it launched the process, even though the process was actually started via
            some other mechanism.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings">
            <summary>
            A structure that a CPS debugger provider must fill out to fire up a debugger.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.LaunchOperation">
            <summary>
            Gets a description of how this process should be launched or attached.
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.dlo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.LaunchOptions">
            <summary>
            Gets launch flags that were passed to IVsDebuggableProjectCfg::Launch
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.LaunchFlags.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.AppPackageLaunchInfo">
            <summary>
            Gets information required to start/launch Windows Store apps.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.LaunchDebugEngineGuid">
            <summary>
            guid of debug engine used for launch, (DLO_CreateProcess)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidLaunchDebugEngine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.AdditionalDebugEngines">
            <summary>
            Collection of debug engine guids.  Should not include the <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.LaunchDebugEngineGuid"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.PortSupplierGuid">
            <summary>
            port supplier guid
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidPortSupplier.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.PortName">
            <summary>
            name of port from above supplier (NULL is fine)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrPortName.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.RemoteMachine">
            <summary>
            NULL for local machine, or remote machine name
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrRemoteMachine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.CurrentDirectory">
            <summary>
            current directory (DLO_CreateProcess)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrCurDir.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.Executable">
            <summary>
            The name of the executable
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrExe
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.Arguments">
            <summary>
            specifies how this process should be launched or attached
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrArg
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.Environment">
            <summary>
            Get the dictionary for environment variables to set in the debuggee.
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrEnv.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.Options">
            <summary>
            custom options, specific to each guidLaunchDebugEngine.
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.bstrOptions.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.StandardInputHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdInput.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.StandardOutputHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdOutput.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.StandardErrorHandle">
            <summary>
            for file redirection
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.hStdError.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.SendToOutputWindow">
            <summary>
            if TRUE, stdout and stderr will be routed to the output window
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.fSendToOutputWindow.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.ProcessId">
            <summary>
            process id (DLO_AlreadyRunning)
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.dwProcessId.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.Project">
            <summary>
            The project that is launching the debuggee process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.Unknown">
            <summary>
            interface pointer - usage depends on DEBUG_LAUNCH_OPERATION
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.pUnknown.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings.ProcessLanguageGuid">
            <summary>
            Language of the hosting process. Used to preload EE's
            </summary>
            <remarks>
            Copied into VsDebugTargetInfo2.guidProcessLanguage.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugQueryTarget">
            <summary>
            An optional interface that <see cref="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider"/> exports may also implement
            in order to support the Visual Studio <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsQueryDebuggableProjectCfg"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugQueryTarget.QueryDebugTargetsCountAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            Gets the number of elements that would be in the array returned by <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugQueryTarget.QueryDebugTargetsAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>.
            </summary>
            <param name="launchOptions">The flags that would be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/> to actually launch the debugger.</param>
            <returns>A non-negative integer.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugQueryTarget.QueryDebugTargetsAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            Gets the debugger initialization settings that would be used to launch the debugger.
            </summary>
            <param name="launchOptions">The flags that would be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/> to actually launch the debugger.</param>
            <returns>An array of elements that each describe a debuggee process to launch.  May be empty, but must not be null.</returns>
            <remarks>
            Implementations of this method should not have any side-effects.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageServiceRegister">
            <summary>
            A service exported into the ProjectService scope that provides a registry of Intellisense projects.
            </summary>
            <remarks>
            This is useful so that references between projects may be resolved to their respective intellisense projects,
            allowing P2P intellisense to function without having to build those projects first.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageServiceRegister.RegisterProjectAsync(Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense)">
            <summary>
            Registers an intellisense project with the registry so that other projects may discover it.
            </summary>
            <param name="project">The intellisense project being added.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageServiceRegister.UnregisterAsync(Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense)">
            <summary>
            Removes an intellisense project from the registry prior to closing it.
            </summary>
            <param name="project">The intellisense project being closed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageServiceRegister.TryGetIntellisenseProject(System.String,Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProject@)">
            <summary>
            Gets the intellisense project for the project with the given path.
            </summary>
            <param name="projectPath">The absolute path to the project.</param>
            <param name="project">Set to the intellisense project if one with a matching path is registered; otherwise <c>null</c>.</param>
            <returns><c>true</c> if a matching project was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense">
            <summary>
            An interface implemented by the C#/VB language service integration services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense.UnconfiguredProject">
            <summary>
            Gets the CPS project the Intellisense project is created for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense.IntellisenseProject">
            <summary>
            Gets the intellisense project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense.OnProjectAddedAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProject)">
            <summary>
            Invoked when another intellisense project has been created.
            </summary>
            <param name="unconfiguredProject">The CPS project that is being initialized for intellisense.</param>
            <param name="intellisenseProject">The intellisense project.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense.OnProjectRemovedAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProject)">
            <summary>
            Invoked when an existing intellisense project is being closed.
            </summary>
            <param name="unconfiguredProject">The CPS project that is being initialized for intellisense.</param>
            <param name="intellisenseProject">The intellisense project.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType">
            <summary>
            Represents the type of an item in the Browse Object window.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.Unknown">
            <summary>
            Default (unknown) item type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.ProjectBrowseObject">
            <summary>
            Project item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.FileBrowseObject">
            <summary>
            File item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.FolderBrowseObject">
            <summary>
            Folder item. Not currently supported by CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.ReferenceBrowseObject">
            <summary>
            Reference item
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.ProjectConfigurationBrowseObject">
            <summary>
            Project configuration. Not currently supported by CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.ConfigurationBrowseObject">
            <summary>
            Project configuration. Not currently supported by CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.AutomationProject">
            <summary>
            ExtenderCATID for <see cref="P:EnvDTE.Project.ExtenderCATID"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.AutomationProjectItem">
            <summary>
            ExtenderCATID for <see cref="P:EnvDTE.ProjectItem.ExtenderCATID"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.AutomationReference">
            <summary>
            ExtenderCATID for <see cref="P:VSLangProj.Reference.ExtenderCATID"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.AutomationFolderProperties">
            <summary>
            ExtenderCATID for <see cref="P:VSLangProj.FolderProperties.ExtenderCATID"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.HierarchyBrowseObject">
            <summary>
            Browse object CATID when queried using <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2.VSHPROPID_BrowseObjectCATID"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.HierarchyConfigurationBrowseObject">
            <summary>
            Configuration browse object CATID when queried using <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2.VSHPROPID_CfgBrowseObjectCATID"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType.HierarchyExtensionObject">
            <summary>
            Browse object CATID when queried using <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2.VSHPROPID_ExtObjectCATID"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IExtenderCATIDProvider">
            <summary>
            Provides ExtenderCATID values for different types of objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IExtenderCATIDProvider.GetExtenderCATID(Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Provides the ExtenderCATID for different types of items.
            </summary>
            <param name="extenderCATIDType">The type of the item we need to get the ExtenderCATID for.</param>
            <param name="treeNode">The project tree node, if available, for the specified item.</param>
            <returns>String representing the GUID to be used as ExtenderCATID.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl">
            <summary>
            PropertyPageControl
            </summary>
            <remarks>This class is NOT MT safe</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.parent">
            <summary>
            Parent factory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.hostWindow">
            <summary>
            The Property Page Window containing this control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIWindow,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.HelpInfo">
            <summary>
            Defined by all property page controls.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.HostWindow">
            <summary>
            SettingsPage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.ParentFactory">
            <summary>
            Project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.ContextObjects">
            <summary>
            Gets the set of project objects that are selected for this property page viewing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.System#IServiceProvider#GetService(System.Type)">
            <summary>
            see IServiceProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.Activate(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.Apply">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.Deactivate">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.GetPageInfo(Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.Help(System.String)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.IsPageDirty">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.Microsoft#VisualStudio#OLE#Interop#IPropertyPage#Move(Microsoft.VisualStudio.OLE.Interop.RECT[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.SetObjects(System.UInt32,System.Object[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.SetPageSite(Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.Show(System.UInt32)">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <summary>
            See IPropertyPage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.SetObjectsInternal(System.UInt32,System.Object[])">
            <summary>
            SetObjects helper
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.GetDialogFont">
            <summary>
            GetDialogFont helper
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl.CreatePropertyGrid">
            <summary>
            CreatePropertyGrid helper
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IPageMetadata">
            <summary>
            A piece of metadata to describe a page to be shown on the project designer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IPageMetadata.Name">
            <summary>
            Gets the canonical name of the page.  It needs be unique.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IPageMetadata.PageGuid">
            <summary>
            Gets the Guid of the page control.  The project designer cocreates the control to show the page.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IPageMetadata.PageOrder">
            <summary>
            Gets a number to sort pages, a page with a smaller number will be shown at the top.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IPageMetadata.HasConfigurationCondition">
            <summary>
            Gets a value indicating whether the page shows different values for different configurations/platforms.
            The project designer will show a configuration toolbar on the top of the page.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IVsProjectDesignerPageProvider">
            <summary>
            Provides project pages to be shown for the project.
            A project that wants to use the project designer has to implement this component under unconfigured project context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IVsProjectDesignerPageProvider.GetPagesAsync">
            <summary>
            Get metadata for project desiger pages need be shown for the project.
            Pages from all providers for the project will be merged together, and all of them will be shown.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IDynamicPropertyModifier">
            <summary>
            Optional interface implemented by property page service provider object
            Allows to get/set value of not yet applied dynamic property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IDynamicPropertyModifier.TryGetPropertyValue(System.String,System.String@)">
            <summary>
            Get value
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.Properties.IDynamicPropertyModifier.SetPropertyValueAsync(System.String,System.String)">
            <summary>
            Set value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IFlavoredProjectCompatibilityProvider">
            <summary>
            An interface a flavor project extension can implement to check whether it can be opened inside CPS.
            Note: the MEF component that implements this contract must carry ProjectTypeGuidFilterAttribute metadata.
            This component is only used by CPS when we use CPS to replace an old flavored project system.  It is not
            used in any other modern CPS projects.  This component allows CPS to fall back to the old project system
            when it is necessary, so it can replace the old flavored project progressively.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IFlavoredProjectCompatibilityProvider.IsProjectCompatibleAsync(Microsoft.Build.Construction.ProjectRootElement)">
            <summary>
            Check whether a flavor project can be opened inside CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IFlavoredProjectCompatibilityProvider.IsProjectNeedBeUpgradedAsync(Microsoft.Build.Construction.ProjectRootElement)">
             <summary>
             Check whether a flavor project need be upgraded through the original projectFactory.
              This is only called when <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.IFlavoredProjectCompatibilityProvider.IsProjectCompatibleAsync(Microsoft.Build.Construction.ProjectRootElement)"/> returns true.
            
             Note: if this method return true, the original project factory will be used to upgrade the project.
              If the flavored project doesn't have detail logic to support this check, it is ok to return true always, but it
             will slow down the project load scenario.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IVsWizardExecutionEvents">
            <summary>
            An interface that may be exported into the UnconfiguredProject scope to receive the events on executing item template wizard.
            </summary>
            <remarks>
            The listening clients should live in either ProjectService scope or UnconfiguredProject scope.
            </remarks>
            <remarks>
            The project that is executing the wizard is not passed to the listening clients.
            Instead, the listening clients could import <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject"/> to put
            themselves in UnconfiguredProject scope and then they will be called only when that project
            is executing the wizard.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsWizardExecutionEvents.OnAfterRunWizard(System.String,System.String,EnvDTE.wizardResult)">
            <summary>
            Notifies listening clients that the wizard has been executed.
            </summary>
            <param name="wizardPath">The full path of the wizard.</param>
            <param name="itemPath">The full path of the item that should be created by the wizard.</param>
            <param name="wizardResult">The result of the wizard execution.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectAsyncLoadDashboardInternal">
            <summary>
            An export that reports on the status of async project load.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectAsyncLoadDashboardInternal.OnProjectLoadedInHost">
            <summary>
            Signals that the host IDE considers the project loaded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectAsyncLoadDashboard">
            <summary>
            An export that reports on the status of async project load.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IProjectAsyncLoadDashboard.ProjectLoadedInHost">
            <summary>
            Gets a task that completes when the host recognizes that this project is loaded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService">
            <summary>
            Allows an extension to nest projects underneath a CPS project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.NestedHierarchyAdded">
            <summary>
            Raised when a hierarchy item has been attached to a nested hierarchy.
            </summary>
            <remarks>
            This event must be raised on the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.GetNestedHierarchyAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets the hierarchy nested by the specified tree.
            </summary>
            <param name="projectTree">The project tree.</param>
            <returns>A task whose result is the nested hierarchy, or whose result is <c>null</c> if there is no nested hierarchy for this tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnOpenChildrenAsync">
            <summary>
            Called when the IDE invokes IVsParentProject.OpenChildren.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnSetNestedProjectAsync(System.Guid,System.UInt32)">
            <summary>
            Called when the IDE invokes IVsParentProject3.SetNestedProject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnRemoveNestedProjectAsync(System.Guid)">
            <summary>
            Called when the IDE invokes IVsParentProject..
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnDeleteNestedProjectAsync(System.Guid)">
            <summary>
            Called when the IDE invokes IVsParentProject3.DeleteNestedProject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnNotifyOnInvalidateItemsAsync(System.UInt32,System.Boolean)">
            <summary>
            Called when the IDE invokes IVsParentProject3.NotifyOnInvalidateItems.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnNotifyOnItemAddedAsync(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnNotifyOnItemDeletedAsync(System.UInt32)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnNotifyOnPropertyChangedAsync(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnNestedProjectReloadedAsync(System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnAfterAddedToSolutionAsync">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnPrepareNestedProjectCreationInfoAsync(System.String,System.UInt32)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnCleanupNestedProjectCreationInfoAsync(System.Boolean,System.UInt32,System.UInt32,System.Guid)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnQueryRenameNestedProjectAsync(System.Guid,System.String,System.String)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnAfterRenameNestedProjectAsync(System.Guid,System.String,System.String)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnNestedProjectClosedAsync(System.UInt32)">
            <summary>
            Called when the IDE invokes a similar method on IVsParentProject3.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnCloseChildrenAsync">
            <summary>
            Called when the IDE invokes IVsParentProject.CloseChildren.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService.OnCloseProjectAsync">
            <summary>
            Called when this (parent) project is about to be closed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.NestedHierarchyAddedEventArgs">
            <summary>
            Describes a nested hierarchy and its location.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.NestedHierarchyAddedEventArgs.#ctor(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.NestedHierarchyAddedEventArgs"/> class.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="nestedHierarchy">The nested hierarchy.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.NestedHierarchyAddedEventArgs.ItemId">
            <summary>
            Gets the ITEMID of the nesting item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.NestedHierarchyAddedEventArgs.NestedHierarchy">
            <summary>
            Gets the nested hierarchy.
            </summary>
            <value>
            The nested hierarchy.
            </value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IVsIsDocumentInProjectHandler">
            <summary>
            Handles calls to IVsProject*.IsDocumentInProject
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsIsDocumentInProjectHandler.IsDocumentInProjectAsync(System.String)">
            <summary>
            Checks for the presence of a file in the project.
            </summary>
            <param name="documentMoniker">The moniker of the document or file being sought.</param>
            <returns>A struct detailing what was (or wasn't) found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IsDocumentInProjectResult">
            <summary>
            Describes the result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsIsDocumentInProjectHandler.IsDocumentInProjectAsync(System.String)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IsDocumentInProjectResult.ProjectTree">
            <summary>
            Gets or sets the project tree.
            </summary>
            <value>
            The project tree.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IsDocumentInProjectResult.ProjectTreeVersion">
            <summary>
            Gets or sets the project tree version.
            </summary>
            <value>
            The project tree version.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IsDocumentInProjectResult.OldDocumentPriority">
            <summary>
            Gets or sets the document priority as it should be returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IsDocumentInProjectResult.DocumentPriority">
            <summary>
            Gets or sets the document priority as it should be returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject5.IsDocumentInProject2(System.String,System.Int32@,System.Int32@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IsDocumentInProjectResult.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IActiveIntellisenseProjectProvider">
            <summary>
            An interface that may be exported at the UnconfiguredProject scope that allows CPS extenders
            to provide their own handling of the VSHPROPID_ActiveIntellisenseProjectContext
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IActiveIntellisenseProjectProvider.ActiveIntellisenseProjectContext">
            <summary>
            Gets or sets the current shared item context intellisense project name. Can be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ICodeModelProvider">
            <summary>
            An interface that may be exported to the UnconfiguredProject scope
            that binds language services and DTE together to provide code models.
            </summary>
            <devremarks>
            TODO: Rename to IFileCodeModelProvider
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ICodeModelProvider.GetFileCodeModel(EnvDTE.ProjectItem)">
            <summary>
            Gets the file code model for a given DTE project item.
            </summary>
            <param name="fileItem">The DTE file for which to create a code model.</param>
            <returns>The code model.  Possibly null.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ILegacyProjectSystemRegistration">
            <summary>
            Allows for associating legacy project system implementations with CPS services.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ILegacyProjectSystemRegistration.SetLegacyProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService)">
            <summary>
            Associates a CPS service with a non-CPS IVsHierarchy.
            </summary>
            <param name="hierarchy">The non-CPS project hierarchy COM object.</param>
            <param name="integrationService">The CPS service that can be used to discover a CPS feature within the legacy project.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectCodeModelProvider">
            <summary>
            An interface that may be exported to the UnconfiguredProject scope
            that binds language services and DTE together to provide code models.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectCodeModelProvider.GetCodeModel(EnvDTE.Project)">
            <summary>
            Gets the file code model for a given DTE project.
            </summary>
            <param name="project">The DTE project for which to create a code model.</param>
            <returns>The code model.  Possibly null.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ISharedItemContextHierarchyProvider">
            <summary>
            An interface that may be exported at the UnconfiguredProject scope that allows that allows CPS extenders
            to provider their own handling of the VSHPROPID_SharedItemContextHieararchy
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.ISharedItemContextHierarchyProvider.SharedItemContextHierarchy">
            <summary>
            Gets or sets the current shared item context hierarchy. Can be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices">
            <summary>
            Visual Studio specific services for the shim.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.SolutionDirectory">
            <summary>
            Gets the directory containing the solution file.
            </summary>
            <returns>A full path that always ends with a directory separator character.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.LookupProjectPathFromProjectGuid(System.Guid)">
            <summary>
            Gets the absolute project path from a project GUID.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.GetProjectIdentifierGuid(EnvDTE.Project)">
            <summary>
            Gets the project GUID from several different objects Visual Studio might use.
            </summary>
            <param name="project">
            A IVsHierarchy, VCProject or a EnvDTE.Project instance.
            </param>
            <returns>The project guid, or <see cref="F:System.Guid.Empty"/> if the type of the object was not recognized.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.GetProjectIdentifierGuid(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets the project GUID from several different objects Visual Studio might use.
            </summary>
            <param name="project">
            A IVsHierarchy, VCProject or a EnvDTE.Project instance.
            </param>
            <returns>The project guid, or <see cref="F:System.Guid.Empty"/> if the type of the object was not recognized.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.GetProjectIdentifierGuid(System.String)">
            <summary>
            Gets the Guid given a path to a project if possible.
            </summary>
            <param name="projectName">The full or solution-relative path to a project.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown when the given project does not belong to the solution.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.IsProjectContainedInSolution(System.Guid)">
            <summary>
            Indicates if the project with the given guid is present in the opened solution.
            </summary>
            <param name="value"> The project guid. </param>
            <returns> True, if and only if the project is contained by the solution. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.IsProjectContainedInSolution(System.String)">
            <summary>
            Indicates if the project with the given evaluated full path is present in the opened solution.
            </summary>
            <param name="evaluatedFullPath"> The evaluated full path of the project. </param>
            <returns> True, if and only if the project is contained by the solution. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices.GetHierarchyByProjectName(System.String)">
            <summary>
            Gets the IVsHierarchy object for the project with the given path.
            </summary>
            <param name="projectName">The absolute or solution-relative path to a project file.</param>
            <returns>The IVsHierarchy object, or <c>null</c> if it could not be retrieved, for various reasons.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectTreeService">
            <summary>
            An interface implemented by the CPS IVsProject object to offer project tree services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectTreeService.InitialSourceItemsPopulated">
            <summary>
            Gets a task whose completion signals that source items have been populated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectTreeService.PublishLatestReferencesAsync">
            <summary>
            Returns a task that will complete when the latest snapshot from the project subscription service is available.
            </summary>
            <returns>A task, which the caller could await for.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageFeaturesProvider">
            <summary>
            Provides programming language specific features.
            i.e. makes a proper identifier from the given string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageFeaturesProvider.MakeProperIdentifier(System.String)">
            <summary>
            Makes a proper identifier from the given string.
            </summary>
            <param name="name">The input string.</param>
            <returns>A proper identifier which meets the language spec.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageFeaturesProvider.MakeProperNamespace(System.String)">
            <summary>
            Makes a proper namespace from the given string.
            </summary>
            <param name="name">The input string.</param>
            <returns>A proper namespace which meets the language spec.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.ILanguageFeaturesProvider.ConcatNamespaces(System.String[])">
            <summary>
            Concatenate multiple namespace names.
            </summary>
            <param name="namespaceNames">The array of namespace names to be concatenated.</param>
            <returns>A concatenated namespace name.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectTargetChange">
            <summary>
            This interface was defined to work around the issue that IVsProjectTargetChange can't be used across assembly boundaries
            when it's used as a generic type parameter (e.g. Task&lt;IVsProjectTargetChange&gt;), because IVsProjectTargetChange is
            an embedded interop type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService">
            <summary>
            Obtains the project GUID.
            Optionally, you can also implement <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService2"/> that allows an asynchronous implementation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService.ProjectGuid">
            <summary>
            Gets the project identifier that uniquely identifies this project within a solution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions">
            <summary>
            Describe the context when <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler.CheckForRetargetAsync(Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions)"></see> is invoked.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.NoPrompt">
            <summary>
            There will be no prompt. Load sequence will proceed with the default action on Cancel.
            This option will be used on solution load case after first open.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.RequiredOnly">
            <summary>
            This option will consider only projects that have "IVsProjectTargetChange.UnloadOnCancel" equal to <c>true</c>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.FirstSolutionLoad">
            <summary>
            Set when load project/solution for the first time
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.ProjectLoad">
            <summary>
            Set when called after project load
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.SolutionRetarget">
            <summary>
            Set when invoking Solution Retarget command
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.ProjectRetarget">
            <summary>
            Set when invoked by Retarget project command
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions.ProjectReload">
            <summary>
            Set when called after project load
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.RetargetOptions">
            <summary>
            A hint to <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler.RetargetAsync(System.IO.TextWriter,Microsoft.VisualStudio.ProjectSystem.VS.RetargetOptions,Microsoft.VisualStudio.ProjectSystem.VS.IProjectTargetChange,System.String)"/> telling it the extra requirements for retargeting.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.RetargetOptions.Backup">
            <summary>
            Do backup if it's supported.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler">
            <summary>
            An interface a MEF component can implement to opt in the project retargeting experience.
            This interface is expected to be defined in UnconfiguredProject scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler.CheckForRetargetAsync(Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions)">
            <summary>
            Checks the project to see whether it wants to opt in the retargeting experiences.
            </summary>
            <param name="options">The option to describe the context.</param>
            <returns>
            A task whose result is an instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectTargetChange"/>.
            The task's result can be <c>null</c> if the project doesn't need retargeting.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler.RetargetAsync(System.IO.TextWriter,Microsoft.VisualStudio.ProjectSystem.VS.RetargetOptions,Microsoft.VisualStudio.ProjectSystem.VS.IProjectTargetChange,System.String)">
            <summary>
            Execute the retargeting.
            </summary>
            <param name="outputLogger">The logger used to report states, warnings, and errors.</param>
            <param name="options">The options to describe the extra requirements need to take care.</param>
            <param name="projectTargetChange">The instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectTargetChange"/>.</param>
            <param name="backupLocation">The full path of the backup folder.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler.GetAffectedFilesAsync(Microsoft.VisualStudio.ProjectSystem.VS.IProjectTargetChange)">
            <summary>
            The list of full paths of files which are going to be changed during retargeting.
            </summary>
            <param name="projectTargetChange">The result of a prior call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler.CheckForRetargetAsync(Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions)" />. This parameter is required.</param>
            <returns>A task whose result is the list of full paths of the affected files.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IVsUnconfiguredProjectTypeGuidSetter">
            <summary>
            A backdoor for VC to set the ProjectTypeGuid on the IVsUnconfiguredProjectIntegrationService.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IVsUnconfiguredProjectTypeGuidSetter.ProjectTypeGuid">
            <summary>
            Sets the ProjectTypeGuid property on the IVsUnconfiguredProjectIntegrationService.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IVsUnconfiguredProjectTypeGuidSetter.SetActiveProjectConfigurationAsync(Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration,Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Sets the active project configuration to be the specified configuration.
            </summary>
            <param name="activeProjectConfiguration">The active project configuration.</param>
            <param name="previouslyActiveProjectConfiguration">The previously active project configuration. This parameter could be <c>null</c>.</param>
            <remarks>This method needs to be invoked on UI thread.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute">
            <summary>
            Exports <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserAsync"/> with relevant metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute"/> class.
            Code should switch to use <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute.#ctor(System.String,System.Int32)"/> instead of this one
            to include a valid position.
            </summary>
            <param name="providerContextIdentifier">The GUID that describes which reference manager provider context this export initializes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute"/> class.
            </summary>
            <param name="providerContextIdentifier">The GUID that describes which reference manager provider context this export initializes.</param>
            <param name="position">The number that controls the order of tabs in the reference manager, a page with higher number appears earlier in the dialog.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute.ProviderContextIdentifier">
            <summary>
            Gets the GUID that describes which reference manager provider context this export initializes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute.Position">
            <summary>
            Gets the number controlling the order of the tab in the reference manager.
            If it is 0, the order number of the MEF component will be used.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserAsync">
            <summary>
            An interface implemented by all CPS provider context providers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserAsync.IsApplicable">
            <summary>
            Returns a value indicating whether this provider should be activated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserAsync.CreateProviderContextAsync">
            <summary>
            Creates a populated provider context.
            </summary>
            <remarks>
            The caller is responsible to dispose of the result when its use is over.
            </remarks>
            <returns>
            A task whose result is the export life time context. The expected type of object here is <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext"/>.
            Returning Task&lt;ExportLifetimeContext&lt;object[]&gt;&gt; instead of Task&lt;ExportLifetimeContext&lt;IVsReferenceProviderContext[]&gt;&gt; is because IVsReferenceProviderContext is an embedded interop type,
            so it can't be used across assembly boundaries.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserAsync.ChangeReferencesAsync(System.UInt32,System.Object)">
            <summary>
            Applies reference changes.
            </summary>
            <param name="operation">The add or remove operation as defined by <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREFERENCECHANGEOPERATION"/></param>
            <param name="changedContext"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsReferenceProviderContext"/> representing the references to change. The declaration uses object instead because IVsReferenceProviderContext is an embedded interop type,
            so it can't be used across assembly boundaries.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserComponentMetadataView">
            <summary>
            A view at metadata that is expected on an export of <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserAsync"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserComponentMetadataView.ProviderContextIdentifier">
            <summary>
            Gets the GUID that matches the reference manager context provider's GUID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserComponentMetadataView.Position">
            <summary>
            Gets the number to control the order of the tab in the reference manager.
            If it is 0, the order of the component will be used.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider">
            <summary>
            An interface that MEF extensions can export to provide an implementation for profiling the project.
            </summary>
            <remarks>
            The policy in CPS is that the first preferred MEF extension is used exclusively.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.LegacyWebSupportRequired">
            <summary>
            Gets a value indicating whether legacy Web support is required.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.SuppressSignedAssemblyWarnings">
            <summary>
            Gets a value indicating if signed assembly warnings are to be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.AllBrowserTargetsFinishedAsync">
            <summary>
            Notifies the profiler that all of the browser targets have exited if browser targets were created.
            This is useful for the profilr to finish profiling when the browser is closed by shutting down any services they provided.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.BeforeLaunchAsync(System.String)">
            <summary>
            Calls this method before the profile starts (e.g. web project may need to stop any running instance of IIS Express before profile starts.)
            </summary>
            <param name="profilingTask">One of the strings returned from <see cref="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.GetSupportedProfilingTasksAsync"/></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.BeforeTargetsLaunchedAsync">
            <summary>
            Calls this method before any launch targets are started.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.GetSupportedProfilingTasksAsync">
            <summary>
            Gets the profiling tasks that are supported by the profiler.
            </summary>
            <returns>The supported profiling tasks. A <c>null</c> IEnumerable is acceptable to the caller.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.LaunchProfilerAsync">
            <summary>
            Launches the profiler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.ProfilerAnalysisFinishedAsync">
            <summary>
            Notifies the profiler that the analysis is fully completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider.QueryProfilerTargetInfoEnumAsync">
            <summary>
            Returns the information of the profiler targets that will be used for launch.
            </summary>
            <returns>
            A task whose result is the profiler targets info. The expected type of object here is IVsProfilerTargetInfo.
            Returning Task&lt;object[]&gt; instead of Task&lt;IVsProfilerTargetInfo[]&gt; is because IVsProfilerTargetInfo is an embedded interop type,
            so it can't be used across assembly boundaries.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox">
            <summary>
            A dialog box with up to 4 choices
            This lives in the VS assembly because WPF Xaml compile
            interferes with the CPS SDK XamlRuleToCode compile
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox"/> class.
            Creates the dialog where the number of buttons specified indicates how many "choices"
            are available. The button chosen by the user is returned in Result. The values
            are from the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult"/> enum.
            </summary>
            <param name="dialogTitle">The title of the dialog.</param>
            <param name="errorText">The error message to be displayed.</param>
            <param name="buttons">The set of buttons to be displayed. Note that 1 to 4 buttons are supported where
            button[0] is the right most button and is the default and cancel button.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox.SelectedAction">
            <summary>
            The action selected by the user. Defaults to <see cref="F:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult.Cancel"/>
            if no action is selected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox.ShowModalAndGetResult">
            <summary>
            Shows the modal and gets the result
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox.ViewModel_CloseDialog(System.Object,Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult)">
            <summary>
            Invoked by the view model with the dialog result
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult">
            <summary>
            TODO: Move to implementation assembly when 411632 is fixed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult.Cancel">
            <summary>
            Message box has been cancelled
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult.Button1">
            <summary>
            Button1 clicked
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult.Button2">
            <summary>
            Button2 clicked
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult.Button3">
            <summary>
            Button3 clicked
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult.Button4">
            <summary>
            Button4 clicked
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxViewModel">
            <summary>
            ViewModel for a dialog with up to 4 buttons
            TODO: Move to implementation assembly when 411632 is fixed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxViewModel.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxViewModel"/> class.
            Creates the dialog where the number of buttons specified indicates how many "choices"
            are available. The button chosen by the user is returned in Result. The values
            are from the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult"/> enum. Note that 1 to 4 buttons are supported where
            button[0] is the right most button and is the default and cancel button.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxViewModel.CloseDialog">
            <summary>
            Dialog needs to listen to this event to know when to close.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.RelayCommand">
            <summary>
            Represents an ICommand. Delegates are defined to for the execute and
            CanExecute handlers. If no CanExecute is specified it returns true in the CanExecute
            method.
            TODO: Move to implementation assembly when 411632 is fixed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.RelayCommand"/> class.
            Creates a new command that is always enabled
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.RelayCommand"/> class.
            Creates a new command.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId">
            <summary>
            Represents an ITEMID in an IVsHierarchy.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.Root">
            <summary>
            Represents the root of a project hierarchy and is used to identify the entire hierarchy, as opposed
            to a single item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.Selection">
            <summary>
            Represents the currently selected items, which can include the root of the hierarchy.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.Nil">
            <summary>
            Represents the absence of a project item. This value is used when there is no current selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.Empty">
            <summary>
            Represent an empty item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.Id">
            <summary>
            Returns the underlying ITEMID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.IsRoot">
            <summary>
            Returns a value indicating if the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId"/> represents the root of a project hierarchy
            and is used to identify the entire hierarchy, as opposed to a single item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.IsSelection">
            <summary>
            Returns a value indicating if the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId"/> represents the currently selected items,
            which can include the root of the hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.IsEmpty">
            <summary>
            Returns a value indicating if the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId"/> is empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.IsNilOrEmpty">
            <summary>
            Returns a value indicating if the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId"/> is <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.IsNil"/> or
            <see cref="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.IsEmpty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId.IsNil">
            <summary>
            Returns a value indicating if the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId"/> represents the absence of a project item.
            This value is used when there is no current selection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.HResult">
            <summary>
            Represents a COM HRESULT
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.OK">
            <summary>
            The S_OK value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.False">
            <summary>
            The S_FALSE value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.NotImplemented">
            <summary>
            The E_NOTIMPL value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.NoInterface">
            <summary>
            The E_NOINTERFACE value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.MemberNotFound">
            <summary>
            The DISP_E_MEMBERNOTFOUND value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.InvalidArg">
            <summary>
            The E_INVALIDARG value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Unexpected">
            <summary>
            The E_UNEXPECTED value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Fail">
            <summary>
            The E_FAIL value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Pending">
            <summary>
            The E_PENDING value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.IncompatibleProject">
            <summary>
            Indicates to VS during project load that this is an incompatible project type for
            the current OS or SKU of VS.
            </summary>
            <remarks>
            Copied from VSShell110.idl
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.UnsupportedFlavorProject">
            <summary>
            Indicates to VS during project load that this is an incompatible flavored project type in CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.WrongThread">
            <summary>
            Indicates that code was executed from the wrong thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.hr">
            <summary>
            The HRESULT this value represents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.exception">
            <summary>
            The captured exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HResult"/> struct.
            </summary>
            <param name="hr">The HRESULT that this value represents.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HResult"/> struct.
            </summary>
            <param name="exception">The exception that is to be converted to an HRESULT.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.VS.HResult"/> struct.
            </summary>
            <param name="hr">The HRESULT that this value represents.</param>
            <param name="captureErrorInfoNow">
            Captures the current IErrorInfo struct immediately, if <paramref name="hr"/>
            represents a failure.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.HResult.ErrorBehavior">
            <summary>
            Indicates what the desired behavior is in the event of a failure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.ErrorBehavior.Throw">
            <summary>
            An exception should be (re)thrown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.ErrorBehavior.Report">
            <summary>
            An error should be reported to the user, but then execution flow should resume.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VS.HResult.ErrorBehavior.Log">
            <summary>
            An error should be quietly logged, and then execution flow should resume.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Exception">
            <summary>
            Gets the exception that triggered a failing HRESULT.
            </summary>
            <value>Null if this HRESULT represents a success value.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Failed">
            <summary>
            Gets a value indicating whether this HRESULT represents a failure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Succeeded">
            <summary>
            Gets a value indicating whether this HRESULT represents a success.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HResult.IsOK">
            <summary>
            Gets a value indicating whether this HRESULT is S_OK.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HResult.IsFalse">
            <summary>
            Gets a value indicating whether this HRESULT is S_FALSE.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VS.HResult.IsNotImplemented">
            <summary>
            Gets a value indicating whether this HRESULT is E_NOTIMPL.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.op_Implicit(System.Int32)~Microsoft.VisualStudio.ProjectSystem.VS.HResult">
            <summary>
            Converts an HRESULT int to an HResult struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.op_Implicit(Microsoft.VisualStudio.ProjectSystem.VS.HResult)~System.Int32">
            <summary>
            Converts an HResult struct to an int.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.op_Equality(Microsoft.VisualStudio.ProjectSystem.VS.HResult,Microsoft.VisualStudio.ProjectSystem.VS.HResult)">
            <summary>
            Returns true if result1 equals resul2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.op_Inequality(Microsoft.VisualStudio.ProjectSystem.VS.HResult,Microsoft.VisualStudio.ProjectSystem.VS.HResult)">
            <summary>
            Returns true if result1 is not equal to result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.ToHResult(System.Int32)">
            <summary>
            Converts an int to an HResult, and captures the current IErrorInfo for failures.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.FromHResult(Microsoft.VisualStudio.ProjectSystem.VS.HResult)">
            <summary>
            Converts an HResult struct to an int.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Invoke(System.Action,System.IServiceProvider,Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Invokes some action, and converts exceptions into HRESULTs that include messages.
            </summary>
            <param name="action">The code to invoke and catch exceptions for.</param>
            <param name="vsShellServiceProvider">Any IServiceProvider in VS, so that SVsUIShell may be obtained in the event of an error.</param>
            <param name="projectFaultHandlerService">The IProjectFaultHandlerService service to handle the caught exception.</param>
            <param name="project">The relevant <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject"/> instance if it is applicable.</param>
            <returns>The HRESULT.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Invoke(System.Func{Microsoft.VisualStudio.ProjectSystem.VS.HResult},System.IServiceProvider,Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Invokes some action, and converts exceptions into HRESULTs that include messages.
            </summary>
            <param name="action">The code to invoke and catch exceptions for.</param>
            <param name="vsShellServiceProvider">Any IServiceProvider in VS, so that SVsUIShell may be obtained in the event of an error.</param>
            <param name="projectFaultHandlerService">The IProjectFaultHandlerService service to handle the caught exception.</param>
            <param name="project">The relevant <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject"/> instance if it is applicable.</param>
            <returns>The HRESULT.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Verify(Microsoft.VisualStudio.ProjectSystem.VS.HResult,System.String,Microsoft.VisualStudio.ProjectSystem.VS.HResult.ErrorBehavior)">
            <summary>
            Checks that an HRESULT is successful or throws and handles the error in a predictable way.
            </summary>
            <param name="hr">The HRESULT to check.</param>
            <param name="unformattedErrorMessage">An unformatted message to include with an error text.  {0} will be replaced with the HRESULT value, and {1} will be replaced with the exception details (if any).</param>
            <param name="errorHandling">The kind of error handling to apply.</param>
            <returns>A value indicating whether the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Verify(System.Func{System.Int32},System.String,Microsoft.VisualStudio.ProjectSystem.VS.HResult.ErrorBehavior)">
            <summary>
            Invokes a delegate that returns an HRESULT or throws and handles the error in a predictable way.
            </summary>
            <param name="interopInvocation">The delegate that will return an HRESULT or throw.</param>
            <param name="unformattedErrorMessage">An unformatted message to include with an error text.  {0} will be replaced with the HRESULT value, and {1} will be replaced with the exception details (if any).</param>
            <param name="errorHandling">The kind of error handling to apply.</param>
            <returns>A value indicating whether the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.Equals(System.Object)">
            <summary>
            Compares this HResult with another.
            </summary>
            <param name="obj">The HResult or int that represents an HRESULT to compare against.</param>
            <returns>True if the HRESULT code is the same; otherwise <c>false</c></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.HResult.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions.GetProperty``1(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.VsHierarchyPropID,``0)">
            <summary>
            Gets the value of the specified property if the hierarchy supports it, or throws an excepton if there was an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions.GetProperty(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.VsHierarchyPropID,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId)">
            <summary>
            Gets the value of the specified property if the hierarchy supports it, or throws an excepton if there was an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions.GetProperty``1(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId,Microsoft.VisualStudio.Shell.VsHierarchyPropID,``0)">
            <summary>
            Gets the value of the specified property of the specified item if the hierarchy supports it, or throws an exception if there was an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions.GetProperty(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId,Microsoft.VisualStudio.Shell.VsHierarchyPropID,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId)">
            <summary>
            Gets the value of the specified property of the specified item if the hierarchy supports it, or throws an exception if there was an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions.GetProperty``1(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId,Microsoft.VisualStudio.Shell.VsHierarchyPropID,``0,``0@)">
            <summary>
            Gets the value of the specified property of the specified item if the hierarchy supports it, or returns a HRESULT if there was an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions.GetProperty(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId,Microsoft.VisualStudio.Shell.VsHierarchyPropID,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId@)">
            <summary>
            Gets the value of the specified property of the specified item if the hierarchy supports it, or returns a HRESULT if there was an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions.GetPropertyCore``1(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId,Microsoft.VisualStudio.Shell.VsHierarchyPropID,``0,``0@)">
            <summary>
            Gets the value of the specified property of the specified item if the hierarchy supports it, or returns a HRESULT if there was an error.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VS.VsUtilities">
            <summary>
            Visual Studio specific utilities and extension methods for CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsUtilities.AsUnconfiguredProject(EnvDTE.Project)">
            <summary>
            Gets the CPS UnconfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="project">The project for which to obtain the UnconfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsUtilities.AsUnconfiguredProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets the CPS UnconfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="hierarchy">The project for which to obtain the UnconfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsUtilities.AsUnconfiguredProject(Microsoft.VisualStudio.Shell.Interop.IVsProject)">
            <summary>
            Gets the CPS UnconfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="project">The project for which to obtain the UnconfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VS.VsUtilities.AsConfiguredProject(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg)">
            <summary>
            Gets the CPS ConfiguredProject behind a Visual Studio project, if applicable.
            </summary>
            <param name="projectConfig">The project configuration for which to obtain the ConfiguredProject.</param>
            <returns>The CPS project, if applicable; otherwise <c>null</c>.</returns>
            <remarks>
            This method does not work for VC projects.
            </remarks>
        </member>
    </members>
</doc>
