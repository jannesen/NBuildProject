<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.ProjectSystem</name>
    </assembly>
    <members>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildableConfiguredProjectsProvider">
            <summary>
            A dataflow block to update the set of configured projects which are buildable (design time build is actively driven).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildableConfiguredProjectsProvider.Current">
            <summary>
            The current set of configured projects, which is in the buildable state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IErrorListLoggerFactory">
            <summary>
            A factory to create a MSBuild logger that populates the Error List with build results.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IErrorListLoggerFactory.CreateErrorListLogger(Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildTargetErrorList)">
            <summary>
            Create an error list logger for an error list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesMerger">
            <summary>
            A component to merge two set of build messages into one, and potentially remove duplicated items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesMerger.Merge(System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage},System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage},Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesMergerLogger)">
            <summary>
            Merge two sets of build messages into one. Between two duplicate messages, the merger must perfer to preserve the old message, which might have
            been shown to the user, and linked to some output messages.
            </summary>
            <param name="originalMessages">Messages generated earlier</param>
            <param name="newMessages">Messages generated later</param>
            <param name="logger">When it is not null, the merger must report all deduplication to the logger.</param>
            <returns>Merged messages.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesMergerLogger">
            <summary>
            A logger to record all messages which have been deduplicated.
            This is necessary to track messages in the system eventually.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesMergerLogger.ReportMessageMerged(System.Int32,System.Int32)">
            <summary>
            Report that one message has been merged into another one.
            </summary>
            <param name="messagedIdMergedFrom">Message which has been merged and removed from the system.</param>
            <param name="messagedIdMergedTo">The original message.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildTargetErrorList">
            <summary>
            A component that manages the project's build-related contributions to the error list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildTargetErrorList.SubmitTargetResults(System.String,System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage})">
            <summary>
            Add the build execution messages for a given target to the list.
            </summary>
            <param name="target">The target that just executed.</param>
            <param name="messages">The new list of messages produced by executing this target.</param>
            <remarks>
            Differnt error list might have different logic to merge errors. The message may be merged to the existing set.
            Or previous messages submitted for the specified <paramref name="target"/> can be replaced with the new messages.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildTargetErrorList.ClearAllAsync">
            <summary>
            Clears all of the existing error messages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildTargetErrorList.RemoveTargetResults(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove all messages for given targets.
            </summary>
            <param name="targets">Names of a build targets.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesDataSource">
            <summary>
            A data source to produce build messages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor2">
            <summary>
            This component provides a mechanism to intercept and optionally take over
            processing of build error messages by the default <see cref="T:Microsoft.Build.Framework.ILogger"/> implementation.
            This is called by the latter component.
            Note: this will replace <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor2.HandleEventAsync(Microsoft.Build.Framework.BuildEventArgs,System.String,System.IO.TextWriter)">
            <summary>
            Called by the default implementation of <see cref="T:Microsoft.Build.Framework.ILogger"/> before processing any
            build error message. The default implementation does not further process the message itself if
            "true" is returned from this method.
            </summary>
            <param name="buildEventArgs"> Event args of the build event raised by MSBuild. </param>
            <param name="message"> The error message to process.</param>
            <param name="outputWindowWriter">A component to write to the output window pane</param>
            <returns> "true" if the error message has been fully processed and does not need to be processed further by
            the default <see cref="T:Microsoft.Build.Framework.ILogger"/> implementation. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor2.FlushAsync">
            <summary>
            Flush the event processor to ensure all events sent ealier have been processed.
            This allows the processor to return HandleEventAsync, but finish pending events through a background queue.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage">
            <summary>
            Represent one piece of message to be published in the error list window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage.#ctor(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage.BuildEventArgs">
            <summary>
            Message from msbuild.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage.SequenceId">
            <summary>
            A global sequence id of messages. This can help to sort messages or eventually to support features
            to link the messages in the error list window to messages in the output window.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessages">
            <summary>
            Represent build messages which need be published to the error list window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessages.#ctor(System.String,System.Collections.Immutable.ImmutableDictionary{System.String,System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessages"/> class.
            </summary>
            <param name="collectionName">The name of this messages collection.</param>
            <param name="messages">Build output messages grouped by targets.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessages.CollectionName">
            <summary>
            Get the name of this collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessages.Messages">
            <summary>
            The list of messages grouped by targets.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList">
            <summary>
            An data source that manages the project's build-related contributions to the error list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.listName">
            <summary>
            The name of this list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.empty">
            <summary>
            The empty build message.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.submitMessageBlock">
            <summary>
            The data block that publishes the Error List.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.publicBlock">
            <summary>
            The public data block of the error list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.currentMessages">
            <summary>
            A map of targets and the messages they generated that still need to be forwarded to the VS Error List when we have time on the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.BuildMessagesMerger">
            <summary>
            How to merge messages for the same target.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.SubmitTargetResults(System.String,System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildMessage})">
            <summary>
            Sets the build execution messages for a given target.
            </summary>
            <param name="target">The target that just executed.</param>
            <param name="messages">The new list of messages produced by executing this target.</param>
            <remarks>
            Any previous messages submitted for the specified <paramref name="target"/> are replaced with the new messages.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.RemoveTargetResults(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove messages for a set of targets.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.ClearAllAsync">
            <summary>
            Clears all of the existing error messages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ProjectBuildTargetErrorList.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.SimpleAppendMessageMerger">
            <summary>
            A simple <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesMerger"/>, which always appends new messages to the existing list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.SimpleReplaceMessageMerger">
            <summary>
            A simple <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildMessagesMerger"/> which always replaces old messages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsServiceInternal">
            <summary>
            Additional information of project generated build outputs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsServiceInternal.GetOutputGroupMetadataAsync">
            <summary>
            Collects the metadata of all output groups.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase">
            <summary>
            Common base class for build manager hosts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.IsCancelable">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.ProjectCollection">
            <summary>
            Gets the CPS project collection to which this build manager host applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.ThreadingService">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.JoinableTaskCollection">
            <summary>
            Gets the collection of outstanding JoinableTasks created by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.JoinableTaskFactory">
            <summary>
            Gets the joinable task factory that should be used for any
            switches to the main thread or for creating JoinableTasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.IsApplicableAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.Build(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.AlignBuildRequestNodeAffinities(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest},Microsoft.Build.Execution.BuildParameters)">
            <summary>
            Sets the required node affinities from all the individual build requests on the BuildParameters
            so that P2P jumps are all made to the appropriate nodes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildManagerHostBase.ExecuteBuildAndNotifyRequestsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Notifies build requests that the build is about to begin, invokes an asynchronous delegate that executes the build,
            and notifies build requests of build completion.
            </summary>
            <param name="buildRequests">The build requests.</param>
            <param name="buildExecutionAsync">
            The async build execution delegate.  This <i>may</i> not be invoked
            if notifying build requests of the start of the build throws an exception.
            </param>
            <returns>A task whose completion signals that work is complete.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities">
            <summary>
            Provides helper methods for building projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.DesignTimeBuildProperty">
            <summary>
            The name of the MSBuild property to set to "true" via a global property
            to indicate a design-time build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.ContinueOnErrorProperty">
            <summary>
            The name of the MSBuild property that controls how certain MSBuild task invocations
            respond to errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.ResolveAssemblyReferencesSilentProperty">
            <summary>
            The name of the MSBuild property that gets ResolveAssemblyReference to emit warnings for missing references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.DesignTimeSilentResolutionProperty">
            <summary>
            The name of the "DesignTimeSilentResolution" MSBuild property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.BuildingInsideVisualStudioProperty">
            <summary>
            The name of the MSBuild property that indicates Visual Studio is requesting this build
            (whether design-time or full solution build).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.DefineExplicitDefaultsProperty">
            <summary>
            The name of the "DefineExplicitDefaults" MSBuild property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.TrueValue">
            <summary>
            The string "true".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.FalseValue">
            <summary>
            The string "false".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.BuildAsync(Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject,System.String)">
            <summary>
            Builds a specified MSBuild target for this project with design-time build semantics.
            </summary>
            <param name="buildProject">The project build service.</param>
            <param name="target">The target to build.</param>
            <returns>A task that evaluates to the result of the build.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.BuildAsync(Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject,Microsoft.VisualStudio.ProjectSystem.Build.BuildAction)">
            <summary>
            Builds a specified action for this project with design-time build semantics.
            </summary>
            <param name="buildProject">The project build service.</param>
            <param name="buildAction">The build action to perform.</param>
            <returns>A task that evaluates to the result of the build.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.RespondToCancellationRequests(System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest,System.Threading.Tasks.TaskCompletionSource{Microsoft.Build.Execution.BuildResult}}})">
            <summary>
            Searches a sequence of build requests for any canceled requests, marks their tasks as canceled and includes them in the returned sequence.
            </summary>
            <param name="buildQueue">The sequence of build requests to scan for cancellations.</param>
            <returns>The cancelled build requests.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.RespondToCancellationRequests(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest,System.Threading.Tasks.TaskCompletionSource{Microsoft.Build.Execution.BuildResult}}})">
            <summary>
            Searches a sequence of build requests for any canceled requests, marks their tasks as canceled and includes them in the returned sequence.
            </summary>
            <param name="buildQueue">The sequence of build requests to scan for cancellations.</param>
            <returns>The cancelled build requests.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.RegisterForAggregateBuildRequestCancellation(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest},Microsoft.Build.Execution.BuildManager)">
            <summary>
            Registers for automatic cancellation of the build if <em>all</em> build requests are canceled.
            </summary>
            <param name="buildRequests">The complete set of build requests submitted for this build.</param>
            <param name="buildManager">The build manager to which these requests were submitted.</param>
            <returns>A value that must be disposed of before calling <see cref="M:Microsoft.Build.Execution.BuildManager.EndBuild"/></returns>
            <remarks>
            This method should be called *after* submitting all build requests to MSBuild.
            This method's result must be disposed of *before* calling <see cref="M:Microsoft.Build.Execution.BuildManager.EndBuild"/>
            to protect against race conditions and possibly cancelling the wrong build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.AppendUnregisterLoggersTask(System.Threading.Tasks.Task{Microsoft.Build.Execution.BuildResult},Microsoft.VisualStudio.ProjectSystem.IVsShellServices,System.Int32)">
            <summary>
            Schedules a task that will unregister loggers from the mux logger at the conclusion of a build request's execution.
            </summary>
            <returns>A task that is completed when unregistration is complete and returns the build result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.AppendUnregisterLoggersTask(System.Threading.Tasks.Task{Microsoft.Build.Execution.BuildResult},Microsoft.Build.Utilities.MuxLogger,System.Int32)">
            <summary>
            Schedules a task that will unregister loggers from the mux logger at the conclusion of a build request's execution.
            </summary>
            <returns>A task that is completed when unregistration is complete and returns the build result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.AppendFlushLoggersTask(System.Threading.Tasks.Task{Microsoft.Build.Execution.BuildResult},Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest)">
            <summary>
            Schedules a task that flushes all flushable build loggers at the conclusion of a build request's execution.
            </summary>
            <returns>A task that is completed when flushing is complete and returns the build result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.GetBatchBuildCancellationToken(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Consolidates a batch build request's set of cancellation tokens to just one,
            either the one that is shared among all individual build requests or
            <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.ExtractProjectFile(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Extracts the project file name required by the VS Error List from an MSBuild build event.
            </summary>
            <param name="eventArgs">The build event. May be null.</param>
            <returns>The extracted details, or <c>null</c> if <paramref name="eventArgs"/> was <c>null</c> or of an unrecognized type.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.NoOpDispose">
            <summary>
             Does nothing at all.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.NoOpDispose.StaticInstance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.NoOpDispose.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.NoOpDispose"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.NoOpDispose.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildUtilities.NoOpDispose.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.GlobalPropertiesHelper">
            <summary>
            Helper class used for common operations on global properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.GlobalPropertiesHelper.GlobalProjectCollectionPropertiesToCopy">
            <summary>
            The names of properties to copy down from the GlobalProjectCollection.GlobalProperties
            for builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.GlobalPropertiesHelper.ConstructGlobalProperties(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Constructs a map of global properties this provider would include in a build.
            </summary>
            <param name="globalPropertiesFromGlobalProjectCollection">The dictionary of global properties from the GlobalProjectCollection.</param>
            <param name="isSolutionBuildManagerPresent">The flag telling whether solution build manager is present.</param>
            <returns>A non-null map of properties.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProviderAsync">
            <summary>
            Describes a project extension that may attach loggers to arbitrary builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProviderAsync.GetLoggersAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Gets a set of loggers to attach to a given build.
            </summary>
            <param name="targets">The list of targets being executed.</param>
            <param name="properties">The set of virtual properties set on this build.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The set of loggers to attach.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.OutputGroupsTools">
            <summary>
            A collection of extension methods for easy querying of output groups.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.OutputGroupsTools.GetKeyOutputAsync(Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService,System.Threading.CancellationToken)">
            <summary>
            Gets the full path to the primary executable or library.
            </summary>
            <returns>Gets the path to the project's primary output, or null if it could not be determined.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.OutputGroupsTools.OutputGroups">
            <summary>
            A set of well-known output group names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.OutputGroupsTools.OutputGroups.BuiltProject">
            <summary>
            MSBuild .targets file string for BuiltProjectOutputGroup.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.OutputGroupsTools.MetadataNames">
            <summary>
            A set of well-known output group item metadata names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.OutputGroupsTools.MetadataNames.IsKeyOutput">
            <summary>
            MSBuild .targets file string for IsKeyOutput.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.OutputGroupsTools.MetadataNames.FinalOutputPath">
            <summary>
            MSBuild .targets file string for FinalOutputPath.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.ExportBuildGlobalPropertiesProviderAttribute">
            <summary>
            Exports a class that implements the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectGlobalPropertiesProvider"/> interface such that
            it can provide global properties to include in an asynchronous (non design-time) project build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ExportBuildGlobalPropertiesProviderAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.ExportBuildGlobalPropertiesProviderAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.StandardBuildDataflowLinkOptions">
            <summary>
            Describes targets to subscribe to when linking to a SourceBlock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.StandardBuildDataflowLinkOptions.targets">
            <summary>
            The targets that are included in the design time build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.StandardBuildDataflowLinkOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.StandardBuildDataflowLinkOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.StandardBuildDataflowLinkOptions.Targets">
            <summary>
            Gets or sets the set of targets that should be included in the design-time build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.StandardBuildDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase">
            <summary>
            A base class for global property providers that produce a map of properties that never changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.targetBlock">
            <summary>
            The block to post to for broadcasts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.publicBlock">
            <summary>
            The backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.SourceBlock"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase"/> class.
            </summary>
            <param name="commonServices">The CPS common services.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.SourceBlock">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.GetGlobalPropertiesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.StaticGlobalPropertiesProviderBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction">
            <summary>
            Well-known build operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Build">
            <summary>
            Incremental build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Rebuild">
            <summary>
            A full (non-incremental) build.  Generally performed by Clean followed by a Build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Clean">
            <summary>
            Removes all intermediate and final items generated by previous builds.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Compile">
            <summary>
            Selective file build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Link">
            <summary>
            Link-Only
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Deploy">
            <summary>
            Deploy project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildAction.Package">
            <summary>
            Generate the package.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost">
            <summary>
            An interface optionally implemented by <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when they schedule their builds via the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost.BuildBatch(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Schedules a build that will include exactly a given set of build requests.
            </summary>
            <param name="buildRequests">A set of build requests that have been bundled together by a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService"/>.</param>
            <returns>A map of the build requests and their results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost.OnCancelledBuildRequests(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Notify the host that build requests were cancelled while waiting in the queue.
            This allows the host to do some cleanup if it did some prepare works before putting the request to the queue.
            </summary>
            <param name="buildRequests">A collection of build requests that have been cancelled.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProvider">
            <summary>
            Describes a project extension that may attach loggers to arbitrary builds.
            </summary>
            <devremarks>
            TODO: In Dev15 remove this interface in favor of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProviderAsync"/> interface
            (and probably rename the other one to trim off the "Async" distinguishing suffix).
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildLoggerProvider.GetLoggers(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Gets a set of loggers to attach to a given build.
            </summary>
            <param name="targets">The list of targets being executed.</param>
            <param name="properties">The set of virtual properties set on this build.</param>
            <returns>The set of loggers to attach.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost">
            <summary>
            An interface that should be exported at the CPS ProjectService scope to provide centralized build services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost.IsCancelable">
            <summary>
            Gets a value indicating whether build requests submitted with this build manager can be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost.IsApplicableAsync">
            <summary>
            Gets a value indicating whether this build host can start a build in this environment at this time.
            </summary>
            <remarks>
            A build host that works within the coordination of the Solution Build Manager only returns <c>true</c>,
            for example, when the Solution Build Manager is currently running a build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost.Build(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Acquires an MSBuild <see cref="T:Microsoft.Build.Execution.BuildManager"/> and submits the specified build requests for building.
            </summary>
            <param name="buildRequests">The build requests to submit and the loggers that should be attached to each one.</param>
            <returns>A map of the build requests and their results.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService">
            <summary>
            A service that intelligently schedules build requests, re-ordering and batching them for improved throughput or UI-responsiveness.
            </summary>
            <remarks>
            The default implementation of this service can reorder and batch build requests in order to prioritize builds and improve throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService.Enqueue(Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest})">
            <summary>
            Enqueues a set of build requests for scheduling.
            </summary>
            <param name="buildManagerHost">The build manager host that should ultimately receive the batched build that is assembled from these requests.</param>
            <param name="buildRequests">The set of build requests.</param>
            <returns>A map of build requests and tasks that return their build results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService.IsCompatibleProjectInstance(Microsoft.Build.Execution.ProjectInstance,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Execution.ProjectInstance})">
            <summary>
            Checks whether a given ProjectInstance would be compatible with a set of other project instances that have already been accepted as part of a build.
            </summary>
            <param name="candidateInstance">The project instance being considered to add to the build.</param>
            <param name="compatibleProjectInstances">The project instances that are already part of a build.</param>
            <returns><c>true</c> if the candidate project instance can be added to the build without introducing a versioning problem in the build system; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHostBatchingService.Abort(Microsoft.VisualStudio.ProjectSystem.Build.IBatchingBuildManagerHost,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest,System.Exception})">
            <summary>
            Aborts a set of build requests, which cannot be serviced correctly. Build requests causing deadlocks have to be aborted.
            </summary>
            <param name="buildManagerHost">The build manager host that originally expected to execute the build requests to be aborted..</param>
            <param name="abortedReasons">
            The set of build requests for a specified build manager to be aborted, and also include failed reasons for those requests.
            </param>
            <remarks>Only requests which are in the pending state can be aborted. Aborting a request which is in the build will be ignored.</remarks>
            <returns>A collection of build requests which are aborted.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal">
            <summary>
            Additional build methods that are only appropriate to be invoked within CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal.BuildWithSolutionAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Build.BuildAction},System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on this project, even if this configuration does not belong to the active solution configuration.
            </summary>
            <param name="actions">The actions to build.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal.BuildWithSolutionAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on this project, even if this configuration does not belong to the active solution configuration.
            </summary>
            <param name="targets">The targets to build.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProjectInternal.IsUpToDateCheckEnabledAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether an up-to-date check is enabled for a given build action,
            filtering the set of up-to-date checkers based upon <paramref name="beforeDrainCriticalTasks"/>
            </summary>
            <param name="buildAction">The build action being performed</param>
            <param name="beforeDrainCriticalTasks">Filters the set of up-to-date checkers based upon their metadata</param>
            <param name="cancellationToken">The cancelation token</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority">
            <summary>
            Expresses the desired handling and positioning of a build request by describing its priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority.High">
            <summary>
            The UI is completely blocked until this build completes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority.Medium">
            <summary>
            The UI isn't blocked, but the user may be waiting for an asynchronous update to the UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority.Low">
            <summary>
            The user may not notice when this build completes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest">
            <summary>
            An interface that fully describes a build request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.BuildRequestData">
            <summary>
            Gets the MSBuild build request itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.CancellationToken">
            <summary>
            Gets the cancellation token that signals that the client requesting this build is no longer interested in its results.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.Loggers">
            <summary>
            Gets the set of loggers to attach to this build request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.Priority">
            <summary>
            Gets the priority with which to treat this build request.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.IsMainThreadRequired">
            <summary>
            Gets a value indicating whether this build may require the main thread to execute.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.IsMainThreadBlocked">
            <summary>
            Gets a value indicating whether the main thread is blocked for the completion of this build request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.OnBeginBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when the build is actually beginning
            to give the owner of the build request an opportunity to perform any steps required to
            execute immediately before the request is submitted to MSBuild.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates that the build request has been canceled.
            This token may not be the same as the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.CancellationToken"/> property on this
            instance because other cancellation criteria may be linked with it.
            </param>
            <returns>A task whose completion allows the build to proceed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.OnEndBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when MSBuild has finished executing this request
            to give the owner of the build request an opportunity to perform any steps required to
            execute immediately after the request is finished within MSBuild.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates that the build request has been canceled.
            This token may not be the same as the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildRequest.CancellationToken"/> property on this
            instance because other cancellation criteria may be linked with it.
            </param>
            <returns>A task whose completion allows subsequent builds to proceed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus">
            <summary>
            Describes build modes for a specific project configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.Idle">
            <summary>
            The absence of all flags, indicating that a build can be started.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.Busy">
            <summary>
            Indicates this project configuration is currently building (or at least is in a build queue).
            </summary>
            <remarks>
            When this flag is present, a build request may still be successfully queued.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.SecurityDisabled">
            <summary>
            Indicates that this project cannot be built due to a failed security check.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.ConfigurationDisabled">
            <summary>
            Indicates that this project configuration is not a member of the active solution configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus.DisabledMask">
            <summary>
            A mask of all bits that indicate that a build may not be started.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport">
            <summary>
            A service that assists in a general build client to query a particular project's capability to build various ways.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.Status">
            <summary>
            Gets the status of build support in this project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.GetTargetForBuildAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction)">
            <summary>
            Gets the name of the target that implements a specified build action.
            </summary>
            <param name="buildAction">The build action being queried.</param>
            <returns>The name of an MSBuild target, or <c>null</c> if the specified build action is not supported.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.IsBuildActionSupportedAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Threading.CancellationToken)">
            <summary>
            Verifies that the build action is supported for current configuration settings.
            </summary>
            <param name="buildAction">The build action to perform.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if the build action is supported</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildSupport.IsBuildTargetSupportedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Verifies that the build action target exists for current configuration settings.
            </summary>
            <param name="target">The build target to perform.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if the build target is supported</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildUpToDateCheckProvider">
            <summary>
            An interface that may be exported at the ConfiguredProject scope to provide a hint
            as to whether the project's outputs are up to date with respect to its inputs.
            </summary>
            <remarks>
            MEF optional metadata:
                    BeforeDrainCriticalTasks (bool) - Indicates if this provider is to be ran
                    before (true) or after (false, default) draining of critical tasks.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildUpToDateCheckProvider.IsUpToDateCheckEnabledAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether the up-to-date check is available at the moment.
            </summary>
            <param name="cancellationToken">A token that is cancelled if the caller loses interest in the result.</param>
            <returns>A task whose result is <c>true</c> if the up-to-date check is enabled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildUpToDateCheckProvider.IsUpToDateAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Check if project outputs are up-to-date (i.e there is no need to build)
            </summary>
            <param name="buildAction">The build action to perform.</param>
            <param name="logger">A logger that may be used to write out status or information messages regarding the up-to-date check.</param>
            <param name="cancellationToken">A token that is cancelled if the caller loses interest in the result.</param>
            <returns>A task whose result is true if project is up-to-date</returns>
            <remarks>
            The cache must be of fullpath to recent timestamp mapping with case insensitive comparisons of the path. The
            timestamps are DateTimes, expected to be in UTC format.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider">
            <summary>
            An interface that extensions can export to provide an implementation
            for the deploy phase of build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.IsDeploySupported">
            <summary>
            Gets a value indicating whether or not deploy is currently supported.
            </summary>
            <devremarks>
            TODO: make this property an async method: GetIsDeploySupportedAsync()
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.Commit">
            <summary>
            Alerts a project that a deployment operation was successful. Called immediately after the project finishes deployment regardless of the result of other projects in the solution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.DeployAsync(System.Threading.CancellationToken,System.IO.TextWriter)">
            <summary>
            Signals to start the deploy operation.
            </summary>
            <param name="cancellationToken">A cancellation token that will be set if the deploy is cancelled by the user.
            This cancellation token should be passed in as the CancellationToken parameter to the task that is returned.</param>
            <param name="outputPaneWriter">A TextWriter that will write to the deployment output pane.</param>
            <returns>A task that performs the deploy operation.</returns>
            <devremarks>
            TODO: Reorder parameters so cancellationToken is last.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IDeployProvider.Rollback">
            <summary>
            Alerts a deployment project that a deployment operation has failed. Called immediately after the project fails deployment regardless of the result of other projects in the solution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider">
            <summary>
            An interface that MEF extensions can export to provide an implementation for publishing the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider.IsPublishSupportedAsync">
            <summary>
            Gets a value indicating whether or not publish is currently supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider.PublishAsync(System.Threading.CancellationToken,System.IO.TextWriter)">
            <summary>
            Signals to start the publishing operation.
            </summary>
            <param name="cancellationToken">A cancellation token that will be set if the publish is cancelled by the user.</param>
            <param name="outputPaneWriter">A TextWriter that will write to the publishing output pane.</param>
            <returns>A task that performs the publishing operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IPublishProvider.ShowPublishPromptAsync">
            <summary>
            Displays a prompt that asks the user whether or not a publishing operation should continue.
            </summary>
            <returns>true if the publish should continue.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IFileTimestampCache">
            <summary>
            Provides a system-wide cache of file timestamps to optimize up-to-date checks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IFileTimestampCache.IsCacheApplicable">
            <summary>
            Gets a value indicating whether the cache is currently active given the state of the process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IFileTimestampCache.TimestampCache">
            <summary>
            Gets the cache of file absolute paths and modification timestamps.
            </summary>
            <remarks>
            Implementations of this interface should provide a thread-safe dictionary, perhaps ConcurrentDictionary&lt;string, DateTime&gt;.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject">
            <summary>
            Wraps an MSBuild host object with metadata and build coordination events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.TargetName">
            <summary>
            Gets the MSBuild target that the host object is to apply to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.TaskName">
            <summary>
            Gets the MSBuild task that the host object is to apply to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.TaskHostObject">
            <summary>
            Gets the MSBuild host object itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.IsMainThreadRequired">
            <summary>
            Gets a value indicating whether the host object might ever require the main thread during the build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.OnBeginBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when the build is actually beginning.
            </summary>
            <param name="cancellationToken">A token whose cancellation indicates that the build request has been canceled.</param>
            <returns>A task whose completion allows the build to proceed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IHostObject.OnEndBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost"/> when MSBuild has finished executing this request.
            </summary>
            <param name="cancellationToken">A token whose cancellation indicates that the build request has been canceled.</param>
            <returns>A task whose completion allows subsequent builds to proceed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IHostObjectProvider">
            <summary>
            Provides host objects to MSBuild tasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IHostObjectProvider.CreateHostObjectsAsync">
            <summary>
            Creates and initializes host objects to supply to the build.
            </summary>
            <remarks>A task whose result is the set of initialized host objects.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupProvider">
            <summary>
            Adds output groups to the set of known output groups for a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupProvider.OutputGroups">
            <summary>
            Gets a set of output group metadata, which will form the basis of a full output group aggregated by the output group service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.BuildDataflowLinkOptions">
            <summary>
            Additional options that may be specified when linking to the results of a design-time build block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.BuildDataflowLinkOptions.Targets">
            <summary>
            Gets or sets the set of targets that should be included in the design-time build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.BuildDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot">
            <summary>
            Describes immutable project state after a design-time build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot.TargetOutputs">
            <summary>
            Gets a map of targets to their target outputs seen as items with metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot.TargetSuccess">
            <summary>
            Gets a map of targets and whether they built successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot.Targets">
            <summary>
            Gets the targets that were explicitly executed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot.BaseSnapshot">
            <summary>
            Gets the pre-Build ProjectInstance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot.BuiltProjectInstance">
            <summary>
            Gets the post-Build ProjectInstance, if available
            </summary>
            <remarks>
            This value will be null unless some linked receiver specifically requested the
            post-build ProjectInstance to be included, to avoid the unnecessary cost of serialization.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshotService">
            <summary>
            Provides access to an immutable snapshot of post-design-time build results
            without requiring a project lock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectGlobalPropertiesProvider">
            <summary>
            A MEF exportable interface whereby components may add global properties to
            the MSBuild evaluation of one or all projects.
            </summary>
            <remarks>
            When exported via the default contract name, a MEF part must belong to the UnconfiguredProject scope.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IProjectGlobalPropertiesProvider.GetGlobalPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the set of global properties that should apply to the project(s) in this scope.
            </summary>
            <value>
            A map whose keys are case insensitive. Never null, but may be empty.
            The values should be escaped by the <see cref="M:Microsoft.Build.Evaluation.ProjectCollection.Escape(System.String)"/> method when it is necessary.
            </value>
            <remarks>
            This member is retained for backward compatibility with VC++ that does not opt into the CPS subscription services in general.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult">
            <summary>
            Describes the result of a build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.MSBuildResult">
            <summary>
            Gets the <see cref="T:Microsoft.Build.Execution.BuildResult" /> instance provided by MSBuild.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.OverallResult">
            <summary>
            Gets the overall build result (pass/fail).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.Warnings">
            <summary>
            Gets the number of warnings that were generated by the build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildResult.Errors">
            <summary>
            Gets the number of errors that were generated by the build.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.ICommandLinePreviewProvider">
            <summary>
            An interface that a component designed to assist in command line preview generation can implement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.ICommandLinePreviewProvider.GetAdditionalCommandLineValuesAsync(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties)">
            <summary>
            Gets the additional values to include in the command line preview that are additional to
            what some property in the XAML file actually provides by itself.
            </summary>
            <param name="parameter">The name of the parameter whose values are required.</param>
            <param name="contextProperties">Access to project properties.</param>
            <returns>
            An enumeration of additional values to tack on for the parameter's arguments.
            Null must never be returned, but an empty enumeration may be.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IFlushableLogger">
            <summary>
            An MSBuild logger that privately queues message that come from MSBuild
            and may need to flush messages before a build is considered completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IFlushableLogger.FlushAsync">
            <summary>
            Flushes all queued messages to their final destinations and closes the logger to additional messages.
            </summary>
            <returns>
            A task that is complete when all messages have been flushed.
            </returns>
            <remarks>
            Implementations should be prepared to be called from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject">
            <summary>
            Provides MSBuild project building services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.DesignTimeBuildPropertiesSource">
            <summary>
            Gets the source of a block that broadcasts the properties to define to match the semantic of design-time builds.
            </summary>
            <devremarks>
            Dev15 TODO: Consider moving this to ProjectSubscriptionService.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.GetFullBuildPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the properties to define to match the semantic of full builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.GetDesignTimeBuildPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the properties to define to match the semantic of design-time builds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,Microsoft.Build.Execution.ProjectInstance,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of targets on a given ProjectInstance.
            </summary>
            <param name="targets">The targets to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="projectInstance">The project instance that should be built.  Cannot be null.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This overload includes unsaved project file changes made to projects referenced from this one.
            Project state is synchronously acquired to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Build.BuildAction},System.Threading.CancellationToken,Microsoft.Build.Execution.ProjectInstance,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on a given ProjectInstance.
            </summary>
            <param name="actions">The actions to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="projectInstance">The project instance that should be built.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This overload includes unsaved project file changes made to projects referenced from this one.
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Boolean,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of targets on this project.
            </summary>
            <param name="targets">The targets to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="includeUnsavedChanges">A value indicating whether unsaved changes to this and any referenced projects should be considered during the build. This does not relate to unsaved changes in source files.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.BuildAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.Build.BuildAction},System.Threading.CancellationToken,System.Boolean,System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.Build.IHostObject},Microsoft.VisualStudio.ProjectSystem.Build.BuildRequestPriority,System.Collections.Immutable.IImmutableSet{Microsoft.Build.Framework.ILogger},Microsoft.VisualStudio.ProjectSystem.Build.IBuildManagerHost)">
            <summary>
            Asynchronously builds a given set of actions on this project.
            </summary>
            <param name="actions">The actions to build.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the build.  Ignored when running in VS because solution builds can only be canceled via the Solution Build Manager.</param>
            <param name="includeUnsavedChanges">A value indicating whether unsaved changes to this and any referenced projects should be considered during the build.</param>
            <param name="properties">Virtual properties to set on the build.  These properties are not MSBuild "global properties" but are properties set on the ProjectInstance after evaluation using the initial set of project properties used for this ConfiguredProject.</param>
            <param name="hostObjects">The set of host objects to apply to the build.</param>
            <param name="priority">The priority this build request should be handled with.</param>
            <param name="loggers">The loggers to attach to this specific build.  Other loggers from the project system may also be attached in addition to the ones provided here.</param>
            <param name="preferredBuildManagerHost">The build manager that should be used to coordinate the build.</param>
            <returns>A task that returns the build results.</returns>
            <remarks>
            This method synchronously acquires project state to prepare a build request, and then returns a task that tracks the remaining work of the build.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.IsUpToDateCheckEnabledAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether an up-to-date check is enabled for a given build action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.IsUpToDateAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether a given build action is considered up-to-date.
            </summary>
            <param name="buildAction">The build action to query up-to-date status.</param>
            <param name="logger">A logger that may be used to write out status or information messages regarding the up-to-date check.
            May be null.</param>
            <param name="cancellationToken">A token whose cancellation indicates lost interest in the result of the async operation.</param>
            <returns>A task whose result is <c>true</c> if the given build action is up-to-date.  False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildProject.IsUpToDateAsync(Microsoft.VisualStudio.ProjectSystem.Build.BuildAction,System.Boolean,System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs a partial build up-to-date check based on the filter
            of <paramref name="beforeDrainCriticalTasks"/>
            </summary>
            <param name="buildAction">The build action to query up-to-date status.</param>
            <param name="beforeDrainCriticalTasks">Filters the set of up-to-date providers that are called based upon
            their BeforeDrainCriticalTasks metadata</param>
            <param name="logger">A logger that may be used to write out status or information messages regarding the up-to-date check.
            May be null.</param>
            <param name="cancellationToken">A token whose cancellation indicates lost interest in the result of the async operation.</param>
            <returns>A task whose result is <c>true</c> if the given build action is up-to-date.  False otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles">
            <summary>
            Special feature to build just some files in a project for supporting project types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles.PrepareBuildFilesAsync(System.Collections.Immutable.IImmutableSet{System.String},System.Boolean)">
            <summary>
            Obtains the targets to build and global properties to set for a specified subset of files in the project.
            </summary>
            <param name="files">The files in the project to build/compile.  Paths should be absolute or project-relative.</param>
            <param name="predeterminedTarget">A value indicating whether the target to build has already been determined.</param>
            <returns>An asynchronous result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles.CanBuildFileAsync(System.String)">
            <summary>
            Checks if the file has an associated target.
            </summary>
            <param name="file">The project-relative or absolute path to the file.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult">
            <summary>
            The composite result of the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Build.IBuildFiles.PrepareBuildFilesAsync(System.Collections.Immutable.IImmutableSet{System.String},System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult.BuildMayProceed">
            <summary>
            Gets or sets a value indicating whether the build can proceed.
            </summary>
            <value><c>true</c> if the build can proceed; <c>false</c> if predeterminedTarget is <c>false</c> and any of the requested files can't be found in the project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult.Properties">
            <summary>
            Gets or sets the properties to include in the build so that only selected files are compiled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.PrepareBuildFilesResult.Targets">
            <summary>
            Gets or sets the targets to build for this set of files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup">
            <summary>
            A set of outputs generated by a project that fit under some common category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.Name">
            <summary>
            The well-known name of this group to Visual Studio (non-localized).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.TargetName">
            <summary>
            Gets the target that is built to determine the contents of this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.Description">
            <summary>
            Gets a localized string describing the purpose of the contents of this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.DisplayName">
            <summary>
            Gets a localized string to identify this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.Outputs">
            <summary>
            Gets the outputs of some target as part of the build process.  Typically file paths with metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroup.IsSuccessful">
            <summary>
            Gets a value indicating whether the output group built successfully.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService">
            <summary>
            Provides access to project generated build outputs by categorical name.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService.OutputGroupNames">
            <summary>
            Gets a set of names of the available output groups for this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService.GetOutputGroupsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all the (non-dependency) output groups in the project that build successfully.
            </summary>
            <param name="cancellationToken">A token to cancel the output group build.</param>
            <returns>A task whose result is the set of output groups in this project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IOutputGroupsService.GetOutputGroupAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single output group with the given name.
            </summary>
            <param name="name">The name of the output group to retrieve.  Examples include "Built", "ContentFiles", or "Symbols".</param>
            <param name="cancellationToken">A token to cancel the output group build.</param>
            <returns>A task whose result is the requested output group.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the requested output group isn't defined in the project.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor">
             <summary>
             This component provides a mechanism to intercept and optionally take over
             processing of build error messages by the default <see cref="T:Microsoft.Build.Framework.ILogger"/> implementation.
             This is called by the latter component.
            
             This type is obsoleted, please use IVsLoggerEventProcessor instead.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Build.IVsLoggerEventProcessor.HandleEvent(Microsoft.Build.Framework.BuildEventArgs,System.String)">
            <summary>
            Called by the default implementation of <see cref="T:Microsoft.Build.Framework.ILogger"/> before processing any
            build error message. The default implementation does not further process the message itself if
            "true" is returned from this method.
            </summary>
            <param name="buildEventArgs"> Event args of the build event raised by MSBuild. </param>
            <param name="message"> The error message to process.</param>
            <returns> "true" if the error message has been fully processed and does not need to be processed further by
            the default <see cref="T:Microsoft.Build.Framework.ILogger"/> implementation. </returns>
            <remarks>
            This method is called on the UI thread.
            </remarks>
            <devremarks>
            Dev15: We should raise this event from a background thread and make it async.
            </devremarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IFileActionHandler">
            <summary>
            An interface that may be MEF exported by components that want to execute code
            whenever a project or its items are saved.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFileActionHandler.TryHandleFileSavedAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String,System.Boolean)">
            <summary>
            Invoked after a file is successfully saved.
            <paramref name="newFilePath"/> will be non-null when the file is saved as a new file.
            </summary>
            <param name="tree">The tree representing the file that was saved.</param>
            <param name="newFilePath">The new path the file is being saved as. May be <c>null</c>.</param>
            <param name="saveAs">True if this the file is being saved-as a new file, false otherwise.</param>
            <returns>True to stop processing additional listeners for this file, false to continue.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DualOrderPrecedenceImporter`1">
            <summary>
            A helper class to import extension components from both dataflow and a simple contract.
            All components from both contracts will be merged into a same list based on the prioriorty order.
            </summary>
            <typeparam name="TValue">The value type produced by <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1"/></typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DualOrderPrecedenceImporter`2">
            <summary>
            A helper class to import extension components from both dataflow and a simple contract.
            All components from both contracts will be merged into a same list based on the prioriorty order.
            </summary>
            <typeparam name="T">The MEF contract type that implements <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1"/></typeparam>
            <typeparam name="TValue">The value type produced by <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1"/></typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DualOrderPrecedenceImporter`2.Merge(System.Collections.Generic.IReadOnlyCollection{System.Lazy{`1,Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView}},System.Collections.Generic.IReadOnlyCollection{System.Tuple{`1,Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView}})">
            <summary>
            Merge components from two list into one, based on the priority order.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DualOrderPrecedenceImporter`2.CompareOrder(System.Int32,System.Int32)">
            <summary>
            Compare order of two items, when the result is smaller than 0, item1 should be placed before item2.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`1">
            <summary>
            A helper dataflow block to gather extension components from dataflow imports.
            The data source importors can be filtered by project capabilities.
            </summary>
            <typeparam name="TValue">The value type produced by <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1"/></typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`1.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{`0},Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`1"/> class.
            </summary>
            <param name="unconfiguredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{`0},Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`1"/> class.
            </summary>
            <param name="configuredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`2">
            <summary>
            A helper dataflow block to gather extension components from dataflow imports.
            The data source importors can be filtered by project capabilities.
            </summary>
            <typeparam name="TValue">The value type produced by <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1"/></typeparam>
            <typeparam name="TMetadata">The MEF contract metadata type</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`2.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{`0},`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`2"/> class.
            </summary>
            <param name="unconfiguredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`2.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{`0},`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`2"/> class.
            </summary>
            <param name="configuredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`3">
            <summary>
            A helper dataflow block to gather extension components from dataflow imports.
            The data source importors can be filtered by project capabilities.
            </summary>
            <typeparam name="T">The MEF contract type that implements <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1"/></typeparam>
            <typeparam name="TValue">The value type produced by <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1"/></typeparam>
            <typeparam name="TMetadata">The MEF contract metadata type</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`3.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{`0,`2}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`3"/> class.
            </summary>
            <param name="unconfiguredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`3.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{`0,`2}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`3"/> class.
            </summary>
            <param name="configuredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`3.ContainingProject">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceDataSourceImporter`3.LinkExternalInput(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Collections.Generic.IReadOnlyCollection{System.Tuple{`1,`2}}}})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`1">
            <summary>
            This a helper class to import components based on project capabilities.
            The imported components filted by project capabilities are published through a dataflow, a new version of data
            will be published, when the project capabilities are changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`1.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{`0,Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`1"/> class.
            </summary>
            <param name="unconfiguredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{`0,Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`1"/> class.
            </summary>
            <param name="configuredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2">
            <summary>
            This a helper class to import components based on project capabilities.
            The imported components filted by project capabilities are published through a dataflow, a new version of data
            will be published, when the project capabilities are changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{`0,`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2"/> class.
            </summary>
            <param name="unconfiguredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Collections.Generic.ICollection{System.Lazy{`0,`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2"/> class.
            </summary>
            <param name="configuredProject">The project.</param>
            <param name="getImports">A callback function to get all imports.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2.ContainingProject">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2.GetImports">
            <summary>
            Gets the imported components.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DynamicOrderPrecedenceImporter`2.LinkExternalInput(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Collections.Generic.IReadOnlyCollection{System.Lazy{`0,`1}}}})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService2">
            <summary>
            Provide extra information to manage incompatible capabilities changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService2.GetIncompatibleCapabilities(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope,Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Get extra information about what capabilities are incompatible.
            </summary>
            <param name="capabilitiesScope">The capabilities scope which publishes the new set of capabilities</param>
            <param name="newCapabilities">Capabilities to be published</param>
            <param name="incompatibleAddedCapabilities">The list to collected new capabilities which are not compatible with the current state of the project.</param>
            <param name="incompatibleRemovedCapabilities">The list of capabilities removed, and are dependent by the current state of the project</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IVersionedProjectCapabilitiesSnapshot">
            <summary>
            A project capabilties snapshot carries a version number.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVersionedProjectCapabilitiesSnapshot.Version">
            <summary>
            The version number increases for each published snapshot from the provider. If the snapshot is infered, it doesn't have a version number.
            This information is to help to reduce reevaluating, when nothing is changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectBuildTargetToCapabilityAttribute">
            <summary>
            Describe capabilites should be included, when a project references a specific target file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectBuildTargetToCapabilityAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectBuildTargetToCapabilityAttribute"/> class.
            </summary>
            <param name="targetFile">The msbuild target file which can be referenced by the project.  It is a partial file path must match the path of the import element inside the msbuild file</param>
            <param name="capability">The capability should be included, when the target is referenced by the project.</param>
            <param name="fileExtension">An optional parameter to match the file extension.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectBuildTargetToCapabilityAttribute.TargetFile">
            <summary>
            The msbuild target file which can be referenced by the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectBuildTargetToCapabilityAttribute.Capability">
            <summary>
            The capability should be included, when the target is referenced by the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectBuildTargetToCapabilityAttribute.Extension">
            <summary>
            The project file extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase">
            <summary>
            A default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope"/>
            that supports capabilities that change over time and inheritance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.identity">
            <summary>
            The identity of this capability scope
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.localCapabilitiesVersion">
            <summary>
            The version of the latest snapshot created or in the process of being created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.nextCapabilitiesVersion">
            <summary>
            The version of the next combined snapshot created or in the process of being created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.localCapabilitiesBroadcastBlock">
            <summary>
            The block we broadcast local capabilities to for inclusion in <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.aggregatingTransformBlock"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.aggregatingTransformBlock">
            <summary>
            The block that receives both inherited and local capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.publicBlock">
            <summary>
            A public front-end for a broadcasting repeater of <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.aggregatingTransformBlock"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.inheritedCapabilitiesSubscriptions">
            <summary>
            The disposable to cancel upstream joins and dataflow links.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.lastProducedLocalCapabilities">
            <summary>
            The last value passed into the <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.localCapabilitiesBroadcastBlock"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.configuredProjectLevel">
            <summary>
            <c>true</c> if this provider is defined at the ConfiguredProject scope.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.simpleAggregationScope">
            <summary>
            if this provider is a simple aggregation, it doesn't support additional data source version, and local capabilities.
            It is to reduce the performance overhead of this class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.initialCapabilities">
            <summary>
            Initial capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.initialInheritedProviders">
            <summary>
            Initial inherited providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.inheritedProvidersDataSourceVersion">
            <summary>
            The data source version related to change of the inherited providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.current">
            <summary>
            The current published capabilities snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices,System.Collections.Immutable.IImmutableSet{System.String},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase"/> class.
            </summary>
            <param name="commonServices">Common CPS services.</param>
            <param name="name">The name of the capability scope, for debugging.</param>
            <param name="initialCapabilities">The initial set of capabilities.</param>
            <param name="inheritedProviders">The check provider that we inherit.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry,System.Boolean,System.Boolean,System.Collections.Immutable.IImmutableSet{System.String},Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase"/> class.
            </summary>
            <param name="faultHandlerService">The project fault handler service.</param>
            <param name="projectThreadingService">The threading service.</param>
            <param name="dataSourceRegistry">
            The project data source registry for the applicable scope, if this instance should register itself.
            </param>
            <param name="configuredProjectLevel"><c>true</c> if this provider is defined at the ConfiguredProject scope.</param>
            <param name="name">The name of the capability scope, for debugging.</param>
            <param name="simpleAggregation">A simple aggregation scope does not allow local capabilities and additional version numbers.</param>
            <param name="initialCapabilities">The initial set of capabilities.</param>
            <param name="project">The project that owns this scope. May be null.</param>
            <param name="inheritedProviders">The check provider that we inherit.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.Identity">
            <summary>
            <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope.Identity"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.Current">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.Name">
            <summary>
            The name of the scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.InheritedProviders">
            <summary>
            Gets the set of inherited providers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.Project">
            <summary>
            The project owns this scope.  It can be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.UpdateCapabilities(System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Updates the capabilities snapshot defined locally at this provider.
            </summary>
            <param name="capabilities">The updated set of capabilities.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.UpdateInheritedProviders(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider},System.Nullable{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable}})">
            <summary>
            Updates the capability check providers that this instance inherits from.
            </summary>
            <param name="inheritedProviders">The new set of check providers to inherit from.</param>
            <param name="inheritedProvidersDataSourceVersion">The version related to the set of inheritedProviders.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.Dispose(System.Boolean)">
            <summary>
            Disposes managed resources associated with this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.UpdateCapabilities(System.Collections.Immutable.IImmutableSet{System.String},System.Boolean)">
            <summary>
            Updates the capabilities snapshot defined locally at this provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.UpdateInheritedProviders(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider},System.Nullable{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable}},System.Boolean)">
            <summary>
            Updates the capability check providers that this instance inherits from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.ProcessNewCapabilitiesAsync(System.Tuple{System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable}})">
            <summary>
            Process the new set of capabilities for the current scop, notifying autoload components and detecting whether the project needs to be reloaded.
            </summary>
            <param name="data">The new capabilities data to be processed.</param>
            <returns>The new set of apabilities to be published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesScopeBase.PrepareNewCapabilitiesSnapshotAsync(Microsoft.VisualStudio.ProjectSystem.ProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot})">
            <summary>
            Prepare to publish the next capabilities snapshot.
            </summary>
            <returns>False means that the snapshort is invalid in the current scope.  Publishing will be blocked.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot">
            <summary>
            A default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot.#ctor(System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot"/> class.
            </summary>
            <param name="initialCapabilities">The capabilities for this snapshot.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot.Capabilities">
            <summary>
            Gets the set of local capabilities behind this snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot.IsProjectCapabilityPresent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot.Update(System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot"/> to represent
            the specified capabilities snapshot.
            </summary>
            <param name="capabilities">The updated set of capabilities.</param>
            <returns>This instance, or a new one, as required.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesSnapshot.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProject`1">
            <summary>
            An export available to the UnconfiguredProject scope that provides access to a ConfiguredProject export.
            </summary>
            <typeparam name="T">The export from the active configured project scope to import into the UnconfiguredProject.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProject`1.Value">
            <summary>
            Gets the ConfiguredProject exported value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ChangeEventStage">
            <summary>
            Represents the stage of a configuration change event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ChangeEventStage.Before">
            <summary>
            Indicates that the current state is before the operation has ocurred.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ChangeEventStage.After">
            <summary>
            Indicates that the current state is after the operation has ocurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfigurationDimensionChange">
            <summary>
            Represents a configuration dimension value change.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfigurationDimensionChange.Add">
            <summary>
            Represents the addition of a configuration dimension value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfigurationDimensionChange.Delete">
            <summary>
            Represents the removal of a configuration dimension value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfigurationDimensionChange.Rename">
            <summary>
            Represents the rename of a configuration dimension value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectInternal">
            <summary>
            Additional internal interface of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectInternal.ConfiguredProjectIdentity">
            <summary>
            The identity of a configured project instance. It won't be changed in the life time of this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectInternal.ReportEvaluationVersion(System.IComparable,System.Int32)">
            <summary>
            Report project evaluation version matching the project version
            </summary>
            <param name="projectVersion">The configured project version number.</param>
            <param name="evaluationVersion">The project evaluation model version number.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectInternal.GetPrivateMSBuildProjectAsync">
            <summary>
            Provide an internal way to access project.
            It should only be used in special reloading logic for performance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IActiveProjectConfigurationRefreshService">
            <summary>
            An UnconfiguredProject-level service that allows refreshing the active project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IActiveProjectConfigurationRefreshService.RefreshActiveProjectConfigurationAsync">
            <summary>
            Refreshes the active project configuration, if it has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectReadyToBuild">
            <summary>
            A ConfiguredProject-scope provider to specify when we can build the configured project with the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshotService"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectReadyToBuild.IsValidToBuild">
            <summary>
            Value indicating if the configured project is valid for a build.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectReadyToBuild.WaitReadyToBuildAsync">
            <summary>
            This method is invoked by <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshotService"/> to wait for the configured project to be ready for build.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IGlobbingWatchingService">
            <summary>
            A service to allow to refresh the globbing based on the current status of the file system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IGlobbingWatchingService.RefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Begins an asynchronous refresh of globbing in the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationDimensionsProvider2">
            <summary>
            Dimension provider for project configurations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationDimensionsProvider2.OnDimensionValueChangedAsync(Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs)">
            <summary>
            Notifies of a dimension value change.
            </summary>
            <param name="args">Information about the configuration dimension value change.</param>
            <returns>A task for the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationDimensionsProvider">
            <summary>
            Dimension provider for project configurations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationDimensionsProvider.GetProjectConfigurationDimensionsAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Gets the project configuration dimensions for the given unconfigured project.
            </summary>
            <param name="project">Unconfigured project.</param>
            <returns>Collection of key/value pairs for the current values for the configuration dimensions of this provider for given project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationDimensionsProvider.GetDefaultValuesForDimensionsAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Gets the defaults values for project configuration dimensions for the given unconfigured project.
            </summary>
            <param name="project">Unconfigured project.</param>
            <returns>Collection of key/value pairs for the defaults values for the configuration dimensions of this provider for given project.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration">
            <summary>
            Core implementation of a project configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.name">
            <summary>
            See "Name" property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.dimensions">
            <summary>
            The names and values of configuration dimensions contained in this project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.#ctor(System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration"/> class.
            </summary>
            <param name="name"> The name of this project configuration. Cannot be null or empty. </param>
            <param name="dimensions"> The names and values of configuration dimensions contained in this project configuration. Cannot be null. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.Name">
            <summary>
            See ProjectConfiguration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.Dimensions">
            <summary>
            See ProjectConfiguration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.ToString">
            <summary>
            Returns the Name of this configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.Equals(Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration)">
            <summary>
            Compares project configurations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.Equals(System.Object)">
            <summary>
            See BaseStandardProjectConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.BaseStandardProjectConfiguration.GetHashCode">
            <summary>
            Returns hash code based on the various properties of the configuration
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.MinimalProjectConfiguration">
            <summary>
            Core implementation of IMinimalProjectConfiguration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MinimalProjectConfiguration.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.MinimalProjectConfiguration"/> class.
            </summary>
            <param name="name"> The name of this project configuration. Cannot be null or empty. </param>
            <param name="configuration">Configuration for this project configuration ("Debug", "Release", etc.). Cannot be null. </param>
            <param name="platform">Platform for this project configuration ("AnyCPU", "x86", "x64", etc.). Cannot be null. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.MinimalProjectConfiguration.Configuration">
            <summary>
            Configuration for this project configuration ("Debug", "Release", etc.). Cannot be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.MinimalProjectConfiguration.Platform">
            <summary>
            Platform for this project configuration ("AnyCPU", "x86", "x64", etc.). Cannot be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MinimalProjectConfiguration.Equals(Microsoft.VisualStudio.ProjectSystem.IMinimalProjectConfiguration)">
            <summary>
            Compares two MinimalProjectConfigurations for equality based on configuration dimensions. Name is not considered in the comparison.
            </summary>
            <param name="other">Object to compare against</param>
            <returns>True if the objects represent the same configuration, even if reference equality is not true.</returns>
            <remarks> We don't use name in the comparison since name will not end up being an MSBuild property/metadata. </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IMinimalProjectConfiguration">
            <summary>
            Represents a minimal project configuration with two core dimensions - "Configuration" and "Platform".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMinimalProjectConfiguration.Name">
            <summary>
            The name of this project configuration. Is never null or empty.
            </summary>
            <remarks>
            The name is a general handle for a project configuration for human consumption - there is no guarantee that
            two project configurations of the same name are identical.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMinimalProjectConfiguration.Platform">
            <summary>
            Gets the "Platform" for this project configuration.
            </summary>
            <remarks>
            Can never be null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMinimalProjectConfiguration.Configuration">
            <summary>
            Gets the "Configuration" for this project configuration.
            </summary>
            <remarks>
            Can never be null.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs">
            <summary>
            Describes a project configuration dimension before and after a change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfigurationDimensionChange,Microsoft.VisualStudio.ProjectSystem.ChangeEventStage,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs"/> class.
            </summary>
            <param name="project">Unconfigured project.</param>
            <param name="change">Type of change occurred.</param>
            <param name="stage">Indicates the stage of the event.</param>
            <param name="dimensionName">Name of the dimension that changed.</param>
            <param name="dimensionValue">Dimension value.</param>
            <param name="oldDimensionValue">Previous value of the dimension.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs.Project">
            <summary>
            Unconfigured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs.DimensionName">
            <summary>
            Gets the name of the dimension that changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs.DimensionValue">
            <summary>
            Gets the dimension value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs.OldDimensionValue">
            <summary>
            Gets the previous value of the dimension. Only used for changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs.Change">
            <summary>
            Indicates which type of change occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationDimensionValueChangedEventArgs.Stage">
            <summary>
            Indicates the stage of the event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.GlobInfo">
            <summary>
            Information about a glob inside msbuild.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.GlobInfo.ItemType">
            <summary>
            Gets the item type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.GlobInfo.MsBuildGlob">
            <summary>
            Gets the msbuild helper class to match globs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.GlobInfo.IncludeGlobs">
            <summary>
            Gets include path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectDataWithConfiguredProjectCapabilities">
            <summary>
            Represent project data carrying a consistent set of configured project capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectDataWithConfiguredProjectCapabilities.ProjectCapabilities">
            <summary>
            Gets the configured project capabilities which is consistent with the current dataflow data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshotInternal">
            <summary>
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshotInternal.ProjectFileExclusiveItemTypes">
            <summary>
            Gets the set of item types that are exclusive to the project file
            and not found in any imported file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshotInternal.Globs">
            <summary>
            Globs used inside the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshotWithCapabilities">
            <summary>
            Describes a snapshot of state of the project with consistent capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshotWithCapabilitiesService">
            <summary>
            Provides access to an immutable snapshot representing the current state of the project and a consistent set of capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1">
            <summary>
            The implementation of SyncLinkTo.  It align the data source version from multiple data sources, and publish consistant data to the target block.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.sourceBlocks">
            <summary>
            The source of data
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.target">
            <summary>
            The target block to receive the data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.targetDataConvertion">
            <summary>
            Function to convert the data to the format accepted by the target block
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.cancellationToken">
            <summary>
            CancellationToken to cancel the link.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.receiveLinks">
            <summary>
            Internal data link from the data source to our internal data receiver.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.receiveBuffer">
            <summary>
            A buffer to receive data from data sources, one for each source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.processingBuffer">
            <summary>
            A buffer for processing data.  The data will be copied from <see cref="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.receiveBuffer"/> here, so it can be processed outside of a lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.completion">
            <summary>
            The state whether any data source is completed,
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.propagateCompletion">
            <summary>
            Whether the link needs to propagate dataflow completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.cancelationTokenRegistration">
            <summary>
            Registration from the cancellationToken to unregister it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.disconnected">
            <summary>
            Whether the data link is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.isCompleted">
            <summary>
            Whether the dataflow is completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.cancellationTokenUnregistered">
            <summary>
            Whether we have already unregistered the cancellationToken.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.failedException">
            <summary>
            Exception when a source failed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.isProcessingData">
            <summary>
            Whether we are in the loop to process data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.receviedCount">
            <summary>
            The number of source block provides data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.receivedDataVersion">
            <summary>
            The version of received data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.processedDataVersion">
            <summary>
            The version of received data been processed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.lastSubmittedVersions">
            <summary>
            The version of last submitted data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.lastSubmittedValues">
            <summary>
            The last submitted value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.#ctor(System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions}},System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Func{Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions[],System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.Dispose">
            <summary>
            Dispose the link
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.EnsureToProcessData">
            <summary>
            Make sure that we will process the input data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.OfferMessage(System.Int32,Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions)">
            <summary>
            Process one piece of data from a single data source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.ProcessData(System.Boolean)">
            <summary>
            Process input data, and post data to the target when it is ready.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.CompleteTarget">
            <summary>
            Complete the target block, when a source block is completed, or the link is removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.CleanupLinks">
            <summary>
            Clean up links.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.OnSourceCompleted(System.Int32,System.Exception)">
            <summary>
            It is called when a data source block is completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.TryFindOlderVersion(Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions[],System.Int32@)">
            <summary>
            Searches for inconsistencies in versions of a shared data sources between multiple values.
            </summary>
            <param name="values">The values whose versions are to be checked for consistency.</param>
            <param name="minimumIndex">When the method returns <c>true</c>, this parameter receives the index to the older of two compared values.</param>
            <returns><c>true</c> if an inconsistency was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.EnumerateProjectConfigurationFirst(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Enumerates the elements in a map, such that if an element with key <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ActiveProjectConfiguration"/>
            is present, it will be guaranteed to enumerate first.
            </summary>
            <param name="map">The map to enumerate.</param>
            <returns>An partly ordered enumerable.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.VersionAndObservedIndex">
            <summary>
            A tuple that describes a data source version and the index into a value array where it was observed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.VersionAndObservedIndex.#ctor(System.IComparable,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.VersionAndObservedIndex"/> struct.
            </summary>
            <param name="version">The version of the data source.</param>
            <param name="firstObservedIndex">The index of the first block observed to have this version.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.VersionAndObservedIndex.Version">
            <summary>
            Gets the version of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.VersionAndObservedIndex.FirstObservedIndex">
            <summary>
            Gets the index of the first block observed to have this version.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1.ReceiveTarget">
            <summary>
            A helper class to receive data from input dataflow blocks, and pass to the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SyncLinkToLink`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2">
            <summary>
            Unwrap a dataflow of a collection of data source to a merged dataflow of the inner data source.
            </summary>
            <typeparam name="TInput">The type of the source dataflow.</typeparam>
            <typeparam name="TOutput">The type of the result dataflow.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2.getDataSources">
            <summary>
            The method to get the inner data source block
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2.includeSourceVersions">
            <summary>
            Whether the version number of the source dataflow should be automatically appended.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2.currentDataSources">
            <summary>
            The latest data received from the source block.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2.versionBox">
            <summary>
            A boxed source data version number.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices,System.Func{`0,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{`1}}},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2"/> class.
            </summary>
            <param name="commonServices">The CPS common services.</param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
            <param name="getDataSource">A function to unwrap the dataflow block from the source dataflow.</param>
            <param name="includeSourceVersions">Need include the version data of the source dataflow in the final result.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnwrapCollectionChainedProjectValueDataSource`2.CreateOrUpdateLink(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`0},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Collections.Generic.IReadOnlyCollection{`1}}},System.IDisposable)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2">
            <summary>
            Unwrap a dataflow of a data source to the dataflow of the inner data source.
            </summary>
            <typeparam name="TInput">The type of the source dataflow.</typeparam>
            <typeparam name="TOutput">The type of the result dataflow.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2.sequenceNumberId">
            <summary>
            A sequence number to ensure the order of output values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2.inputDataBlock">
            <summary>
            The internal data block to recieve the source dataflow.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2.currentSourceSequenceNumber">
            <summary>
            Current sequence number of the input data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2"/> class.
            </summary>
            <param name="commonServices">The CPS common services.</param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2.LinkExternalInput(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`1}})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSourceBase`2.CreateOrUpdateLink(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`0},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`1}},System.IDisposable)">
            <summary>
            Create a dataflow link from the source data to the target data block
            </summary>
            <param name="sourceData">Data from the source data flow block.</param>
            <param name="linkVersion">The version number of the link, which must be appended to the data.</param>
            <param name="targetBlock">Target data block of this data source.</param>
            <param name="currentLink">The current link to be updated. It can be null if no link exists now.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2">
            <summary>
            Unwrap a dataflow of a data source to the dataflow of the inner data source.
            </summary>
            <typeparam name="TInput">The type of the source dataflow.</typeparam>
            <typeparam name="TOutput">The type of the result dataflow.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2.getDataSource">
            <summary>
            The method to get the inner data source block
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2.includeSourceVersions">
            <summary>
            Whether the version number of the source dataflow should be automatically appended.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2.currentDataSource">
            <summary>
            The latest data received from the source block.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2.versionBox">
            <summary>
            A boxed source data version number.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices,System.Func{`0,Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{`1}},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2"/> class.
            </summary>
            <param name="commonServices">The CPS common services.</param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
            <param name="getDataSource">A function to unwrap the dataflow block from the source dataflow.</param>
            <param name="includeSourceVersions">Need include the version data of the source dataflow in the final result.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnwrapChainedProjectValueDataSource`2.CreateOrUpdateLink(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`0},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`1}},System.IDisposable)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectUserFaultHostHandler">
            <summary>
            A contract exported by CPS hosts that takes actions when the project system hits errors because errors in the user environment.
            This might be caused by some IO errors, or bad .props/.targets files on the user machine, which may cause the project system not to function correctly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectUserFaultHostHandler.HandleUserFaultAsync(System.Exception,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Invoked when interesting CPS failures occur that the user should be notified about.
            </summary>
            <param name="failure">The exception describing the failure.</param>
            <param name="severity">The severity of the failure.</param>
            <param name="project">The project related to the failure, if applicable.</param>
            <returns>A task that is completed when the fault has been fully reported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksServiceInternal">
            <summary>
            Internal contract for <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksServiceInternal.SignalUnloadPending">
            <summary>
            Signal all tasks that the project is closing and they should cancel early or not even run if they haven't started yet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.INewProjectAsyncInitializationProvider">
            <summary>
            An extensibility point components may export to execute when a new project is being created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.INewProjectAsyncInitializationProvider.InitializeNewProjectAsync">
            <summary>
            Invoked when a new project is being created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectDynamicLoadComponent">
            <summary>
            Components implmenting <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectDynamicLoadComponent"/> can be in either project or configured project scope, which will be loaded automatically,
            when its capabilities requirements are satisfied, and unloaded when they are not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectDynamicLoadComponent.LoadAsync">
            <summary>
            Function will be called when the capabilities condition of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectDynamicLoadComponent"/> is changed from unsatisfied to satisfied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectDynamicLoadComponent.UnloadAsync">
            <summary>
            Function will be called when the capabilities condition of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectDynamicLoadComponent"/> is changed from satisfied to unsatisfied.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementContext">
            <summary>
            A context to track capabilities requirements.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementContext.ScopeIdentity">
            <summary>
            The identity of the scope
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementContext.RegisterCapabilitiesRequirements(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <summary>
            Registers capabilities requirements to the context.
            </summary>
            <param name="requirements">New capabilities requirements.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementContext.RegisterCapabilitiesRequirement(System.String,System.Boolean)">
            <summary>
            Registers capabilities requirements to the context.
            </summary>
            <param name="capability">The capability we are adding</param>
            <param name="expectedPresence">Whether we expect it to be present or not.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService">
            <summary>
            A service to manage project capabilies required to make the project to work correctly under current state.
            If the project capabilies have been changed to violate those requirements, reloading the project is necessary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService.RegisterCapabilitiesRequirements(Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.Int64,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <summary>
            Registers capabilities required to keep the current project state to be valid.
            </summary>
            <param name="scopeIdentity">The identity of the capabilities scope.</param>
            <param name="version">The version of the capabilities published in the scope.</param>
            <param name="requirements">Capabilities required to maintain the current state of the project.</param>
            <returns>Return false means that reloading the project has been requested.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService.RegisterCapabilitiesRequirement(Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.Int64,System.String,System.Boolean)">
            <summary>
            Register an individular capability requirement necessary to keep the current project state valid.
            </summary>
            <param name="scopeIdentity">The identity of the capabilities scope.</param>
            <param name="version">The version of the capabilities published in the scope/</param>
            <param name="capability">The capability we are adding</param>
            <param name="expectedPresence">Whether we expect it to be present or not.</param>
            <returns>Return false means that reloading the project has been requested.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService.IsIncompatibleChangeAsync(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope,Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot})">
            <summary>
            Check whether the new capabilities pending to be published is incompatible with the current state.
            </summary>
            <param name="capabilitiesScope">The capabilities scope which publishes the new set of capabilities</param>
            <param name="newCapabilities">Capabilities to be published</param>
            <returns>True if the new capabilities are not compataible with the current state of the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService.RequestReloadForIncompatibleCapabilitiesAsync(System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Ask to reload the project because of an incompatible capabilities.
            </summary>
            <param name="capabilities">Capabilities causing the reloading. (Optional)</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectAdvanced">
            <summary>
            Exposes advanced events from UnconfiguredProject. These events are designed to be used by some special features to coordinate the sequence of
            editing the content of a project file.  Abusing the event will cause serious performance problems in project systems. Keep actions in the event
            to a minimum.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectAdvanced.ChangingProjectFile">
            <summary>
            Event to be fired when the project file is being changed inside a write lock.
            </summary>
            <para>
            Event handlers are invoked on threadpool threads, are invoked
            sequentially and complete before the write lock is released.
            Event handlers MUST NOT attempt to acquire any kind of project lock
            or the event handler's thread will deadlock.
            </para>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IDependentFilesProviderDataSource">
            <summary>
            An extension point to provide <see cref="T:Microsoft.VisualStudio.ProjectSystem.IDependentFilesProvider"/> which depends on some configurable data.
            For example, the dependency between files can be described in an external file, which can be changed in the life time
            of a project, in this case, the provider must be exported through this contract, the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IDependentFilesProvider"/>
            coming out of the dataflow must be immutable, and always returns the same result for the same input value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IDependentFilesService">
            <summary>
            Identifies dependent files in order to set the DependentUpon metadata (e.g. foo.xaml - foo.xaml.cs) within the specified scope.
            It gets called when adding new items to the project.
            </summary>
            <remarks>
            CPS provides a default implementation that uses metadata specified in the items schema as ContentType Metadata (see sample below). Use this interface to extend the existing behavior.
            &lt;ContentType
                Name="aaaSourceFile"
                DisplayName="aaa source file"
                ItemType="aaaCompile"&gt;
                &lt;ContentType.Metadata&gt;
                    &lt;NameValuePair Name = "DependentExtensions" Value=".aaa.cs;.aaa.txt" /&gt;
                &lt;/ContentType.Metadata&gt;
            &lt;/ContentType&gt;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDependentFilesService.GetDependentFilePathsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Find the dependent files given the parent file within the same folder. The newly found files also get evaluated as potential parents for other dependent files.
            A typical example is to find BlankPage.xaml.cs (which is the dependent file) given BlankPage.xaml (which is the parent file).
            </summary>
            <param name="files">The set of files to be evaluated specified as full paths.</param>
            <returns>A Task whose result is an list of the dependent file paths, including the original items.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IDependentFilesScope`1">
            <summary>
            Contextual information for <see cref="T:Microsoft.VisualStudio.ProjectSystem.IDependentFilesProvider"/>.
            </summary>
            <typeparam name="T">The type of data it contains.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDependentFilesScope`1.TryGetItemAsync(System.String)">
            <summary>
            Tries to get an item based on the name.
            </summary>
            <param name="fileName">The item to search for.</param>
            <returns>The corresponding item if found, null if not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDependentFilesScope`1.GetAllItemsAsync">
            <summary>
            Gets all items.
            </summary>
            <returns>A set of key-value pare that contain the fileName and the corresponding object if exits (otherwise null).</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IDependentFilesProvider">
            <summary>
            Identifies dependent files in order to set the DependentUpon metadata (e.g. foo.xaml - foo.xaml.cs) within the specified scope.
            It gets called when adding new items to the project.
            </summary>
            <remarks>
            CPS provides a default implementation that uses metadata specified in the items schema as ContentType Metadata (see sample below). Use this interface to extend the existing behavior.
            &lt;ContentType
                Name="aaaSourceFile"
                DisplayName="aaa source file"
                ItemType="aaaCompile"&gt;
                &lt;ContentType.Metadata&gt;
                    &lt;NameValuePair Name = "DependentFileExtensions" Value=".cs;.txt" /&gt;
                &lt;/ContentType.Metadata&gt;
            &lt;/ContentType&gt;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDependentFilesProvider.FindParentAsync``1(Microsoft.VisualStudio.ProjectSystem.IDependentFilesScope{``0},System.String)">
            <summary>
            Finds a parent for the specified item within the specified scope.
            </summary>
            <param name="scope">The scope of the match.</param>
            <param name="fileName">The item to search a parent for represented as a file name, with no directory information.</param>
            <returns>A parent for the specified item if found. Null if no parents match the current item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDependentFilesProvider.FindDependentFilesAsync``1(Microsoft.VisualStudio.ProjectSystem.IDependentFilesScope{``0},System.String)">
            <summary>
            Finds children than depend on the specified item within the specified scope.
            </summary>
            <param name="scope">The scope of the match.</param>
            <param name="fileName">The item to search a parent for represented as a file name, with no directory information.</param>
            <returns>The set of project items that depend on the specified item.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IFolderManager2">
            <summary>
            Provides services for maintain source item folders in the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager2.RemoveLinkedFileFolderFromProjectAsync(System.String)">
            <summary>
            Removes a linked file folder and all its contents from the project.
            </summary>
            <param name="path">The absolute or project-relative path to the folder.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProviderDataSource">
            <summary>
            An extension point to provide <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider"/> which depends on some configurable data.
            For example, how to map project properties to the tree can be described in an external file, which can be changed in the life time
            of a project, in this case, the provider must be exported through this contract, the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider"/>
            coming out of the dataflow must be immutable, and always returns the same result for the same input value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IFolderChildProjectItemProvider">
            <summary>
            Provides additional contract for <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider"/>, if it produces items considered to be under folders of the project.
            Those components are used by <see cref="T:Microsoft.VisualStudio.ProjectSystem.IFolderManager"/> to clean up items, when a folder is deleted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderChildProjectItemProvider.AnyProjectItemsUnderFolderAsync(System.String)">
            <summary>
            Gets whether there is any item under a specific folder.
            </summary>
            <param name="projectRelativePath">The project relative path of the folder.</param>
            <returns>True, if there is any item under the specific folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderChildProjectItemProvider.GetProjectItemsUnderFolderAsync(System.String)">
            <summary>
            Get project items appear under some project relative (folder) path.
            </summary>
            <param name="projectRelativePath">The project relative path of the folder.</param>
            <returns>Items would appear under that folder in the logical project tree</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderChildProjectItemProvider.NotifyBeforeRenamingFolderAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectItem},System.String,System.String)">
            <summary>
            Send notification before a folder is renamed.
            </summary>
            <param name="projectItems">Project items need be updated.</param>
            <param name="oldRelativePath">The relative path of the folder named.</param>
            <param name="newRelativePath">The new relative path of the folder named.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderChildProjectItemProvider.UpdateProjectItemsAfterRenamingFolderAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectItem},System.String,System.String,System.String)">
            <summary>
            Update items after a folder is renamed.
            </summary>
            <param name="projectItems">Project items need be updated.</param>
            <param name="oldFullPathEscaped">The original full path of the folder renamed.</param>
            <param name="oldRelativePathEscaped">The relative path of the folder named.</param>
            <param name="newRelativePathEscaped">The new relative path of the folder named.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemRuleProvider">
            <summary>
            Additional interface implemented by <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider"/> to pick rules related to items handled by the provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItemRuleProvider.IsFolder">
            <summary>
            Gets whether the item provided by this provider maps to a physical folder in the file system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemRuleProvider.GetItemsRules(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot)">
            <summary>
            Gets the name of rules matching items handled by the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider"/>.
            </summary>
            <param name="projectCatalogSnapshot">The project rule collection to pick up related rules.</param>
            <returns>A collection of rules.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider">
            <summary>
            An accessor for reading, writing and removing source file items inside the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider.GetDefaultItemTypeAsync(System.String)">
            <summary>
            Get the default item type from given file.
            </summary>
            <param name="fileName">A file name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider.EnsureItemExcludedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensure file items are excluded from the project.
            After dropping some excluded files into the project, they can be picked up by existing globs in the project.
            This method is to ensure they stay excluded.
            </summary>
            <param name="items">A collection of file items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider.GetAllLinkedItemsAsync">
            <summary>
            Gather all linked items inside the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Adds a new item to the MSBuild project.
            </summary>
            <param name="itemType">The item type for the new MSBuild item.</param>
            <param name="include">The unevaluated include value for the new item.  If no MSBuild expressions are believed to be in this value, it should be passed through <see cref="M:Microsoft.Build.Evaluation.ProjectCollection.Escape(System.String)"/> before being provided to this method.</param>
            <param name="metadata">Optional dictionary of metadata to apply to the item.</param>
            <param name="ensureUnique">Ensure the item is not included in the project with other itemTypes.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given <paramref name="itemType"/>
            is not one that is managed by this provider.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider.AddAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}},System.Boolean)">
            <summary>
            Adds new items to the MSBuild project.
            </summary>
            <param name="items">
            A sequence of items to add.  The tuple is made up of the item type, the (unevaluated) item name, and its metadata respectively.
            The metadata item may be <c>null</c>.
            </param>
            <param name="ensureUnique">Ensure the item is not included in the project with other itemTypes.</param>
            <returns>The list of added items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider.GetItemsByNameAsync(System.String)">
            <summary>
            Gets all source items that matches a given evaluated name.
            </summary>
            <param name="evaluatedInclude">The evaluated item name to find.</param>
            <returns>All items were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProvider.RenameFileAsync(System.String,System.String)">
            <summary>
            Gets all source items that matches a given evaluated name.
            </summary>
            <param name="evaluatedInclude">The evaluated item name to find.</param>
            <param name="newPath">The new path it should be changed to.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty2">
            <summary>
            Represents an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> property with additional information
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty2.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.DictionaryPropertyReader">
            <summary>
            A property reader that gets all properties and values out of a pre-filled dictionary of evaluated properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.DictionaryPropertyReader.evaluatedProperties">
            <summary>
            The dictionary to read properties from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.DictionaryPropertyReader.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.DictionaryPropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.DictionaryPropertyReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExpandStringPropertyReader">
            <summary>
            Reads properties from a <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>'s MSBuild evaluation model.
            </summary>
            <remarks>
            This class is sealed because it calls SatisfyImportsFast(this), which isn't guaranteed to be accurate if there are derived types.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ExpandStringPropertyReader.configuredProject">
            <summary>
            The ConfiguredProject whose properties are to be read from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ExpandStringPropertyReader.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExpandStringPropertyReader"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExpandStringPropertyReader.ProjectLockService">
            <summary>
            Gets the ProjectLockService.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ExpandStringPropertyReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.GetEvaluatedPropertyValueAsync(System.String)"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext">
            <summary>
            Captures the context needed to read properties from a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.hashCode">
            <summary>
            The hash code (lazily evaluated) for this immutable object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext"/> class.
            </summary>
            <param name="itemType"> The item type whose properties we are interested in. </param>
            <param name="itemName"> The evaluated include of the item whose properties we are interested in. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.IsProjectFile">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.File">
            <summary>
            The name of the property sheet from where to source properties from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.ItemType">
            <summary>
            Used to select the section of the project manifest which contains properties for
            certain item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.ItemName">
            <summary>
            The name of the item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.GetContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String)">
            <summary>
            Factory to produce a context based on the unconfigured project.
            </summary>
            <param name="project"> The unconfigured project containing the property.  May be null.</param>
            <param name="itemType"> The item type whose properties we are interested in. </param>
            <param name="itemName"> The evaluated include of the item whose properties we are interested in. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.GetContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String,System.String)">
            <summary>
            Factory to produce a context based on the unconfigured project.
            </summary>
            <param name="project"> The unconfigured project containing the property, if available.</param>
            <param name="file"> The full path of the project file or property sheet when applicable. </param>
            <param name="itemType"> The item type whose properties we are interested in. </param>
            <param name="itemName"> The evaluated include of the item whose properties we are interested in. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.Equals(System.Object)">
            <summary>
            Tests equality between this context and another.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.GetHashCode">
            <summary>
            Gets the hash code for this context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext">
            <summary>
            Implementation of ProjectPropertiesContext where the value for the File property is computed dynamically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext.suffix">
            <summary>
            The suffix to apply to the project's full path during file path computation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext.project">
            <summary>
            The project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext.IsProjectFile">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext.File">
            <summary>
            The file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext.HasSameLogicalFileReference(Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.DynamicProjectPropertiesContext)">
            <summary>
            Determines whether these two contexts refer to the same logical file
            </summary>
            <param name="other">The other project to which we should compare.</param>
            <returns>True if the two contexts refer to the same logical file</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.StaticProjectPropertiesContext">
            <summary>
            Implementation of ProjectPropertiesContext where the File property never changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.StaticProjectPropertiesContext.file">
            <summary>
            The file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.StaticProjectPropertiesContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.StaticProjectPropertiesContext"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.StaticProjectPropertiesContext.IsProjectFile">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.StaticProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContext.StaticProjectPropertiesContext.File">
            <summary>
            The file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer">
            <summary>
            Equality comparer for <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.DefaultInstance">
            <summary>
            Backing static field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.Default"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.IgnorePropertySheetInstance">
            <summary>
            Backing static field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.IgnorePropertySheet"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.CaseSensitiveInstance">
            <summary>
            Backing static field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.CaseSensitiveItemNames"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.ignoreFile">
            <summary>
            A value indicating whether this instance should ignore the property sheet member when comparing instances.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.itemNameComparer">
            <summary>
            Whether a case sensitive compare should be used on the item name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer"/> class.
            </summary>
            <param name="ignoreFile">A value indicating whether this instance should ignore the File member when comparing instances.</param>
            <param name="caseSensitive">A value indicating whether a case sensitive compare should be used on the item name.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.Default">
            <summary>
            Gets a comparer that considers every property in the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.IgnorePropertySheet">
            <summary>
            Gets a comparer that considers <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemType"/> and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/>
            but ignores the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.File"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.CaseSensitiveItemNames">
            <summary>
            Gets a comparer that considers <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/>
            to be case sensitive.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.Equals(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> for equality.
            </summary>
            <param name="x">The first instance to consider.</param>
            <param name="y">The second instance to consider.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesContextEqualityComparer.GetHashCode(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Calculates a hash code for a given instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/>.
            </summary>
            <param name="value">The instance to compute the hash code for.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesReader">
            <summary>
            Reads project properties via the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetEvaluatedPropertyValueAsync(System.String)"/> method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesReader.properties">
            <summary>
            The property store to read from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesReader.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties,Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertiesReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.GetEvaluatedPropertyValueAsync(System.String)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader">
            <summary>
            A convenience class for reading strongly-typed properties from an MSBuild file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.serializer">
            <summary>
            The serializer that knows how to read properties in a type-safe way.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.Create(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.Create(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties,Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.GetValueAsync``1(System.String)">
            <summary>
            Gets the strongly-typed value for a given property.
            </summary>
            <typeparam name="T">The strong-type to convert the string value to.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.GetValueAsync``1(System.String,``0)">
            <summary>
            Gets the strongly-typed value for a given property.
            </summary>
            <typeparam name="T">The strong-type to convert the string value to.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.GetRequiredValueAsync``1(System.String)">
            <summary>
            Gets the value of a property and throws an error if the property is missing or empty.
            </summary>
            <typeparam name="T">The strong-type to convert the string value to.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.GetValueAsPathAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a named property's value.
            Non-existent properties result in an empty string.
            </summary>
            <param name="propertyName">The name of the property whose value is being sought.</param>
            <param name="shouldBeQuoted">
            If true, the double quote character will be added to the beginning and end of the string (even if it was otherwise empty).
            If false, any leading/trailing double quote characters will be removed from the value before it is returned.
            </param>
            <param name="required">Whether an exception should be thrown if the property does not exist or has an empty value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.Create(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyReader.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            Gets the evaluated property value for some named property.  No special processing is performed.
            </summary>
            <returns>The evaluated value of the property, or <see cref="F:System.String.Empty"/> if the property was not found.</returns>
            <remarks>
            Implementations of this method should NEVER return null or throw an exception.
            Use the empty string when property names are not defined.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer">
            <summary>
            Serializing/Deserializing of various types to MSBuild properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.converters">
            <summary>
            contains the map of existing type serializers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.disallowNewMappings">
            <summary>
            When true, prevents calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.AddMapping``1(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IStrongTypeAndStringMapping{``0})"/>.  Useful for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.SimpleTypes"/> statically stored instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer"/> class
            with a common set of converters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer"/> class
            with a set of converters from another instance.
            Useful for adding more without affecting the original.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IStrongTypeAndStringMapping`1">
            <summary>
            A contract for translating a string value to a strongly-typed object.
            </summary>
            <typeparam name="T">The strong-type representation of some value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IStrongTypeAndStringMapping`1.ToString(`0)">
            <summary>
            Converts some value to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IStrongTypeAndStringMapping`1.ToValue(System.String)">
            <summary>
            Converts a string to some strongly-typed value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IStrongTypeAndStringMapping`1.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Provides the mapping a chance to validate itself as a last step.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.SimpleTypes">
            <summary>
            Gets an instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer"/> that can only serialize/deserialize the
            <see cref="T:System.Boolean"/> and <see cref="T:System.Int32"/> types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.AsReadOnly">
            <summary>
            Returns a serializer that disallows any changes to the property serialization mappings.
            (Although property serialization still works).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.ToString``1(``0)">
            <summary>
            serializer for class T
            </summary>
            <typeparam name="T">class to be serialized</typeparam>
            <param name="value">strongly typed value</param>
            <returns>string to use to repesend the value in msbuild</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.ToValue``1(System.String)">
            <summary>
            deserializer for class T
            </summary>
            <typeparam name="T">class template</typeparam>
            <param name="value">serialized value</param>
            <returns>strly typed value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.ToValue``1(System.String,``0)">
            <summary>
            deserializer for class T, when an explicit default value is preferred.
            </summary>
            <typeparam name="T">class template</typeparam>
            <param name="value">serialized value</param>
            <param name="defaultValue">The value of T to use if <paramref name="value"/> is null or empty.</param>
            <returns>strly typed value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.AddMapping``1(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IStrongTypeAndStringMapping{``0})">
            <summary>
            Adds a string-to-type (and vice versa) mapping to the list that can be serialized.
            </summary>
            <typeparam name="T">The strong type that may be serialized.</typeparam>
            <param name="values">A mapping of values.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.InitializeSimpleTypes">
            <summary>
            Initializes an instance that can only serialize simple, pre-defined types.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1">
            <summary>
            Helper class holding 2 wait translation table class values  to msbuild property value (string).
            </summary>
            <typeparam name="T"> clr class to be serialized to property values</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.enumToString">
            <summary>
            holds values -> string map
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.stringToEnum">
            <summary>
            string-to-values map
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.catchAllEnumValue">
            <summary>
            The enum value to return when reading in an unrecognized string.
            A value here avoids an ArgumentException being thrown during conversion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1"/> class
            that describes a new mapping between enumerable values and their string representations.
            </summary>
            <param name="defaultValue">
            The enum value to be assigned as the default value when reading
            a property that is empty or is not defined.
            </param>
            <param name="serializeDefaultValueAsEmptyString">
            Whether to use the empty string when serializing out this default value.
            If false, <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.AddMapping(`0,System.String)"/> should be called with the default value
            and a string to actually use for serializing out.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.AddMapping(`0,System.String)">
            <summary>
            Add T to String mapping
            </summary>
            <param name="enumValue">strongly typed value</param>
            <param name="propertyValue">serialized value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.SetCatchallValue(`0)">
            <summary>
            Sets an enum value that will be set when reading strings that are not added explicitly using <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.AddMapping(`0,System.String)"/>.
            </summary>
            <param name="enumValue">The enum value to be assigned when reading in unrecognized strings.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{T}#ToString(`0)">
            <summary>
            Convert a given value from type T to a string
            </summary>
            <param name="enumValue">the value to be serialized</param>
            <returns>the string representing the input value in msbuild file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{T}#ToValue(System.String)">
            <summary>
            Deserialize the property value to a strongly typed value.
            </summary>
            <param name="propertyValue">string value from msbuild</param>
            <returns>strongly typed value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input string is not recognized as an enum value.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumToPropertyValues`1.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Verifies a sane mapping between enum values and strings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumEquivalence`2">
            <summary>
            A mapping for Enums that simply delegates to another existing Enum mapping
            for an equivalent (but different) enum type.
            </summary>
            <typeparam name="TNew">The enum type to add a mapping for.</typeparam>
            <typeparam name="TExisting">The enum type that already has a mapping for it in this PropertySerializer.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumEquivalence`2.other">
            <summary>
            The dependency enum mapping object that we delegate everything to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumEquivalence`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumEquivalence`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumEquivalence`2.ToString(`0)">
            <summary>
            Calls the other enum mapping's ToString method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumEquivalence`2.ToValue(System.String)">
            <summary>
            Calls the other enum mapping's ToValue method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.EnumEquivalence`2.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            Finds the other existing mapping in the property serializer mapping table and stores its reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.UShortToPropertyValues">
            <summary>
            Describes how to convert unsigned short to strings and back again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.UShortToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#UInt16}#ToString(System.UInt16)">
            <summary>
            Converts a ushort to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.UShortToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#UInt16}#ToValue(System.String)">
            <summary>
            Converts a string to a ushort.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.UShortToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IntToPropertyValues">
            <summary>
            Describes how to convert integers to strings and back again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IntToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#Int32}#ToString(System.Int32)">
            <summary>
            Converts an integer to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IntToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#Int32}#ToValue(System.String)">
            <summary>
            Converts a string to an integer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.IntToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.StringToPropertyValues">
            <summary>
            Used to support reading strings.
            </summary>
            <remarks>
            This would be unnecessary, but some routines ignorantly pass T = string around that may eventually reach
            the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer"/>.  So this just keeps things from breaking.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.StringToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#String}#ToString(System.String)">
            <summary>
             returns value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.StringToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#String}#ToValue(System.String)">
            <summary>
             returns value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.StringToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.GuidToPropertyValues">
            <summary>
            Describes how to convert Guid to strings and back again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.GuidToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#Guid}#ToString(System.Guid)">
            <summary>
            Converts an integer to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.GuidToPropertyValues.Microsoft#VisualStudio#ProjectSystem#Properties#PropertySerializer#IStrongTypeAndStringMapping{System#Guid}#ToValue(System.String)">
            <summary>
            Converts a string to an integer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.GuidToPropertyValues.OnMappingInserted(Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer)">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess">
            <summary>
            Provides rule-based property access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.namedCatalogs">
            <summary>
            A cache of named catalogs for this configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.ConfiguredProject">
            <summary>
            Gets the configured project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.File">
            <summary>
            Gets the file context for the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.ItemType">
            <summary>
            Gets the item type context for the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.ItemName">
            <summary>
            Gets the item name context for the properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.StronglyTypedPropertyAccess.GetNamedCatalogsAsync">
            <summary>
            Gets the map of named catalogs to use for properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties">
            <summary>
            Provides properties available in an MSBuild ITaskItem.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.isReadOnly">
            <summary>
            A value indicating whether this instance should not allow mutating of metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.#ctor(Microsoft.Build.Framework.ITaskItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.PropertyKind">
            <summary>
            see IProjectProperties
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.Context">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.FileFullPath">
            <summary>
            See IProjectProperties
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.TaskItem">
            <summary>
            Stores the ITaskItem where properties will be read.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetPropertyNamesAsync">
            <summary>
            see IProjectProperties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetDirectPropertyNamesAsync">
            <summary>
            see IProjectProperties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.GetUnevaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.SetPropertyValueAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.DeletePropertyAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.IsValueInheritedAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.TaskItemProperties.DeleteDirectPropertiesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExportDynamicEnumValuesProviderAttribute">
            <summary>
            Exports a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesProvider"/> extension to CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ExportDynamicEnumValuesProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExportDynamicEnumValuesProviderAttribute"/> class.
            </summary>
            <param name="category">The category that describes the type of enum values the provider will generate.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportDynamicEnumValuesProviderAttribute.Category">
            <summary>
            Gets the category that describes the type of enum values the provider will generate.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute">
            <summary>
            Exports <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProvider"/> with the supported metadata.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute.PageTemplatesSeparator">
            <summary>
            The separator characters usable in the constructor's pageTemplates parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute"/> class.
            </summary>
            <param name="pageTemplates">A semicolon-delimited list of the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.PageTemplate"/> values that this factory provider can produce factories for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute.SupportsItemSpecificView">
            <summary>
            Gets or sets a value indicating whether this provider is interested in hearing about property page displays
            for file specific views (i.e., at least one project item is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute.SupportsProjectSpecificView">
            <summary>
            Gets or sets a value indicating whether this provider is interested in hearing about property page displays
            for the project level view (i.e., a project is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute.SupportsPropertySheetSpecificView">
            <summary>
            Gets or sets a value indicating whether this provider is interested in hearing about property page displays
            for the property sheet level view (i.e., a property sheet is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyPageUIFactoryProviderAttribute.PageTemplates">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.PageTemplate"/> values that this factory provider can produce factories for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo">
            <summary>
            Represents the help information on a property page property in various formats.
            </summary>
            <remarks>
            Some or all of these help properties could be null/empty.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo.F1Keyword">
            <summary>
            The F1 keyword.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo.HelpUrl">
            <summary>
            The help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo.HelpFile">
            <summary>
            The help keyword. Goes with <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo.HelpContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo.HelpContext">
            <summary>
            The help context. Goes with <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.HelpInfo.HelpFile"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument">
            <summary>
            Default implementation of a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
            <remarks> Is thread-safe. </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument.argument">
            <summary>
            The argument schema. We source all schema information from this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument.#ctor(Microsoft.Build.Framework.XamlTypes.Argument)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument"/> class.
            </summary>
            <param name="argument"> The argument schema object. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument.PropertyName">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument.IsRequired">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument.Separator">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PageArgument.ConvertToIArgument(System.Collections.Generic.IList{Microsoft.Build.Framework.XamlTypes.Argument})">
            <summary>
            Creates a list of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument"/> objects from a list of <see cref="T:Microsoft.Build.Framework.XamlTypes.Argument"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue">
            <summary>
            Default implementation of a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
            <remarks> Is thread-safe. </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.enumValue">
            <summary>
            The enum value schema. We source all schema information from this object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.pageArguments">
            <summary>
            See the Arguments property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.#ctor(Microsoft.Build.Framework.XamlTypes.EnumValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue"/> class.
            </summary>
            <param name="enumValue"> The enum value schema object. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.Name">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.DisplayName">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.Description">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.HelpString">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.Switch">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.SwitchPrefix">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.IsDefault">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.Metadata">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.Arguments">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.ToString">
            <summary>
            Translates this enum value to the in-project string representation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PageEnumValue.ConvertToIEnumValue(System.Collections.Generic.IList{Microsoft.Build.Framework.XamlTypes.EnumValue})">
            <summary>
            Creates a list of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> objects from a list of <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts">
            <summary>
            Well known property page (rule) contexts as they may appear in .targets files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts.File">
            <summary>
            Rules that apply at a per-item level, or at the project level to apply defaults to project items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts.Project">
            <summary>
            Rules that apply only at the project level.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts.PropertySheet">
            <summary>
            Rules that apply only to property sheets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts.ProjectSubscriptionService">
            <summary>
            Rules that are invisible except for purposes of programmatic subscribing to project data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts.BrowseObject">
            <summary>
            Rules that describe properties that appear in the Properties tool window
            while an item is selected in Solution Explorer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts.ConfiguredBrowseObject">
            <summary>
            Rules that describe configured project properties.
            This context currently only supports the Xaml rule to define configuration related project level properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase">
            <summary>
            Implements base class behavior of IPropertyPageUIFactory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.pageId">
            <summary>
            Page Id
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.pageName">
            <summary>
            Page name (unlocalized)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.displayPageName">
            <summary>
            Page name (localized)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.pageOrder">
            <summary>
            page order in PP viewer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.groupName">
            <summary>
            Parent folder name (unlocalized)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.displayGroupName">
            <summary>
            Parent folder name - this is the localized tool name i.e. "C/C++"
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.groupOrder">
            <summary>
            rule order in PP viewer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.#ctor(System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase"/> class
            without grouping
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.#ctor(System.Guid,System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase"/> class
            with grouping
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.PageId">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.PageOrder">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.GroupOrder">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.Name">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.GroupName">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.DisplayName">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.DisplayGroupName">
            <summary>
             see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.ServiceProvider">
            <summary>
            The VS provided service provider (ie what the package obtains via SetSite)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.ProjectService">
            <summary>
            Gets or sets the project service.
            </summary>
            <value>The project service.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.ShellServices">
            <summary>
            Hosting shell services
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.ThreadingService">
            <summary>
            Gets or sets the thread handling service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageUIFactoryBase.CreateControl(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIWindow)">
            <summary>
            see IPropertyPageUIFactory
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.RuleNameComparer">
            <summary>
            IEqualityComparer for Rule objects using the name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.RuleNameComparer.ruleComparer">
            <summary>
            Static comparer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.RuleNameComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.RuleNameComparer"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.RuleNameComparer.Default">
            <summary>
            RuleComparer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.RuleNameComparer.Equals(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Compare two rules by their name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.RuleNameComparer.GetHashCode(Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Implement the GetHashCode method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.StandardRuleDataflowLinkOptions">
            <summary>
            Dataflow block link options that include rule names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.StandardRuleDataflowLinkOptions.ruleNames">
            <summary>
            These are the rule names associated with these link options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.StandardRuleDataflowLinkOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.StandardRuleDataflowLinkOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.StandardRuleDataflowLinkOptions.RuleNames">
            <summary>
            Gets or sets the rule names associated with these link options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.StandardRuleDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IVsProjectDesignerPageService">
             <summary>
             Provides services for gathering property designer pages for a project.
              This is a singlton service, which will be implemented inside CPS VS implementation side.
            
             Note: Both this interface and IVsPropertyPageService need be moved to VS specific layer.
              This is temporary defined here because it shares PropertyPageFilters type with IVsPropertyPageService.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IVsProjectDesignerPageService.IsProjectDesignerSupported">
            <summary>
            Whether the project designer is supported for the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IVsProjectDesignerPageService.GetPagesAsync(Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters)">
            <summary>
            Gets the co-creatable GUIDs for the property pages to display for the current project.
            </summary>
            <param name="filter">A filter of which property pages to include.</param>
            <returns>An array of co-creatable GUIDs.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot">
            <summary>
            Describes a project snapshot and the property pages catalog that describes how to interpret it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot.Project">
            <summary>
            Gets the project snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot.NamedCatalogs">
            <summary>
            Gets a map of named catalogs that provide rules for reading the project data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot.ItemSchema">
            <summary>
            Gets the project item schema
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.RuleDataflowLinkOptions">
            <summary>
            Additional options that may be specified when linking to the results of a design-time build block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.RuleDataflowLinkOptions.RuleNames">
            <summary>
            Gets or sets the set of rules that should be included in the prepared project state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.RuleDataflowLinkOptions.Clone">
            <summary>
            Clones these link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRuleFactory">
            <summary>
            Factory for IRule instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRuleFactory.CreateResolvedReferencePageRule(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Creates an IRule instance suitable for displaying the browse object properties on a resolved reference.
            Used by external callers who don't have access to the internal type ResolvedReferencePageRule
            </summary>
            <param name="schema">The underlying rule providing the properties</param>
            <param name="unresolvedContext">The IProjectPropertiesContext representing the file</param>
            <param name="resolvedItemName">The ItemName of the resolved reference</param>
            <param name="resolvedItemMetadata">The metadata name-value pairs associated with the resolved reference</param>
            <returns>new ResolvedReferencePageRule as an IRule instance suitable for displaying the browse object properties on a resolved reference</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRuleFactory.ReplicateRule(Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog)">
            <summary>
            Relicates a rule in the current project's context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot">
            <summary>
            An immutable snapshot of a portion of the project defined by a set of Rule objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot.RuleName">
            <summary>
            Gets the name of the rule that was used to initialize this snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot.Items">
            <summary>
            Gets a dictionary of items, where the key is the item name (evaluated include) and the value
            is a dictionary of item metadata.
            </summary>
            <value>A read only, order preserving dictionary.</value>
            <remarks>
            An enumeration of this dictionary will reliably generate the project items
            in the order in which they appear in the project file.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot.Properties">
            <summary>
            Gets the project properties from the project whose names match names of properties in the included rule.
            </summary>
            <value>A read only dictionary.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IClonePlatformFixup">
            <summary>
            Interface for components that provide post-platform cloning property fix ups.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IClonePlatformFixup.ShouldElementBeCloned(Microsoft.Build.Construction.ProjectPropertyElement,System.String@)">
            <summary>
            Called before an element is cloned to find out whether it is appropriate
            to clone the element for the target platform.
            </summary>
            <param name="propertyElement">The property element being cloned.</param>
            <param name="alternativeValue">
            A value that should be used for the cloned element rather than the original value.
            The default value is <c>null</c>, which indicates that a <c>true</c> return value should use the existing value.
            A value set on this parameter will only take effect if <c>true</c> is returned.
            </param>
            <returns>
            <c>true</c> if the element should be cloned; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IClonePlatformFixup.ShouldElementBeCloned(Microsoft.Build.Construction.ProjectMetadataElement,System.String@)">
            <summary>
            Called before an element is cloned to find out whether it is appropriate
            to clone the element for the target platform.
            </summary>
            <param name="metadataElement">The metadata element being cloned.</param>
            <param name="alternativeValue">
            A value that should be used for the cloned element rather than the original value.
            The default value is <c>null</c>, which indicates that a <c>true</c> return value should use the existing value.
            A value set on this parameter will only take effect if <c>true</c> is returned.
            </param>
            <returns>
            <c>true</c> if the element should be cloned; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IClonePlatformFixupFactory">
            <summary>
            Interface for components that provide post-platform cloning property fix ups.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IClonePlatformFixupFactory.CreateCloneFixup(System.String,System.String)">
            <summary>
            Prepares for a platform cloning operation.
            </summary>
            <param name="templatePlatform">The template platform.</param>
            <param name="newPlatform">The platform being cloned to.</param>
            <returns>A fixup dedicated to a single cloning operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRuleAwareProjectProperties">
            <summary>
            Project property accessor that may take into account the Rule from which it came.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRuleAwareProjectProperties.SetRuleContext(Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Provides the Rule that will be driving this instance.
            </summary>
            <param name="rule">A Rule behind the construction of this instance.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitions">
            <summary>
            A snapshot of additional rule definitions defined in a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitions.AdditionalRuleDefinitionsFromFiles">
            <summary>
            Gets the additional rule definitions for this project.
            </summary>
            <returns>The map of additional rule definitions (key: path, value: context) to apply to the project.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitions.AdditionalRuleDefinitions">
            <summary>
            Gets the additional rule definitions for this project.
            </summary>
            <returns>The map of additional rule definitions (key: rule, value: context) to apply to the project.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IContextUpdatingRule">
            <summary>
            An interface applied to "DM2" property objects (such as IRule and IProperty)
            that wish to receive notifications when item types or names have changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextUpdatingRule.OnItemIdentityChanged(System.String,System.String,System.String,System.String)">
            <summary>
            Invoked to notify this instance that an item type and/or item name has changed.
            </summary>
            <param name="oldItemType">The old item type.</param>
            <param name="oldItemName">The old item name.</param>
            <param name="newItemType">The new item type.</param>
            <param name="newItemName">The new item name.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider">
            <summary>
            Components implementing this interface will provide a property storage data source
            </summary>
            <remarks>
            Implementers of this interface should export metadata with key "Name" to identify the property storage medium.
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetCommonProperties(Microsoft.Build.Execution.ProjectInstance)">
            <summary>
            Get "project level" properties.
            </summary>
            <param name="projectInstance">The project instance from which to read properties.</param>
            <returns>Collection of common properties "PropertyGroup" section in msbuild</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetItemTypeProperties(Microsoft.Build.Execution.ProjectInstance,System.String)">
            <summary>
            Get properties specific to a given item type.
            </summary>
            <param name="projectInstance">The project instance from which to read properties.</param>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <returns>Collection of properties common for all MSBUILD items from given type (ItemDefinitionGroup section)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetItemProperties(Microsoft.Build.Execution.ProjectInstance,System.String,System.String)">
            <summary>
            Get properties specific to a given item.
            </summary>
            <param name="projectInstance">The project instance from which to read properties.</param>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <param name="itemName">The evaluated include on the project item to match, if selected.</param>
            <returns>Collection of properties from item's metadata</returns>
            <remarks>
            The item must be present in the project file itself -- not imported.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectInstancePropertiesProvider.GetItemProperties(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Get properties specific to a given item.
            </summary>
            <param name="taskItem">The project instance item from which to read properties.</param>
            <returns>Collection of properties from item's metadata</returns>
            <remarks>
            The item must be present in the project file itself -- not imported.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor">
            <summary>
            Class to implement the construction of a tool command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.AdditionalOptionsPropertyName">
            <summary>
            The string "AdditionalOptions", which identifies the specially recognized property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.readPropertyValueInContext">
            <summary>
            Indicates whether to read property values at the end of the project or at its point of definition in the context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.props">
            <summary>
            Dictionary to hold all properties of a rule for easy access.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.args">
            <summary>
            String list to hold all names of argument properties of a parent property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.rule">
            <summary>
            The rule for which this class constructs the command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.projectLockService">
            <summary>
            A mechanism to obtain a project lock around a larger set of work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.IProjectLockService,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="projectLockService">The project lock service.</param>
            <param name="readPropertyValueInContext"> Indicates whether to obtain the values of the properties in the
            rule from evaluating to the end of the project or from evaluating till the definition of the property in
            the context. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.GetStringsCommonPart(System.Collections.Generic.IList{System.String},System.String,System.Boolean@)">
            <summary>
            Helper to get common part of multiple strings
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.GetAdditionalOptionsProperty">
            <summary>
            Obtains additional options property from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.ConstructCommandLineAsync">
            <summary>
            Constructs command line from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.GetAdditionalOptionsValueAsync">
            <summary>
            Obtains additional options string value from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.GetPropertyValueInAppropriateFormAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProperty)">
            <summary>
            Returns the value of a property in a form required by the namespace Microsoft.Build.Tasks.Xaml.CommandLineGenerator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.AutoGenerateCommandLineAsync">
            <summary>
            Constructs command line from IRule
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.EmitArgumentSwitchAsync(System.Collections.Generic.IList{Microsoft.VisualStudio.ProjectSystem.Properties.IArgument})">
            <summary>
            Command line construction helper: returns the switch or sequence of switches
            that should be emitted by all argument properties of a parent property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.EmitPropertySwitchAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProperty)">
            <summary>
            Command line construction helper: returns the switch that should be emitted
            by a property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.CommandLineConstructor.GetEvaluatedValueAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)">
            <summary>
            Returns the evaluated value of a property. Reads the in-context or at-the-end value
            depending on the flag pased to the constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyXamlRuleDefinitionAttribute">
            <summary>
            Creates export metadata that describes where to find a XAML resource that deserializes
            into a <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> object.
            The actual value exported is never used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyXamlRuleDefinitionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyXamlRuleDefinitionAttribute"/> class.
            </summary>
            <param name="xamlResourceAssemblyName">The full name of the assembly that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>.</param>
            <param name="xamlResourceStreamName">
            The name of the assembly manifest stream that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>
            in its XAML-serialized form.
            </param>
            <param name="context">
            A semicolon-delimited list of property page catalogs that should include the Rule.
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts"/> for names of common catalogs.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyXamlRuleDefinitionAttribute.XamlResourceAssemblyName">
            <summary>
            Gets the full name of the assembly that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyXamlRuleDefinitionAttribute.XamlResourceStreamName">
            <summary>
            Gets the name of the assembly manifest stream that carries the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>
            in its XAML-serialized form.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ExportPropertyXamlRuleDefinitionAttribute.Context">
            <summary>
            Gets a semicolon-delimited list of property page catalogs that should include the Rule.
            </summary>
            <value>See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageContexts"/> for names of common catalogs.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext">
            <summary>
            Provides information regarding what project properties are to be displayed for a context object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext.UnconfiguredProject">
            <summary>
            Gets the unconfigured project that owns the object whose properties are to be displayed.
            </summary>
            <value>The unconfigured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext.ConfiguredProject">
            <summary>
            Gets the configured project that owns the object whose properties or items are to be displayed.
            </summary>
            <value>The configured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext.PropertySheet">
            <summary>
            Gets the property sheet whose properties or items are to be displayed.
            </summary>
            <remarks>
            Although the path to the property sheet is also available in <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext.ProjectPropertiesContext"/>,
            the property sheet object itself is interesting because it includes properties that are determined
            through the route by which the object is obtained.  For example, whether a given property sheet
            is a read only "system" property sheet depends on where its import was found in the project,
            rather than simply by its filename.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext.ProjectPropertiesContext">
            <summary>
            Gets the context of the item within the project being explored.
            </summary>
            <value>The project properties context.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContextProvider">
            <summary>
            A service that can transform a VS-given context object into one that is useful to CPS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContextProvider.GetContextObject(System.Object)">
            <summary>
            Gets the object that implements <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext"/> for a given object
            passed to IPropertyPage.SetObjects.
            </summary>
            <param name="value">The value whose property pages are being pulled up for.</param>
            <returns>An object that implements the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext"/>, or <c>null</c> if unable to produce one.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties">
            <summary>
            Reads and writes properties in a specific context as opposed to the entire project.
            A context is defined by an MSBuild file.
            </summary>
            <remarks>
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.IsDefinedInContextAsync(System.String)">
            <summary>
            Retruns true if and only if there is at least one true-evaluating  definition of
            the property in the current context.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <returns> True if and only if it is defined in context. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.GetPropertyValueInContextAsync(System.String,System.String)">
            <summary>
            Gets the value of the last true-evaluating definition of this property in a particular
            MSBuild file. If there is no true-evaluating definition of the property in the file, then
            it returns the value of the last true-evaluating definition in all of the imports before
            the insertion location of this property. The insertion location is obtained based on the
            project definition order. The notion of "before" after is defined based on the lexical order of
            an element in the logical project (i.e. the project manifest with all the imports inlined).
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <param name="groupLabel"> The label of the MSBuild group to which the property belongs to. This information is
            only used if the property doesn't already exist in context. This information is used to bookmark the insertion
            location of the property and then return the value of an immediately preceding definition.
            For a common property, it refers to the property group label whereas for an item definition metadata, it refers
            to the item definition group label. For an item metadata, this parameter is ignored since the item has to
            exist. This parameter can only be null for item properties. Empty string is allowed in all cases and refers to
            the default group (with no name). </param>
            <returns>The property, including unevaluated, evaluated and search result details.  Never <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.ComputeAllPrecedingEvaluatedDefinitionValuesAsync(System.String,System.String)">
            <summary>
            Get the values of all preceding definitions of this property (that evaluated to true during project evaluation).
            If the property is not present in this context, we use the location where it would be added according to
            project ordering specification as the bookmark.
            </summary>
            <param name="propertyName"> Name of the property. </param>
            <param name="groupName"> The label of the MSBuild group to which the property belongs to. This information is
            only used if the property doesn't already exist in context. This information is used to bookmark the insertion
            location of the property and then return the value of an immediately preceding definigion.
            For a common property, it refers to the property group label whereas for an item definition metadata, it refers
            to the item definition group label. For an item metadata, this parameter is ignored since the item has to
            exist. This parameter can only be null for item properties. Empty string is allowed in all cases and refers to
            the default group (with no name). </param>
            <returns> An ordered (evaluation order) list of (unevaluated value, evaluated value) of the preceding definitions. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.ComputeBuildMacrosAsync(System.String,System.String)">
            <summary>
            Get the list of all "build macros" i.e. the list of all properties, item metadata definition and item metadata
            that can be used to define a new value of this property. For a common property (properties in a property group),
            this is the list of all properties whose definitions occur before this property definition and whose name
            doesn't start with an underscore plus environment variables, toolset properties and global properties whose name
            doesn't start with an underscore. If there are more than one definition of a particular property, we use the
            final definition (preceding the current property). For an item definition metadata, it is the list of all properties
            in the entire project whose name doesn't start with an underscore, plus the list of item definition metadata whose
            definition occur before the property. For an item metadata, it is the list of all properties in the entire project
            which don't start with an underscore, plus the list of all item definition metadata, plus the list of all
            metadata for the same item which occur before it.
            The above rules for getting build macros result from the evaluation algorithm used by MSBuild where all properties
            are evaluated in the first pass, then all item definitions in the second pass and then items in the final pass.
            </summary>
            <param name="propertyName"> Name of the property. </param>
            <param name="groupName"> The label of the MSBuild group to which the property belongs to. This information is
            only used if the property doesn't already exist in context. This information is used to bookmark the insertion
            location of the property and then return the value of an immediately preceding definigion.
            For a common property, it refers to the property group label whereas for an item definition metadata, it refers
            to the item definition group label. For an item metadata, this parameter is ignored since the item has to
            exist. This parameter can only be null for item properties. Empty string is allowed in all cases and refers to
            the default group (with no name). </param>
            <returns> A dictionary of (unevaluated value and evaluated value) of build macros keyed by build macro name. The build macro
            name is enclosed in $() for properties and %() for metadata. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.SetPropertyValueInContextAsync(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets the unevaluated value of a property in context. If the property is not defined in context, it is created along with
            its group at the location suggested by the project definition order.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <param name="groupLabel">The label of the property group in which to set the property.</param>
            <param name="unevaluatedPropertyValue"> The value used to set the property. </param>
            <param name="dimensionalConditions"> If a new property is created, then it is attached a condition that matches with the
            current configuration. That condition is constructed based on the dimensions passed in here. For e.g. passing
            {("Configuration", "Debug"), ("Platform", "Win32")} results in a condition "'$(Configuration)|$(Platform)' == 'Debug|Win32'"</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IContextSpecificProjectProperties.DeletePropertyInContextAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Equivalent to calling the other overload except that the property in context is deleted only
            if its condition matches the condition that is naturally contructable from the given dimensions.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <param name="dimensionalConditions"> If a new property is created, then it is attached a condition that matches with the
            current configuration. That condition is constructed based on the dimensions passed in here. For e.g. passing
            {("Configuration", "Debug"), ("Platform", "Win32")} results in a condition "'$(Configuration)|$(Platform)' == 'Debug|Win32'"</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet">
            <summary>
            A property sheet. The project itself is considered to be a property sheet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.UnevaluatedPath">
            <summary>
            The unevaluated full path of this property sheet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.IsSystemPropertySheet">
            <summary>
            Tells whether this is a property sheet or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.HasUnsavedChangesAsync">
            <summary>
            Gets whether the property sheet has unsaved changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetEvaluatedFullPathAsync">
            <summary>
            Gets the evaluated full path of the property sheet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetImportedSystemPropertySheetsAsync">
            <summary>
            Returns the ordered list of system property sheets imported by this property sheet. Only
            property sheets whose condition evaluated to true during project evaluation are considered.
            </summary>
            <returns> Ordered list of system property sheets. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetImportedUserPropertySheetsAsync">
            <summary>
            Returns the ordered list of user property sheets imported by this property sheet. Only
            property sheets whose condition evaluated to true during project evaluation are considered.
            </summary>
            <returns> Ordered list of the user property sheets. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.GetImportedPropertySheetsAsync">
            <summary>
            Returns the ordered list of system property sheets and user property sheets imported by this
            property sheet. Only property sheets whose condition evaluated to true during project
            evaluation are considered. By definition, the system property sheets occur before the user
            property sheets.
            </summary>
            <returns> Ordered list of all the property sheets (system + user). </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String)">
            <summary>
            Adds an import for a property sheet. Appends it to the end of the property sheets import group.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String,System.String)">
            <summary>
            Adds an import for a property sheet with the specific condition. Appends it to the end of the property sheets import group.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <param name="condition"> Condition to add to the new property sheet.</param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds an import for a property sheet. Appends it to the end of the property sheets import group with the given dimensional condition.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Cannot be null. </param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.AddPropertySheetAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String)">
            <summary>
            Adds an import for a property sheet with the specified condition. Appends it to the end of the property sheets import group with the given dimensional condition.
            </summary>
            <param name="relativeOrFullPath">
            The relative (w.r.t to this property sheet location) or full path of the
            property sheet which will be imported.  It can contain macros. In case when the path does not contain
            macros, the relative path (w.r.t this property sheet location) will be used for writing to the file. Paths
            with macros are written as such without any modification.
            </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Cannot be null. </param>
            <param name="condition"> Condition to add to the new property sheet.</param>
            <exception cref="T:System.ArgumentException"> Thrown if the property sheet to be added already exists as user property sheet of this property sheet. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveBeforePropertySheetAsync(System.String,System.String)">
            <summary>
            Moves an existing property sheet before another existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import before which we need to move the other import. Can contain macros. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveBeforePropertySheetAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Moves an existing property sheet before another existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import before which we need to move the other import. Can contain macros. </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Can be null. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveAfterPropertySheetAsync(System.String,System.String)">
            <summary>
            Moves an existing property sheet before after existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import after which we need to move the other import. Can contain macros. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.MoveAfterPropertySheetAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Moves an existing property sheet before after existing property sheet.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the import to move. Can contain macros. </param>
            <param name="relativeOrFullPathOfReferenceImport"> The relative (w.r.t. this property sheet location) or full path of the import after which we need to move the other import. Can contain macros. </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Can be null. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.RemovePropertySheetAsync(System.String)">
            <summary>
            Removes all property sheets with the given name and present in a property sheets import group with no condition.
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the property sheet which will be imported.  It can contains macros,
            in which case it must be identical to what was passed when it was added using AddPropertySheet(). </param>
            <returns> True, if the property sheet(s) was removed. Else, false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.RemovePropertySheetAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Removes all property sheets with the given name and present in a property sheet import group with the given dimensional condition
            </summary>
            <param name="relativeOrFullPath"> The relative (w.r.t. this property sheet location) or full path of the property sheet which will be imported.  It can contains macros,
            in which case it must be identical to what was passed when it was added using AddPropertySheet(). </param>
            <param name="dimensionNameValuePairs"> The configuration dimension name value pairs which determine the condition for the import. Cannot be null. </param>
            <returns> True, if the property sheet(s) was found. Else, false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet.SaveAsync">
            <summary>
            Saves the property sheet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper">
            <summary>
            Provides a readonly, evaluated-only view of metadata.
            </summary>
            <remarks>
            This is a thread-safe class.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.properties">
            <summary>
            The internal collection used for storing the properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.PropertyKind">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.FileFullPath">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Context">
            <summary>
            See IProjectProperties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.GetPropertyValueAsync(System.String)">
            <summary>
            Gets the value of a named property/metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.GetPropertyNamesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.GetDirectPropertyNamesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#GetUnevaluatedPropertyValueAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#SetPropertyValueAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#DeletePropertyAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#IsValueInheritedAsync(System.String)">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ReadOnlyProjectPropertiesWrapper.Microsoft#VisualStudio#ProjectSystem#Properties#IProjectProperties#DeleteDirectPropertiesAsync">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot">
            <summary>
            Provides a snapshot glance at a property's value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.PropertyName">
            <summary>
            Gets the name of the project property or item metadata.
            </summary>
            <value>A valid MSBuild property name.  Never <c>null</c> or empty.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.EvaluatedValue">
            <summary>
            Gets the evaluated value of the property.
            </summary>
            <value>The property value as evaluated by MSBuild.  Never <c>null</c>, but may be empty.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.UnevaluatedValue">
            <summary>
            Gets the unevaluated value of the property.
            </summary>
            <value>The property value as stored in the MSBuild file, after XML unescaping.  Never <c>null</c>, but may be empty.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertySnapshot.IsDefinedInContext">
            <summary>
            Gets a value indicating whether this property was defined in the
            context from which it was queried.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheetService">
            <summary>
            A service that provides access to property sheets in the system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheetService.GetPropertySheet(System.String)">
            <summary>
            Get the property sheet whose path is given.
            </summary>
            <param name="unevaluatedFullPath">
            The full path of the property sheet. Can contain macros.
            Passing in a null or the empty string or the manifest path retrieves the property sheet that is the
            manifest (yes, the manifest is also considered as a property sheet).
            The file need not exist.  An IPropertySheet will still be returned.
            </param>
            <returns> An object implementing <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet"/>. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheetService.GetPropertySheetByLabelAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Gets the path to a property sheet with a given value for its Label attribute on the specific Import element.
            </summary>
            <param name="projectToSearch">
            The full path of the property sheet or project to search for an import with a matching label.
            If <c>null</c> or empty, the project manifest file will be searched.
            </param>
            <param name="label">The label that must be present on the resulting property sheet's import element.</param>
            <param name="dimensionNameValuePairs">
            The conditions under which to aggressively look for the import in the event that the import doesn't appear in the evaluation model.
            </param>
            <returns>The property sheet if one is found; otherwise <c>null</c>.</returns>
            <remarks>
            The search for a matching import is NOT a recursive search in imported projects.  Only the project
            given by <paramref name="projectToSearch"/> is searched.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind">
            <summary>
            The various types of properties that exist in MSBuild files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind.PropertyGroup">
            <summary>
            A project property that appears in a PropertyGroup.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind.ItemDefinitionGroup">
            <summary>
            Item Definition metadata found in an ItemDefinitionGroup.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind.ItemGroup">
            <summary>
            Item metadata
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties">
            <summary>
            Project property collection, provides mechanism to access and modify properties from a property storage.
            Applies to project properties, item metadata and item definition metadata.
            </summary>
            <remarks>
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.Context">
            <summary>
            Gets the context under which this instance was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.FileFullPath">
            <summary>
            Gets the full path to the project file actually to be changed when writing properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.PropertyKind">
            <summary>
            Gets the kind of properties being get/set using this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetPropertyNamesAsync">
            <summary>
            Allows enumeration over all defined properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetDirectPropertyNamesAsync">
            <summary>
            Allows enumeration over all properties defined directly on an element.
            Excludes inherited or imported metadata or properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetEvaluatedPropertyValueAsync(System.String)">
            <summary>
            Gets a value of a single property which is evaluated (all macros expanded) against the current
            context, or the empty string if the property does not exist.
            </summary>
            <param name="propertyName">property name</param>
            <returns>Evaluated value for a property, or the empty string if the property does not exist.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.GetUnevaluatedPropertyValueAsync(System.String)">
            <summary>
            Gets the "raw" value for a property - i.e. the string that is written in the file.
            </summary>
            <param name="propertyName">property name</param>
            <returns>raw property value; or <c>null</c> if the property is not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.SetPropertyValueAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets a property value.
            </summary>
            <param name="propertyName">property name</param>
            <param name="unevaluatedPropertyValue">The "raw" (unevaluated) value to set.  Cannot be null.</param>
            <param name="dimensionalConditions">propery value will be set only for the configuration context</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.DeletePropertyAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            remove a property value
            equivalent to void SetPropertyValue(propertyName, propertyValue, true);
            </summary>
            <param name="propertyName">property name</param>
            <param name="dimensionalConditions">propery value will be removed only for the configuration context</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.IsValueInheritedAsync(System.String)">
            <summary>
            Check if the the property is defined in the context scope, or its value
            comes via an inheritance mechanism.
            </summary>
            <returns>True if property value is inherited.  False if it is defined in scope (or not defined at all?).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties.DeleteDirectPropertiesAsync">
            <summary>
            Removes all explicit properties/metadata from a project element.
            Inherited properties will remain.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider">
            <summary>
            Components implementing this interface will provide a property storage data source
            </summary>
            <remarks>
            Implementers of this interface should export metadata with key "Name" to identify the property storage medium.
            Implementations of this interface must be thread-safe.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.ProjectPropertyChanging">
            <summary>
            Event that is fired when a project property has been added, removed or changed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.ProjectPropertyChangedOnWriter">
            <summary>
            Event that is fired after a project property has been added, removed or changed, on the writer thread.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.ProjectPropertyChanged">
            <summary>
            Event that is fired after a project property has been added, removed or changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.DefaultProjectPath">
            <summary>
            Gets the path to the project file, .user file, or whatever the default context is (non-property sheet)
            for this particular provider.
            </summary>
            <value>Never null or empty.</value>
            <devremarks>Dev14: make this async, as the path may be a special import which takes a project lock to calculate.</devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetCommonProperties">
            <summary>
            Get "project level" properties.
            </summary>
            <returns>Collection of common properties "PropertyGroup" section in msbuild</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetItemTypeProperties(System.String)">
            <summary>
            Get properties specific to a given item type.
            </summary>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <returns>Collection of properties common for all MSBUILD items from given type (ItemDefinitionGroup section)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetItemProperties(System.String,System.String)">
            <summary>
            Get properties specific to a given item.
            </summary>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <param name="item">The evaluated include on the project item to match, if selected.</param>
            <returns>Collection of properties from item's metadata</returns>
            <remarks>
            The item must be present in the project file itself -- not imported.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider.GetProperties(System.String,System.String,System.String)">
            <summary>
            generic version of Property container for given context.
            </summary>
            <param name="file">The path to the project file or property sheet to which this context applies.</param>
            <param name="itemType">select item type scope, can be null or empty which means generic project properties</param>
            <param name="item">project item if selected.</param>
            <returns>Collection of properties common for all MSBUILD items from given type (ItemDefinitionGroup section)</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters">
            <summary>
            Attributes of property pages that can be used to filter the set to display.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters.None">
            <summary>
            No property pages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters.ConfigurationIndependent">
            <summary>
            Property pages that contain <em>no</em> properties whose values are set with configuration conditions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters.ConfigurationDependent">
            <summary>
            Property pages that contain properties whose values are set with configuration conditions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters.All">
            <summary>
            All property pages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IVsPropertyPageService">
            <summary>
            Provides services for displaying property pages for context objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IVsPropertyPageService.GetPagesAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters)">
            <summary>
            Gets the co-creatable GUIDs for the property pages to display for the given context
            whose properties are set without configuration conditions.
            </summary>
            <param name="context">The context of the element whose property pages should be displayed.</param>
            <param name="filter">A filter of which property pages to include.</param>
            <returns>An array of co-creatable GUIDs.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs">
            <summary>
            Arguments for the project change request event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs"/> class
            for a single MSBuild property change.
            </summary>
            <param name="propertySheet">Filename of the property sheet, or null/empty if none.</param>
            <param name="propertyName">The name of the MSBuild property that has changed, cannot be null or empty string.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs"/> class
            for a single MSBuild item definition change.
            </summary>
            <param name="propertySheet">Filename of the property sheet, or null/empty if none.</param>
            <param name="propertyName">The name of the MSBuild property that has changed, cannot be null or empty string.</param>
            <param name="itemType">The item type of the source, if the source is an item or item definition.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs"/> class
            for a single MSBuild item metdata change.
            </summary>
            <param name="propertySheet">Filename of the property sheet, or null/empty if none.</param>
            <param name="propertyName">The name of the MSBuild property that has changed, cannot be null or empty string.</param>
            <param name="itemInclude">The evaluated item include of the source.</param>
            <param name="itemType">The item type of the source.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.PropertyName">
            <summary>
            The name of the MSBuild property that was modified. Cannot be null or empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.PropertySheet">
            <summary>
            Filename of the property sheet, or null if none.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemInclude">
            <summary>
            The item's evaluated include, if the event is from an item, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemType">
            <summary>
            The item's type, if the event is from an item or item definition, null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.PropertySheetEvent">
            <summary>
            Returns true if the event is from a property sheet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ProjectPropertyEvent">
            <summary>
            Returns true if the event is for a project property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemPropertyEvent">
            <summary>
            Returns true if the event is for an item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ProjectPropertyChangedEventArgs.ItemDefinitionPropertyEvent">
            <summary>
            Returns true if the event is for an item definition.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider">
            <summary>
            Property pages discovery component.
            </summary>
            <remarks>
            Rename to IProjectCatalogSnapshotService and move to Designers namespace.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider.GetCatalogAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the catalog of the given name.
            </summary>
            <param name="name">The context name used to identify the catalog of pages to work with.  Typically one of: PropertySheet, Project, File, BrowseObject, or String.Empty.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The catalog of the given name - including the "all contexts" entries, or the catalog of only "all contexts" entries if the name is not recognized.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider.GetCatalogsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a map of all catalogs indexed by their names.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A dictionary where the keys are names of catalogs and the values are the catalogs.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalogProvider.GetMemoryOnlyCatalog(System.String)">
            <summary>
            Gets a catalog for the specified context, that only contains rules added to this service as instances (not file paths).
            </summary>
            <param name="context">The context of the catalog to return. For example: "ProjectFile" or "PropertySheet".</param>
            <returns>A catalog. May be empty, but not null.</returns>
            <remarks>
            The catalog returned here does *not* include rules from the project file.
            This method is synchronous so that it can satisfy catalog demands from code-generated rule properties,
            which may have "fallback" rules to load on-demand without an asynchronous code path.
            Async code paths in this case are incompatible because the code generated rule properties often run
            within the context of an upgradeable read or write lock, which do not permit running async code synchronously.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext">
            <summary>
            Captures the context needed to read properties from a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.IsProjectFile">
            <summary>
            Returns true if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.File"/> refers to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.File">
            <summary>
            Gets the full path to the project file or property sheet the properties are stored in.
            </summary>
            <value>An absolute path; never <c>null</c>.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemType">
            <summary>
            Gets the  type whose definition (if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/> is null)
            stores the properties or (if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName"/> is not null) the
            item type of the specific item that stores the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext.ItemName">
            <summary>
            Gets the evaluated include value of the item.
            Null indicates an item type definition stores the properties,
            or project properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument">
            <summary>
            Represents an argument to a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
            <remarks>
            Functionally, it is simply a reference to another <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.PropertyName">
            <summary>
            Name of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> this argument refers to.
            </summary>
            <remarks>
            Its value must point to a valid <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>. This field is culture invariant
            and is never null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.IsRequired">
            <summary>
            Tells if the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> pointed to by <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.PropertyName"/> must be defined for the definition
            of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> owning this argument to make sense.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IArgument.Separator">
            <summary>
            The string used to separate this argument value from the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> switch in the command line.
            </summary>
            <remarks>
            This field is culture invariant.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty">
            <summary>
            Represents a bool property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty.ReverseSwitch">
            <summary>
            Represents the logical negation of a boolean switch.
            </summary>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c>. To
            disable whole program optimization, you need to pass the ReverseSwitch, which is <c>GL-</c>.
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty.GetValueAsBoolAsync">
            <summary>
            Returns the value of this property as a bool?.
            </summary>
            <remarks>
            Returns <c>null</c> if the value was not set at the data source or
            if the value at the data source cannot be converted to a bool value using <c>System.Convert.ToBoolean(object)</c>
            method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IBoolProperty.SetValueAsBoolAsync(System.Nullable{System.Boolean})">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory">
            <summary>
            Represents a category to which an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> can belong to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
            <remarks>
            This field is culture invariant.
            This field will never return null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.DisplayName">
            <summary>
            The UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
            <remarks>
            The value returned by this field is generally localized. However, when the value of this field is not set
            (e.g. in the XAML property page), it is initialized to the (non-localized) value of <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Name"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Description">
            <summary>
            The (localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Subtype">
            <summary>
            Subtype of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>. Is either <c>Grid</c> (default) or <c>CommandLine</c>.
            </summary>
            <remarks>
            It helps the UI display this category in an appropriate form. E.g. non command line category
            properties are normally displayed in the form of a property grid.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.HelpString">
            <summary>
            (Localized) help information for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>. Maybe used to specify a help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Schema">
            <summary>
            The underlying schema for the category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory.Order">
            <summary>
            Defines the order of the category as it apears under property page viewer
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource">
            <summary>
            Represents a property persistence - ItemType and type of file where it is stored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.Persistence">
            <summary>
            The storage location for this data source.
            </summary>
            <remarks>
            This field is mandatory and is culture invariant.
            The string value for this property should be one that is understood by an IProjectPropertiesProvider
            component. Current accepted values are <c>ProjectFile</c>
            and <c>UserFile</c>. <c>ProjectFile</c> causes the property value to be writted to and read from
            the project manifest file or the property sheet (depending on which node in the solution explorer/property manager
            window is used to spawn the property pages UI). <c>UserFile</c> causes the property value to be written to and
            read from the .user file.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.PersistedName">
            <summary>
            Gets the property name as it is actually persisted to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.SourceType">
            <summary>
            The data type of the source.  Generally one of <c>Item</c>, <c>ItemDefinition</c>, or <c>Property</c>.  Among other things
            this governs how the data is treated during build.
            </summary>
            <example>
            A value of <c>Item</c> for this property indicates that this property is actually
            an item array - the list of all items with the item type specified by <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.ItemType"/>.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.SourceOfDefaultValue">
            <summary>
            Gets a value indicating where the default value for this property can be found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.Label">
            <summary>
            The label of the MSBuild property group/item definition group to which
            a property/item definition metadata belongs to. Default value is the
            empty string.
            </summary>
            <example> A VC++ property that exists in the project manifest
            in the MSBuild property group with label <c>Globals</c> would have this
            same value for this field. </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.ItemType">
            <summary>
            If the property owning this data source is an item definition metadata or item metadata, this field
            specified the item type of the item definition or the item, respectively. For common properties
            this field must not be set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.HasConfigurationCondition">
            <summary>
            Indicates if a property is configuration-dependent as indicated by the presence of a configuration
            condition attached to the property definition at its persistence location.
            </summary>
            <remarks>
            This field is optional and has the default value of <c>true</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IDataSource.GetPersistedFileAsync">
            <summary>
            Gets the path to the file where a new property value would be written.
            </summary>
            <value>A full path to a file on the filesystem.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator">
            <summary>
            A contract for providers of values for DynamicEnumProperty properties.
            </summary>
            <remarks>
            Implementations of this interface should be thread-safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator.AllowCustomValues">
            <summary>
            **** OBSOLTETE ****
            This property is not consumed and will be removed in a future version
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator.GetListedValuesAsync">
            <summary>
            The list of values for this property that should be displayed to the user as common options.
            It may not be a comprehensive list of all admissible values however.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator.TryCreateEnumValueAsync(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator.TryCreateEnumValueAsync(System.String)">
            <summary>
            Tries to find or create an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> based on some user supplied string.
            </summary>
            <param name="userSuppliedValue">The string entered by the user in the property page UI.</param>
            <returns>
            An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> if the <paramref name="userSuppliedValue"/> was successfully used
            to generate or retrieve an appropriate matching <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            A task whose result is <c>null</c> otherwise.
            </returns>
            <remarks>
            If this returns a task with a <c>null</c> result, then CPS will try to match the user supplied value to those
            listed in <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator.GetListedValuesAsync"/>. If that fails to find a suitable match then the user supplied
            value will be placed directly into the property field.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesProvider">
            <summary>
            Builds <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator"/> instances given a set of options.
            </summary>
            <remarks>
            Implementations of this interface should be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesProvider.GetProviderAsync(System.Collections.Generic.IList{Microsoft.Build.Framework.XamlTypes.NameValuePair})">
            <summary>
            Returns an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator"/> instance prepared to generate dynamic enum values
            given an (optional) set of options.
            </summary>
            <param name="options">
            A set of options set in XAML that helps to customize the behavior of the
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator"/> instance in some way.
            </param>
            <returns>
            Either a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IDynamicEnumValuesGenerator"/> instance
            or an existing one, if the existing one can serve responses based on the given <paramref name="options"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue">
            <summary>
            Represents an admissible value of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>. This field is culture invariant and is never null
            or the empty string.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.DisplayName">
            <summary>
            The (localized) UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Description">
            <summary>
            (Localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.HelpString">
            <summary>
            (Localized) help information for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>. May contain a help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Switch">
            <summary>
            When the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> represents a tool parameter, each possible value for
            this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> can have an associated switch representation. This field
            represents that information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.SwitchPrefix">
            <summary>
            When the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> represents a tool parameter, each possible value for
            this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> can have an associated switch prefix representation. This field
            represents that information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.IsDefault">
            <summary>
            Tells if this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> is the default value for the associated
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue.Arguments">
            <summary>
            List of arguments for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty">
            <summary>
            Represents an enumeration property.
            </summary>
            <remarks> The input for the setter for the Value property can be an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue"/> or
            the (string) <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Name"/> of one of the elements of <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetAdmissibleValuesAsync"/>.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetAdmissibleValuesAsync">
            <summary>
            The list of possible values for this property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetValueAsIEnumValueAsync">
            <summary>
            Returns the value of this property as a IEnumValue. Returns "null" if the value was not set at the data source or
            if the value at the data source does not correspond to the name of any element of <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.GetAdmissibleValuesAsync"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEnumProperty.SetValueAsIEnumValueAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IEnumValue)">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty">
            <summary>
            Represent an integer property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MinValue">
            <summary>
            Minimum allowed value for this property. It returns null when this property is not set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MaxValue">
            <summary>
            Maximum allowed value for this property. It returns null when this property is not set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.GetValueAsIntAsync">
            <summary>
            Returns the value of this property as an int?. Returns "null" if the value was not set at the data source
            if the value at the data source cannot be converted to an int value using <c>System.Convert.ToInt32(object)</c>
            method. The setter throws an exception if the value is not within range as defined by <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MinValue"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.MaxValue"/>, assuming one or both are defined.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IIntProperty.SetValueAsIntAsync(System.Nullable{System.Int32})">
            <summary>
            Sets the value of this property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty">
            <summary>
            A property that supports the concept of EvaluatedValue and UnevaluatedValue. For example,
            $(ProgramFiles) might be the UnevaluatedValue whereas the EvaluatedValue might be @"C:\Program Files".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.InheritingToken">
            <summary>
            Gets the token that can be included in the unevaluated property value
            in order to include the inherited value in a locally defined value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetUnevaluatedValueAtEndAsync">
            <summary>
            The unevaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> obtained by evaluating the entire project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetEvaluatedValueAtEndAsync">
            <summary>
            The evaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> obtained by evaluating the entire project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetUnevaluatedValueAsync">
            <summary>
            The unevaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> as present at the data source location.
            The getter returns null if the value is uninitialized at the data source. The setter
            throws an exception if the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsReadOnly"/> property is set. No validation of any kind is
            done while getting or setting the value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetEvaluatedValueAsync">
            <summary>
            The evaluated value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> as present at the data source location.
            The getter returns null if the value is uninitialized at the data source. Validation is done for get or set
            to ensure that it is of the proper type. No validation of any kind is done in the getter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.SetUnevaluatedValueAsync(System.String)">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.ComputeAllPrecedingEvaluatedDefinitionValuesAsync">
            <summary>
            Get the values of all preceding definitions of this property (that
            evaluated to true during project evaluation).
            </summary>
            <returns> A evaluation-ordered list of (unevaluated value, evaluated value) of the preceding definitions. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.ComputeBuildMacrosAsync">
            <summary>
            Get the list of all "build macros" i.e. the list of all properties, item metadata definition and item metadata
            that can be used to define the value of this property. For a common property (properties in a property group),
            this is the list of all properties whose definitions occur before this property definition and whose name
            doesn't start with an underscore. If there are more than one definition of a particular property, we use the
            final definition before the current property. For an item definition metadata, it is the list of all properties
            in the entire project whose name doesn't start with an underscore, plus the list of item definition metadata whose
            definition occur before the property. For an item metadata, it is the list of all properties in the entire project
            which don't start with an underscore, plus the list of all item definition metadata, plus the list of all
            metadata for the same item which occur before it.
            The above rules for getting build macros follow the evaluation method used by MSBuild where all properties
            are evaluated in the first pass, then all item definitions in the second pass and then items.
            </summary>
            <returns> A list of macroName and its (unevaluated value, evaluated value). </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty">
            <summary>
            Represents an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> property.
            </summary>
            <remarks>
            Supplies read-only schema information as well as allows read-write access to its value from the
            property's data source.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
            <remarks>
            This field is culture invariant and is never null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DisplayName">
            <summary>
            The UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
            <remarks>
            The value returned by this field is generally localized. However, when the value of this field is not set
            (e.g. in the XAML property page), it is initialized to the (non-localized) value of <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Name"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Description">
            <summary>
            (Localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword">
            <summary>
            The keyword that is used to open the help page for this property.
            </summary>
            <remarks>
            This form of specifying help takes precedence over <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/> + <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/>.
            This field is optional and is culture insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl">
            <summary>
            The URL of the help page for this property that will be opened when the user hits F1.
            </summary>
            <remarks>
            This property is higher in priority that <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/> + <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/>
            (i.e., these two properties are ignored if <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>
            is specified), but lower in priority than <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword"/>.
            This field is optional and is culture insensitive.
            </remarks>
            <example> <c>ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.VisualStudio.v80.en/dv_vstoc/html/06ddebea-2c83-4a45-bb48-6264c797ed93.htm</c> </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile">
            <summary>
            The help file to use when the user hits F1. Must specify <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/> along with this.
            </summary>
            <remarks>
            This property goes along with <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/>. <seealso cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext"/>. This
            form of specifying the help page for a property takes lower precedence than both <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>.
            This field is optional and is culture insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpContext">
            <summary>
            The help context to use when the user hits F1. Must specify <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/> along with this.
            </summary>
            <remarks>
            This property uses the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpFile"/> property to display the help context of the specified
            help file. This field is optional. This
            form of specifying the help page for a property takes lower precedence than both <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.F1Keyword"/>
            and <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.HelpUrl"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Category">
            <summary>
            The name of the category to which this property belongs to.
            </summary>
            <remarks>
            The category refers to an
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/> contained in the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. This field is
            culture invariant and is never null or the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Subcategory">
            <summary>
            The sub category to which this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsReadOnly">
            <summary>
            Tells if this property is a read-only property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Switch">
            <summary>
            The switch representation of this property for the case when this property represents a tool parameter.
            </summary>
            <remarks>
            This field is culture invariant.
            </remarks>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c>.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.SwitchPrefix">
            <summary>
            The prefix for the switch representation of this property for the case when this property represents a tool parameter.
            </summary>
            <remarks>
            The value specified here overrides the value specified for the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>'s <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.SwitchPrefix"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c> and its
            switch prefix (inherited from the parent <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.SwitchPrefix"/> since it is not overriden by <c>WholeProgramOptimization</c>)
            is <c>/</c>. Thus the complete switch in the command line for this property would be <c>/GL</c>
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Separator">
            <summary>
            The token used to separate a switch from its value or, when a switch has multiple values, one value from another.
            </summary>
            <remarks>
            The value specified here overrides the value specified for the parent <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>'s <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Separator"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            Example: Consider <c>/D:WIN32</c>. In this switch and value representation, ":" is the separator since its separates the switch <c>D</c>
            from its value <c>WIN32</c>.
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Visible">
            <summary>
            A hint to the UI client telling it whether to display this property or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IncludeInCommandLine">
            <summary>
            A hint to the command line constructor whether to include this property in the command line or not.
            </summary>
            <remarks>
            Some properties are used only by the targets and don't want to be included in the command line.
            Others (like task parameters) are included in the command line in the form of the switch/value they emit.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DefaultValue">
            <summary>
            The default value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> not captured by the primary fields.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Arguments">
            <summary>
            List of arguments for this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.ValueEditors">
            <summary>
            The list of possible values for this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.ContainingRule">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> which contains this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DataSource">
            <summary>
            The data source where the current value of this property is stored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.Context">
            <summary>
            Gets the property context that this rule reads from and writes to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync">
            <summary>
            Gets the value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> as present at the data source location.
            </summary>
            <remarks>
            <para>
            The getter returns null if the value is uninitialized at the data source. The setter
            throws an exception if the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsReadOnly"/> property is set. The actual type
            of the value passed to the setter can be anything as long as it can be converted to
            the most specific type using <c>System.Convert.ToXxx(object)</c> method.
            </para>
            <para> This is the only property in this class that is not a schema related information. </para>
            <para> If a class implements the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty"/> in addition to this interface, this property
            is assumed to return the evaluatedValue but set the unevaluatedValue. </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.SetValueAsync(System.Object)">
            <summary>
            Sets the value of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetDisplayValueAsync">
            <summary>
            A UI friendly string representation of the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsDefinedInContextAsync">
            <summary>
            Gets a value indicating whether the value of this property was defined
            locally for the context this property was created within, as opposed to a value
            inherited from an import or item definition group.
            </summary>
            <example> For a ClCompile item (foo.cpp), the "Optimization" property is inherited from
            the ClCompile group properties if it is not explicitly set. The value of the below property
            will be <c>false</c> in such a case and <c>true</c> it it is explicitly set. </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsValidValueAsync(System.Object)">
            <summary>
            Checks whether a given user-entered string is a valid value for this property.
            </summary>
            <param name="userSuppliedValue">The string the user entered into the property value field.</param>
            <returns>The validity and error message where applicable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.DeleteAsync">
            <summary>
            Deletes the property definition from its data source.
            </summary>
            <remarks>
            The property definition is only deleted from the context the
            property is expected to appear within.
            If this property is defined locally, the local definition is deleted and
            the inherited value (if any) defines the property.
            If this property is inherited, the inherited definition is not deleted.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IsValidValueResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.IsValidValueAsync(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IsValidValueResult.IsValid">
            <summary>
            Gets or sets a value indicating the validity of the user input.
            </summary>
            <value>True if the user-supplied value is a valid value for this property.  False otherwise.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IsValidValueResult.ErrorMessage">
            <summary>
            Gets or sets a human-meaningful description of the error that occurred if applicable and available.
            This MAY be null even if false is returned if no useful message can be produced for the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup">
            <summary>
            Holds a collection of all <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>s belonging to a category. There is a
            one-one correspondence between an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> and an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            Note that it is possible for a property group to have no properties at all, depending
            on how the corresponding XAML schema was defined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup.Category">
            <summary>
            The common category to which all <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>s in this bucket belong to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup.Properties">
            <summary>
            The collection of all <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>s in the containing <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> that
            belong to this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/>'s <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup.Category"/>. Is never null. But can be
            empty.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService">
            <summary>
            Property pages discovery component.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.AdditionalRuleDefinitions">
            <summary>
            Gets the current set of additional rule definitions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.AddRuleDefinition(System.String,System.String)">
            <summary>
            Adds a rule definition to the project as it is currently loaded (without touching the project file for a persistent change).
            </summary>
            <param name="path">The path to the rule file.  May be absolute or relative to the project file.</param>
            <param name="context">The context to apply to this rule.</param>
            <returns>A value indicating whether this rule was actually added; <c>false</c> if the rule was already added.</returns>
            <remarks>
            This method may be called multiple times with the same rule.  The value of the <paramref name="context"/> parameter
            included with the last method call takes precedence.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.AddRuleDefinition(Microsoft.Build.Framework.XamlTypes.Rule,System.String)">
            <summary>
            Adds a rule definition to the project as it is currently loaded (without touching the project file for a persistent change).
            </summary>
            <param name="rule">Rule to add</param>
            <param name="context">The context to apply to this rule.</param>
            <returns>A value indicating whether this rule was actually added; <c>false</c> if the rule was already added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.RemoveRuleDefinition(System.String)">
            <summary>
            Removes a rule definition from the in-memory list of rules to add to the project.
            </summary>
            <param name="path">The path to the rule file.  May be absolute or relative to the project file.</param>
            <returns>A value indicating whether this rule was actually removed; <c>false</c> if no matching rule definition was found to remove.</returns>
            <remarks>
            This method does NOT remove a rule definition from the project file itself.
            It only affects in-memory additions made using the AddRuleDefinition method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService.RemoveRuleDefinition(Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Removes a rule definition from the in-memory list of rules to add to the project.
            </summary>
            <param name="rule">The rule to the rule file.  May be absolute or relative to the project file.</param>
            <returns>A value indicating whether this rule was actually removed; <c>false</c> if no matching rule definition was found to remove.</returns>
            <remarks>
            This method does NOT remove a rule definition from the project file itself.
            It only affects in-memory additions made using the AddRuleDefinition method.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog">
            <summary>
            Property pages discovery component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetPropertyPagesSchemas">
            <summary>
            Return all available schemas.
            </summary>
            <returns>collection of schema names</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetProjectLevelPropertyPagesSchemas">
            <summary>
            Returns all available schemas that apply to the project-level properties,
            such as MSBuild project properties and item definition metadata.
            </summary>
            <returns>A collection of rule names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetPropertyPagesSchemas(System.String)">
            <summary>
            Return all schemas with data source associated to a given item type.
            </summary>
            <param name="itemType">MSBuild item type, for project generic properties pass null</param>
            <returns>collection of schema names</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetPropertyPagesSchemas(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return all schemas generated by the xaml files in the given paths.
            </summary>
            <param name="paths"> A list of absolute paths to xaml files.</param>
            <returns>collection of schema names</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.GetSchema(System.String)">
            <summary>
            Gets the schema with the given name.
            </summary>
            <param name="schemaName">The name of the rule to retrieve.</param>
            <returns>A rule, or <c>null</c> if no match is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,System.String,System.String,System.String)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="file">The path to the project or property sheet to which the desired context applies.  Null to use the default project file.</param>
            <param name="itemType">The item type of the context, if applicable.</param>
            <param name="itemName">include part of MSbuild item definition</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="context">the context to bind to.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,Microsoft.Build.Execution.ProjectInstance,System.String,System.String)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="itemType">The item (definition) from which to read metadata.  May be null.</param>
            <param name="itemName">The item from which to read metadata.  May be null.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog.BindToContext(System.String,Microsoft.Build.Execution.ProjectInstance,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Given the schema name and a context, build a working IRule object
            </summary>
            <param name="schemaName">schema identifying the IRule section in XAML file</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="taskItem">The backing task item to get read-only properties from.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory">
            <summary>
            IPropertyPageUIFactory is a link between the property page provider and underlying page draw control
            Instances of IPropertyPageUIFactory contains only static data, therefore only one instance per page Id
            is needed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.PageId">
            <summary>
            Property page ID (used by frame UI)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.GroupOrder">
            <summary>
            Page parent section order (valid if GroupName is not null or empty)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.PageOrder">
            <summary>
            Page order (in section if any or global)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.Name">
            <summary>
            non localized page name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.GroupName">
            <summary>
            non localized parent section. (can be null or empty)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.DisplayName">
            <summary>
            The name of the page (as it apears in the left side of the Frame UI). This is localized string.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.DisplayGroupName">
            <summary>
            The section where property page is under. can be null or empty. It is localized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory.CreateControl(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIWindow)">
            <summary>
            This method will create the actual UI control that is responsible to draw the left part of UI frame.
            </summary>
            <param name="hostWindow">The containing UI window for the control</param>
            <returns>An instance of the UI control</returns>
            <remarks>
            The UI technology for the container and the control are up to the factory, which is why the API
            is weakly typed. Make sure to utilize the factory's metadata to only use factories that conform to
            the UI technology used by the hosting application.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProvider">
            <summary>
            Component implementing IPropertyPageUIFactoryProvider knows how to handle particular type of propery pages. given the full set of
            available XAML property page definitions, it will break it to an individyal property pages create IPropertyPageUIFactory
            associated with each page and provide back the list of pages to sent to Frame UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProvider.GetPropertyPageUIFactories(System.Collections.Generic.ICollection{Microsoft.VisualStudio.ProjectSystem.Properties.IRule},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Returns the set of UI factories that should be included in the property page view for the given set of rules and itemTypes.
            </summary>
            <param name="rules">All applicable data models for this display.</param>
            <param name="itemTypes">The list of item types that are being included in the display.</param>
            <returns>list of property pages to show</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryService">
            <summary>
            Per-project configuration collection of property page UI factories.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryService.AddFactory(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactory)">
            <summary>
            Adds a factory to the list of possible factories in this project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryService.GetFactoryFromId(System.Guid)">
            <summary>
            Returns the factory in this configuration for a given ID.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryService.GetPropertyEditor(System.String)">
            <summary>
            returns the named property editor instance
            </summary>
            <param name="editorName">the value for Name metadata to match</param>
            <returns>the property editor, null if there is none</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIWindow">
            <summary>
            Represents the window element for the property page controls
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIWindow.MarkDirty">
            <summary>
            Indicates to the containing window that the control state has become dirty.
            </summary>
            <remarks>
            The purpose of this method is to allow the property page window to know when state has
            changed in it's controls without having to poll each one. Then the window can perform
            specific actions such as enabling ok/apply buttons, etc.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIValueEditor">
            <summary>
            Represents the window element for the property page controls
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIValueEditor.EditValueAsync(System.IServiceProvider,Microsoft.VisualStudio.ProjectSystem.Properties.IProperty,System.Object)">
            <summary>
            Invokes the editor.
            </summary>
            <param name="serviceProvider">The set of potential services the component can query for, mainly for access back to the host itself.</param>
            <param name="ruleProperty">the property being edited</param>
            <param name="currentValue">the current value of the property (may be different than property.Value - for example if host UI caches the new values until Apply button)</param>
            <returns>The new value.  May be <paramref name="currentValue"/> if no change is intended.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule">
            <summary>
            Used to represent both the schema information and instance information for a Custom Build Rule,
            a Tool, a PropertyPage, ItemProperties, etc. The schema information is sourced from a
            Microsoft.VisualStudio.Project.PropertyPages.Schema.Rule
            object which, in turn, gets its data from a XAML file on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Name">
            <summary>
            The name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            <list type="bullet">
            <item><description> This field is never null or empty. </description></item>
            <item><description> This field is culture invariant. </description></item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.DisplayName">
            <summary>
            The (localized) UI display name of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Description">
            <summary>
            The (localized) description of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.HelpString">
            <summary>
            (Localized) help information for this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. Maybe used to specify a help URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.PageTemplate">
            <summary>
            The UI renderer template used to display this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. The value of this
            property is assumed to be recognized by an existing or a custom renderer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.SwitchPrefix">
            <summary>
            It defines the character that is a prefix to the switches passed to this tool.
            </summary>
            <example> For the command line "foo.exe /s1:val1 /s2:val2", "/" is the SwitchPrefix. </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Separator">
            <summary>
            It defines the character that seperates the values from the switch names.
            </summary>
            <example> For the command line "foo.exe /s1:val1 /s2:val2", ":" is the Separator. </example>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Categories">
            <summary>
            The list of categories the various properties in this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> belong to.
            The list includes categories that are directly and indirectly specified in the schema file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Schema">
            <summary>
            The underlying schema instance (Rule). Note that only one
            Rule instance exists per XAML file which is shared by multiple
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> instances.
            </summary>
            <remarks> This reference can be useful to find the intersection of property pages of more than one items/projects/... </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Order">
            <summary>
            Rule order it can be used to define the order different rules shows in propery page viewer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.File">
            <summary>
            Gets the path to the property sheet to use as the context; or <c>null</c> if the default file context should be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.ItemType">
            <summary>
            Gets the item type of the context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.ItemName">
            <summary>
            Gets the name of the item in context, if applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.PropertyGroups">
            <summary>
            List of categorized property buckets. The order of these groups is the same as the order
            of categories specified in the schema file. Note that it is possible for a property
            group to have no properties in it at all, depending on how the corresponding XAML schema was
            defined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Properties">
            <summary>
            Gets all the properties in this rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Context">
            <summary>
            Gets the property context that this rule reads from and writes to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.PropertyPagesHidden">
            <summary>
            Should a property page be hidden for this rule or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.Item(System.String)">
            <summary>
            Gets the unique <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyGroup"/> corresponding to an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the input parameter does not refer to a valid <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.ICategory"/> in this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>. </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.GetProperty(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> for a particular property contained by this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/>.
            Returns null if the property is not contained.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <returns> The <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty"/> if it exists, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.GetPropertyValueAsync(System.String)">
            <summary>
            Gets the (evaluated) value for the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>A task whose result is the property value. If the property is not defined by this rule, an empty string is the result.</returns>
            <remarks>
            This method serves as a memory optimization over calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IRule.GetProperty(System.String)"/>
            followed by <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync"/> or <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty.GetEvaluatedValueAtEndAsync"/>
            as that sequence allocates several more objects than this method does.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty">
            <summary>
            Represents a list-of-strings property.
            </summary>
            <remarks> The value passed to the setter of the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Properties.IProperty.GetValueAsync"/> property must
            be of type ReadOnlyCollection-string or it must be the string formed
            from concatenating the string elements using the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.RendererValueSeparator"/> string.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.Subtype">
            <summary>
            Similar to the <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.Subtype"/> property. Every string in the
            string list is assumed to have the same Subtype.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.CommandLineValueSeparator">
            <summary>
            For <c>Val1;Val2;Val3</c>, if CommandLineValueSeparator is specified (=”,”),
            the command line looks like this: /p:val1,val2,val3
            If not specified, the command line looks like this: /p:val1 /p:val2 /p:val3
            Optional.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.RendererValueSeparator">
            <summary>
            Specified how the property gets parsed when read from the project file and how it gets saved back.
            i.e. for <c>Val1,Val2,Val3</c> the Property Value Editor UI needs to display 3 lines
            Val1
            Val2
            Val3
            In this case the RendererValueSeparator will be ","
            This is independent on how the property gets outputted on the command line, that’s why we need 2 different properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IStringListProperty.GetValueAsStringCollectionAsync">
            <summary>
            Gets the constituent strings in the string list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty">
            <summary>
            Represents a string property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.Subtype">
            <summary>
            Qualifies this string property to give it a more specific classification. See example.
            </summary>
            <example> The value of this property can be set to "File", "Folder", "CarModel" etc. to specify
            if this is a file path, folder path, car model name etc. </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.GetValueAsStringAsync">
            <summary>
            Returns the value of this property as a string. Returns "null" if the value was not set at the data source
            if the value at the data source cannot be converted to a bool value using <c>System.Convert.ToString(object)</c>
            method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IStringProperty.SetValueAsStringAsync(System.String)">
            <summary>
            Sets the property value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesDataModelProvider">
            <summary>
            Proffers the data model for property pages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesDataModelProvider.GetRule(Microsoft.Build.Framework.XamlTypes.Rule,System.String,System.String,System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> object for a particular schema and a particular context.
            </summary>
            <param name="schema">The Rule that describes the properties to access.</param>
            <param name="file">The project file, imported property sheet or user file to which the context applies; may be <c>null</c> to allow the default context.</param>
            <param name="itemType">The item type to which the context applies, if applicable.</param>
            <param name="itemName">The item name to which the context applies, if applicable.</param>
            <returns>Data model for the property page</returns>
            <devcomment>
            This method cannot simply take an IProjectPropertiesContext parameter instead of file|itemType|itemName
            because IProjectPropertiesContext requires that the file be set to a non-null value.
            </devcomment>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesDataModelProvider.GetRule(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.Build.Execution.ProjectInstance,System.String,System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> object for a particular schema and a particular context.
            </summary>
            <param name="schema">The Rule that describes the properties to access.</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="itemType">The item (definition) from which to read metadata.  May be null.</param>
            <param name="itemName">The item from which to read metadata.  May be null.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesDataModelProvider.GetRule(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.Build.Execution.ProjectInstance,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IRule"/> object for a particular schema and a particular context.
            </summary>
            <param name="schema">The Rule that describes the properties to access.</param>
            <param name="projectInstance">The ProjectInstance that serves as a backing for read-only properties.</param>
            <param name="taskItem">The backing task item to get read-only properties from.</param>
            <returns>Data model for the property page</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IValueEditor">
            <summary>
            Defines a value editor to be used on a property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IValueEditor.EditorType">
            <summary>
            Defines the MEF type, which implements IPropertyPageUIValueEditor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IValueEditor.DisplayName">
            <summary>
             Editor name to use in the property dropdown
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IValueEditor.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IValueEditor"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProviderMetadataView">
            <summary>
            The metadata that an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProvider"/> export is expected to include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProviderMetadataView.SupportsItemSpecificView">
            <summary>
            Gets a value indicating whether this provider is interested in hearing about property page displays
            for file specific views (i.e., at least one project item is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProviderMetadataView.SupportsProjectSpecificView">
            <summary>
            Gets a value indicating whether this provider is interested in hearing about property page displays
            for the project level view (i.e., a project is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProviderMetadataView.SupportsPropertySheetSpecificView">
            <summary>
            Gets a value indicating whether this provider is interested in hearing about property page displays
            for the property sheet level view (i.e., a property sheet is selected in the display)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPageUIFactoryProviderMetadataView.PageTemplates">
            <summary>
            Gets the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.PageTemplate"/> values that this factory provider can produce factories for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext2">
            <summary>
            A structure to provide input values to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider.CalculatePropertyValues(Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext,Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues)"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext2.MultipleIncludedItem">
            <summary>
            Whether this item represents a multiple included item
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext3">
            <summary>
            A structure to provide input values to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider.CalculatePropertyValues(Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext,Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues)"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext3.IsLinkedFilesOnlyFolder">
            <summary>
            Whether this item represents a linked item only folder
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext3.IsDuplicateItem">
            <summary>
            If the item is a duplicate sub item.
            Only true on sub items, not the highest priority
            multiple included item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags">
            <summary>
            A struct representing project flags. Combines the use of a flags enum for enhanced performance for
            commonly used flags and a set of strings for all other flags.
            </summary>
            <summary>
            A struct representing project flags. Combines the use of a flags enum for enhanced performance for
            commonly used flags and a set of strings for all other flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.AlwaysCopyable">
            <summary>
            Indicates that this item should always be copyable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.AlwaysInvisible">
            <summary>
            Indicates that this item should never be visible (even in Show All Files).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.AppDesignerFolder">
            <summary>
            Indicates that this node is the special project Properties folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.BrokenReference">
            <summary>
            Indicates that this item is a reference that failed to resolve.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.BubbleUp">
            <summary>
            Indicates that this item should appear near the top of its containing list with other similarly tagged nodes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.DisableAddItemFolder">
            <summary>
            Indicates that this item represents a folder on disk that cannot be a drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.DisableAddItemRecursiveFolder">
            <summary>
            Indicates that this item represents a folder on disk that cannot be a drop target.
            Sub-folders of the folder also cannot be a drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.FileOnDisk">
            <summary>
            Indicates that this item represents a file on disk (not a folder, and not a virtual node), and the file is not missing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.FileSystemEntity">
            <summary>
            Indicates that this item represents a file or folder on disk (not a virtual node).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Folder">
            <summary>
            Indicates that this item represents a folder on disk, and may contain sub-items that can be manipulated by the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.HasDependentUponMetadata">
            <summary>
            Indicates that this item contains metadata to specify its parent node, the item can be left in the folder, if the metadata cannot be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.HiddenFileSystemEntity">
            <summary>
            Indicates that the physical file or folder on the disk is hidden.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.HiddenIncludeInProjectCandidate">
            <summary>
            Indicates that this item does not exist in the project, but does exist on disk and might be included in the project later,
            but that the file entity on disk is marked as hidden in the file system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.HiddenProjectSettingsFile">
            <summary>
            Indicates that it is a project.user file or other special setting files used by the project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.HiddenProjectItem">
            <summary>
            Indicates a project item which is marked as hidden.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.IncludeInProjectCandidate">
            <summary>
            Indicates that this item does not exist in the project, but does exist on disk and might be included in the project later.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.MultipleIncludedItem">
            <summary>
            Indicates that this item is a multiple included item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.NestedProject">
            <summary>
            Indicates that this item represents a nested project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.NonMemberItem">
            <summary>
            Indicates that this item may not exist in the project but implies nothing about includability into a project.
            </summary>
            <remarks>
            Node providers can use this capability to claim responsibility for resolving a node to a path
            if path resolution fails because the node is not a project item.  SDK references are an example.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.ProjectRoot">
            <summary>
            Indicates that this node is the root project node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Reference">
            <summary>
            Indicates that this item represents a reference (e.g. Assembly, COM, or Project reference).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.ReferencesFolder">
            <summary>
            Indicates that this node is the well-known "References" folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.ResolvedReference">
            <summary>
            Indicates that this item is a reference that has been successfully resolved.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.SaveSharedFolderWithSharedItemsImportFile">
            <summary>
            Indicates that this item that represents a Shared.items file that is imported into this project
            will save the dirty contents of the shared folder along with saving the Shared.items file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.SharedFolder">
            <summary>
            Indicates that this item represents a folder on disk that is mounted inside this project as a shared folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.SharedItemsImportFile">
            <summary>
            Indicates that this item represents the Shared.items file that is imported into this project
            in order to add a shared folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.SharedProjectImportReference">
            <summary>
            Indicates that this item represents a shared project import shown along with references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.SourceFile">
            <summary>
            Indicates that this item represents a source file (e.g. *.cs, *.resx, *.bmp) that is included in the build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.VirtualFolder">
            <summary>
            Indicates that this item is a virtual folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.VisibleOnlyInShowAllFiles">
            <summary>
            Indicates that this item's visibility is paired with the Show All Files toggle switch.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.ImportedSharedItem">
            <summary>
            Indicates this item is imported to the project from a shared project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.NonFileSystemProjectItem">
            <summary>
            Indicates that is a special project item, which is not a file/folder, but is only represented this way.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.LinkedFilesOnlyFolder">
            <summary>
            Indicates that it is a folder only to contain linked items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.DuplicateItem">
            <summary>
            Indicates that it is a virtual folder underneath an item that contains its
            duplicate items tree
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.FaultTree">
            <summary>
            Marks the fault tree to be able to distinguish from other trees.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.LoadingTree">
            <summary>
            Marks the loading tree to be able to distinguish from other trees.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common">
            <summary>
            The commonly used project tree flags.
            A new prefered way is to use predefined static value fields inside <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> directly.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.AlwaysCopyable">
            <summary>
            Indicates that this item should always be copyable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.AlwaysInvisible">
            <summary>
            Indicates that this item should never be visible (even in Show All Files).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.AppDesignerFolder">
            <summary>
            Indicates that this node is the special project Properties folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.BrokenReference">
            <summary>
            Indicates that this item is a reference that failed to resolve.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.BubbleUp">
            <summary>
            Indicates that this item should appear near the top of its containing list with other similarly tagged nodes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.DisableAddItemFolder">
            <summary>
            Indicates that this item represents a folder on disk that cannot be a drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.DisableAddItemRecursiveFolder">
            <summary>
            Indicates that this item represents a folder on disk that cannot be a drop target.
            Sub-folders of the folder also cannot be a drop target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.FileOnDisk">
            <summary>
            Indicates that this item represents a file on disk (not a folder, and not a virtual node), and the file is not missing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.FileSystemEntity">
            <summary>
            Indicates that this item represents a file or folder on disk (not a virtual node).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.Folder">
            <summary>
            Indicates that this item represents a folder on disk, and may contain sub-items that can be manipulated by the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.HasDependentUponMetadata">
            <summary>
            Indicates that this item contains metadata to specify its parent node, the item can be left in the folder, if the metadata cannot be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.HiddenFileSystemEntity">
            <summary>
            Indicates that the physical file or folder on the disk is hidden.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.HiddenIncludeInProjectCandidate">
            <summary>
            Indicates that this item does not exist in the project, but does exist on disk and might be included in the project later,
            but that the file entity on disk is marked as hidden in the file system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.HiddenProjectSettingsFile">
            <summary>
            Indicates that it is a project.user file or other special setting files used by the project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.HiddenProjectItem">
            <summary>
            Indicates a project item which is marked as hidden.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.IncludeInProjectCandidate">
            <summary>
            Indicates that this item does not exist in the project, but does exist on disk and might be included in the project later.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.MultipleIncludedItem">
            <summary>
            Indicates that this item is a multiple included item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.NestedProject">
            <summary>
            Indicates that this item represents a nested project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.NonMemberItem">
            <summary>
            Indicates that this item may not exist in the project but implies nothing about includability into a project.
            </summary>
            <remarks>
            Node providers can use this capability to claim responsibility for resolving a node to a path
            if path resolution fails because the node is not a project item.  SDK references are an example.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.ProjectRoot">
            <summary>
            Indicates that this node is the root project node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.Reference">
            <summary>
            Indicates that this item represents a reference (e.g. Assembly, COM, or Project reference).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.ReferencesFolder">
            <summary>
            Indicates that this node is the well-known "References" folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.ResolvedReference">
            <summary>
            Indicates that this item is a reference that has been successfully resolved.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.SaveSharedFolderWithSharedItemsImportFile">
            <summary>
            Indicates that this item that represents a Shared.items file that is imported into this project
            will save the dirty contents of the shared folder along with saving the Shared.items file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.SharedFolder">
            <summary>
            Indicates that this item represents a folder on disk that is mounted inside this project as a shared folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.SharedItemsImportFile">
            <summary>
            Indicates that this item represents the Shared.items file that is imported into this project
            in order to add a shared folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.SharedProjectImportReference">
            <summary>
            Indicates that this item represents a shared project import shown along with references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.SourceFile">
            <summary>
            Indicates that this item represents a source file (e.g. *.cs, *.resx, *.bmp) that is included in the build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.VirtualFolder">
            <summary>
            Indicates that this item is a virtual folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.VisibleOnlyInShowAllFiles">
            <summary>
            Indicates that this item's visibility is paired with the Show All Files toggle switch.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.ImportedSharedItem">
            <summary>
            Indicates this item is imported to the project from a shared project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common.NonFileSystemProjectItem">
            <summary>
            Indicates that is a special project item, which is not a file/folder, but is only represented this way.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended">
            <summary>
            The commonly used project tree flags (placeholder for extra flags in update 1).
            Those values cannot overlap anything which has already been defined inside <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common"/> type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended.LinkedFilesOnlyFolder">
            <summary>
            Indicates that it is a folder only to contain linked items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended.DuplicateItem">
            <summary>
            Indicates that this item is a duplicate item of its parent.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.AdditionalFlags">
            <summary>
            Additional well-known flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.AdditionalFlags.FaultTree">
            <summary>
            Marks the fault tree to be able to distinguish from other trees.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.AdditionalFlags.LoadingTree">
            <summary>
            Marks the loading tree to be able to distinguish from other trees.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonFlagMapping">
            <summary>
            Gets the dictionary of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended"/> name to enum value.
            </summary>
            <remarks>
            Used over <see cref="M:System.Enum.TryParse``1(System.String,``0@)"/> for performance.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.EmptyExtendedFlags">
            <summary>
            Gets the empty extended flags set, which has the string comparer set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.commonFlags">
            <summary>
            The common flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.extendedFlags">
            <summary>
            The extended flags
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common,System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended,System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Empty">
            <summary>
            Gets the empty flags
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Count">
            <summary>
            Gets the count of flags on this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_Equality(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> for equality.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_Inequality(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> for inequality.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_GreaterThanOrEqual(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> whether one contains another.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_LessThanOrEqual(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> whether one contains another.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_GreaterThan(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> whether one contains another.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_LessThan(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> whether one contains another.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_BitwiseOr(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Unions two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_Addition(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Unions two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_Subtraction(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Exclude flags from one  <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> from another.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.op_BitwiseAnd(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags,Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Calculate the common flags between two <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Create">
            <summary>
            Returns <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Empty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Create(System.String[])">
            <summary>
            Returns a new instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Create(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common)">
            <summary>
            Returns a new instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Create(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended)">
            <summary>
            Returns a new instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Contains(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Checks if this contains all flags from <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Contains(System.String)">
            <summary>
            Checks if the flag exists on this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Contains(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common)">
            <summary>
            Checks if the flag exists on this struct
            This is an AND operation if multiple flags are provided.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Contains(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended)">
            <summary>
            Checks if the flag exists on this struct
            This is an AND operation if multiple flags are provided.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.ContainsAny(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common)">
            <summary>
            Checks if any of the provided flags exist on this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.ContainsAny(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended)">
            <summary>
            Checks if any of the provided flags exist on this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Add(System.String)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flag added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Add(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Add(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Union(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Union(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Remove(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Common)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Remove(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.CommonExtended)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Remove(System.String)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flag removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Except(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Except(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags"/> with the provided flags removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Equals(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectFaultTreeProvider">
            <summary>
            Special tree provider to provide a project tree when a regular project tree cannot be loaded correctly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectFaultTreeProvider.FaultException">
            <summary>
            The detail information on why the project failed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler">
            <summary>
            Implements the project tree manipulation actions. A tree provider like the physical project tree provider delegates its tree manipulation functions
            to those components, so a project extension can handle some special items. differently than other standard items.
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler"/> components works in the chains of responsibility pattern, so the component is responsible to delegate all
            nodes it cannot handle to the next handler in the chain.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.CanRemove(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Checks whether a given set of nodes that this tree provider created can be removed.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="nodes">The candidate sequence of nodes to remove.</param>
            <param name="deleteOptions">A value indicating whether the check is to see if the nodes can be deleted from disk.</param>
            <returns>A value indicating whether the nodes can all be removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes a given set of nodes that this tree provider created.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="nodes">The sequence of nodes to remove.</param>
            <param name="deleteOptions">A value indicating whether to remove the nodes from disk as well as the project.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.CanCopy(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Boolean)">
            <summary>
            Gets a value indicating whether a given set of nodes can be copied or moved underneath some given node.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="nodes">The set of nodes the user wants to copy or move.</param>
            <param name="receiver">
            The target node where <paramref name="nodes"/> should be copied or moved to.
            May be <c>null</c> to determine whether a given set of nodes could allowably be copied anywhere (not necessarily everywhere).
            </param>
            <param name="deleteOriginal"><c>true</c> for a move operation; <c>false</c> for a copy operation.</param>
            <returns><c>true</c> if such a move/copy operation would be allowable; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets a value indicating whether the given node is allowed to be renamed.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="node">The node that might be renamed.</param>
            <returns><c>true</c> if the node can be renamed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.RenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String)">
            <summary>
            Alters the project file and/or other files as necessary to effectively change a given node's caption.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="node">The node to rename.</param>
            <param name="value">The desired new name.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree)"/> would return <c>false</c> for this operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.GetAddNewItemDirectory(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets the directory that new files should be saved and added to the project under
            when the user initiates an Add New Item operation on a particular node in the tree.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="target">The node in the tree that is the receiver of the Add New Item operation.</param>
            <returns>
            The project-relative path under which to save the new items (empty string when the project directory itself is to be used);
            or <c>null</c> if the target node is not allowed to receive new items.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.CanIncludeItems(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Checks whether a given set of (excluded) nodes can be included into the project.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="nodes">The set of nodes that might be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.IncludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})"/></param>
            <returns><c>true</c> if these nodes can be included as project items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.IncludeItemsAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Includes a given set of nodes as project items.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="nodes">The set of nodes to "upgrade" to project items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.CanExcludeItems(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Checks whether a given set of nodes can be excluded from the project.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="nodes">The set of nodes that might be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.ExcludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})"/></param>
            <returns><c>true</c> if these nodes can be removed from the project file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler.ExcludeItemsAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Removes the given set of nodes from the project.
            </summary>
            <param name="context">It provides the project tree provider which owns the current project tree and also a way to call the next handler in the chain.</param>
            <param name="nodes">The nodes to downgrade from included to excluded items.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext">
            <summary>
            The context of any function calls in <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler"/>.  It provides a way to delegate any function to the next handler in the chain.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext.TreeProvider">
            <summary>
            Gets the project tree provider owns project tree nodes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext.SuccessorHandlerDelegator">
            <summary>
            Gets the delegator to delegate the call to the next handler in the chain.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeUniqueItemNameProvider">
            <summary>
            A provider to generate a directory or filename that would appear under a node that does not conflict with any existing files or directories on disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeUniqueItemNameProvider.GenerateUniqueItemNameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider,Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Generate a directory or filename that does not conflict with any existing files or directories on disk.
            </summary>
            <param name="treeProvider">The tree provider owns the current project tree.</param>
            <param name="parentItem">The parent node to contains the new child item.</param>
            <param name="baseName">The base file/directory name.</param>
            <param name="extension">The extension of the file, if it is needed.</param>
            <param name="alwaysUseSuffix">
            Whether an extra number is expected.
            If the caller passes in a value, the provider need honor that, otherwise, the provider can decide it based its choice.
            </param>
            <returns>A new name if the provider can handle it.  Returning null will delegate to the next provider with lower priority.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase">
            <summary>
            Bare functionality to make it easier to implement <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.CanCopy(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.CanExcludeItems(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.CanIncludeItems(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.CanRemove(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.ExcludeItemsAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.GetAddNewItemDirectory(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.IncludeItemsAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeActionHandlerBase.RenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeActionHandlerContext,Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase">
            <summary>
            Bare functionality to all project tree providers. It is being used internally for directory trees, and not expected to be used in 2nd party code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.VirtualPathPrefix">
            <summary>
            The prefix added to virtual paths to avoid conflicts with real paths
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.disposableBag">
            <summary>
            A bag of values to dispose of when this instance is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.treeUpdateSubmissionBlock">
            <summary>
            A block that receives functions that perform tree updates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.treeBlockPublic">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Tree"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.treeGenerationNumber">
            <summary>
            The number of trees produced by this instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.lastSubmittedSourceVersions">
            <summary>
            The data source versions most recently submitted to <see cref="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.SubmitTreeUpdateCoreAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions,System.Int64@,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.joinableTaskCollection">
            <summary>
            Gets the collection that all async tasks spawned by this instance belong to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.joinableTaskFactory">
            <summary>
            Gets the factory to use for all async tasks spawned by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase"/> class.
            </summary>
            <param name="threadingService">The thread handling service.</param>
            <param name="unconfiguredProject">The unconfigured project that this instance is associated with.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Tree">
            <summary>
            Gets the current <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.DataSourceKey">
            <summary>
            Get the data source version key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#IProjectValueDataSource#DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#IProjectValueDataSource#DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#IProjectValueDataSource{Microsoft#VisualStudio#ProjectSystem#IProjectTreeSnapshot}#SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#IProjectValueDataSource#SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.TreeGeneration">
            <summary>
            Gets the generation number for the most recently submitted tree change request.
            </summary>
            <remarks>
            This generation may exceed the currently published tree's generation, when a tree change
            has been requested but has not yet been processed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.ProjectFaultHandlerService">
            <summary>
            Gets the fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.UnconfiguredProject">
            <summary>
            Gets the unconfigured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.TreeFactory">
            <summary>
            Gets the tree factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.ThreadingService">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.JoinableTaskFactory">
            <summary>
            Gets the factory to use for JoinableTasks in this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.DefaultCancellationToken">
            <summary>
            Gets the cancellation token to use for tree updates when one is not given when the tree update request is submitted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.OriginalTreeGenerated">
            <summary>
            Gets a value indicating whether the initial tree has been published.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.TreeUpdateCoreConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project for which a tree is currently being constructed or mutated.
            </summary>
            <remarks>
            This property should only be called from within a project tree mutating method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CurrentCoreConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project that is currently active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.FindByPath(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.GetPath(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.RenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CanCopy(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CanRemove(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.RemoveAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.GetAddNewItemDirectory(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Microsoft#VisualStudio#ProjectSystem#IJoinableProjectValueDataSource#Join">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.JoinUpstreamDataSources(Microsoft.VisualStudio.ProjectSystem.IJoinableProjectValueDataSource[])">
            <summary>
            Joins this instance to a collection of data sources so that data sources that may require
            the main thread can acquire it if someone joins this instance.
            </summary>
            <param name="sources">The data sources for this instance.</param>
            <remarks>
            This method may be called multiple times.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.RetrieveConfiguredProjectExportsIfRequiredAsync">
            <summary>
            Retrieves <see cref="T:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Initialize">
            <summary>
            Initializes this tree provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.SubmitTreeUpdateCoreAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions,System.Int64@,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur and joins the task.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSources">The map of changed data sources and their new versions.  Updates to data sources given here will be applied even if the tree update delegate throws.</param>
            <param name="options">Optional alterations to standard handling of the tree update submission.</param>
            <param name="generationNumber">Receives the generation number that will be applied as a data source for the resulting tree.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.PrepublishMutationAsync(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports,System.Threading.CancellationToken)">
            <summary>
            Provides derived classes with an opportunity to further mutate a tree before any publish step.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.NewTree(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/>.
            </summary>
            <param name="caption">The display name for the root node in the tree.</param>
            <param name="filePath">The file path for the node.  Expected to be non-null for nodes representing file system objects not in a project.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="flags">The flags.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.NewTree(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/>.
            </summary>
            <param name="caption">The display name for the root node in the tree.</param>
            <param name="children">The children items</param>
            <param name="filePath">The file path for the node.  Expected to be non-null for nodes representing file system objects not in a project.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="flags">The flags.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.NewTree(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags},System.Boolean)">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree"/> that represents an MSBuild project item.
            </summary>
            <param name="caption">The display name of the node.</param>
            <param name="item">The item.</param>
            <param name="propertySheet">The property sheet.</param>
            <param name="browseObjectProperties">The properties to expose for this node.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="flags">The flags.</param>
            <param name="isLinked">if set to <c>true</c> [is linked].</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.NewTree(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags},System.Boolean)">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree"/> that represents an MSBuild project item.
            </summary>
            <param name="caption">The display name of the node.</param>
            <param name="item">The item.</param>
            <param name="propertySheet">The property sheet.</param>
            <param name="children">The children items</param>
            <param name="browseObjectProperties">The properties to expose for this node.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="flags">The flags.</param>
            <param name="isLinked">if set to <c>true</c> [is linked].</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.VerifyValidTree(Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Performs some validation on the tree to provide some early detection of bugs.
            </summary>
            <param name="tree">The tree to validate.</param>
            <param name="oldTree">The prior tree that is being replaced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.SubmitTreeUpdateHelperAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions,System.Int64@,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSources">The map of changed data sources and their new versions.  Updates to data sources given here will be applied even if the tree update delegate throws.</param>
            <param name="generationNumber">Receives the generation number that will be applied as a data source for the resulting tree.</param>
            <param name="options">Optional alterations to standard handling of the tree update submission.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports">
            <summary>
            Describes services collected from the active configured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports.ConfiguredProject">
            <summary>
            Gets the configured project to which this tree provider applies.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectDirectoryTreeSubscriptionService">
            <summary>
            A directory tree service to subscribe directory monitors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectDirectoryTreeSubscriptionService.SubscribeDirectoryTreeProvider(System.String)">
            <summary>
            Subscribe a directory tree for a specific folder.
            The same code must unsubscribe it, or it can cause bad memory leaks.
            </summary>
            <param name="absolutePath">This must be an absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectDirectoryTreeSubscriptionService.UnsubscribeDirectoryTreeProvider(System.String)">
            <summary>
            Unsubscribe a directory tree for a specific folder.
            </summary>
            <param name="absolutePath">This must be an absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectDirectoryTreeSubscriptionService.QueryDirectoryTreeProvider(System.String)">
            <summary>
            Get an existing directory tree, if it has been subscribed.
            This method does not subscribe to the provider, so it can be disposed at any time.
            </summary>
            <param name="absolutePath">This must be an absolute path.</param>
            <returns>A directory tree provider, if it is subscribed, otherwise null.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.PackageReference">
            <summary>
            This is the result of adding a package reference with condition
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.References.PackageReference.syncObject">
            <summary>
            Lock to acquire when lazy-initializing fields.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.References.PackageReference.metadata">
            <summary>
            Backing store for the Metadata property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.PackageReference.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.ProjectItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.PackageReference"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.PackageReference.Metadata">
            <summary>
            Get the Metadata for the msbuild's project item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.PackageReference.UnevaluatedInclude">
            <summary>
            Get the unevaluated include value for the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.PackageReference.IsAdded">
            <summary>
            States if the reference was a newly added reference or an existing one.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IPackageReference">
            <summary>
            Interface definition for resolvable package references.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IPackageReferencesService">
            <summary>
            This component handles the adding and removing of package references to managed projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IPackageReferencesService.AddAsync(System.String,System.String)">
            <summary>
            Creates an package reference and adds it to the project, or returns the existing reference if it is already present.
            </summary>
            <param name="packageIdentity"> The identity of the package reference to be added.</param>
            <param name="version"> The version of the package reference to be added.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
            <remarks>If an existing reference is returned then it is the caller's responsibility to update the version</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IPackageReferencesService.RemoveAsync(System.String)">
            <summary>
            Removes the package reference with the given identity from the package references.
            </summary>
            <param name="packageIdentity"> The identity of the package reference to be removed.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IConditionalPackageReferencesService">
            <summary>
            This service is used to add or update package references in conditioned item groups
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IConditionalPackageReferencesService.AddAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an package reference and adds it to the project, or returns the existing reference.
            If added, the package reference will be added to the first item group conditioned as Condition="'$(conditionKey)' == 'conditionValue'"
            If there is no item group with such condition, then a new item group with that condition will be created and
            the new reference will be added to the newly created item group.
            </summary>
            <param name="packageIdentity"> The identity of the package reference to be added.</param>
            <param name="version"> The version of the package reference to be added.</param>
            <param name="conditionKey"> The condition key for which the package reference applies to.</param>
            <param name="conditionValue"> The condition value the package reference applies to.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
            <remarks>If an existing reference is returned then it is the caller's responsibility to update the version</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IConditionalPackageReferencesService.RemoveAsync(System.String,System.String,System.String)">
            <summary>
            Removes the package reference with the given identity from the package references.
            </summary>
            <param name="packageIdentity"> The identity of the package reference to be removed.</param>
            <param name="conditionKey"> The condition key for which the package reference applies to.</param>
            <param name="conditionValue"> The condition value the package reference applies to.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedPackageReference">
            <summary>
            Interface definition for a project reference representing a compile-time dependency.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedPackageReference.Metadata">
            <summary>
            Gets the metadata on the item. Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.ReferencesProjectTreeCustomizablePropertyValues">
            <summary>
            The custom implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues"/> for the
            references project tree that exposes <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Caption"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.References.ReferencesProjectTreeCustomizablePropertyValues.ContractName">
            <summary>
            The contract name for exporting an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider"/> into
            the references project subtree provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ReferencesProjectTreeCustomizablePropertyValues.ExpandedIcon">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ReferencesProjectTreeCustomizablePropertyValues.Flags">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ReferencesProjectTreeCustomizablePropertyValues.Icon">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ReferencesProjectTreeCustomizablePropertyValues.Caption">
            <summary>
            Gets or sets the value which will be used in <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Caption"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IValidProjectReferenceChecker">
            <summary>
            An interface that extensions can export into the UnconfiguredProject scope to indicate whether or
            not other projects can reference them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IValidProjectReferenceChecker.CanAddProjectReferenceAsync(System.Object)">
            <summary>
            Check if this project can add a reference to a specific project.
            </summary>
            <param name="referencedProject">The IUnknown interface of the referenced project (project to be added).</param>
            <returns>A SupportedCheckResult value indicating whether or not the project reference is supported.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IValidProjectReferenceChecker.CanAddProjectReferencesAsync(System.Collections.Immutable.IImmutableSet{System.Object})">
            <summary>
            Check if this project can add the set of referenced projects.
            </summary>
            <param name="referencedProjects">An immutable set of IVsProjectReference objects.</param>
            <remarks>This is called when the user clicks Add in the reference manager.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IValidProjectReferenceChecker.CanBeReferencedAsync(System.Object)">
            <summary>
            Check if a specific project can reference this project.
            </summary>
            <param name="referencingProject">The IUnknown interface of the project wanting to reference this project.</param>
            <returns>A SupportedCheckResult value indicating whether or not the project reference is supported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.CanAddProjectReferencesResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.References.IValidProjectReferenceChecker.CanAddProjectReferencesAsync(System.Collections.Immutable.IImmutableSet{System.Object})"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.CanAddProjectReferencesResult.#ctor(System.Collections.Immutable.IImmutableDictionary{System.Object,Microsoft.VisualStudio.ProjectSystem.References.SupportedCheckResult},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.CanAddProjectReferencesResult"/> struct.
            </summary>
            <param name="individualResults">A map of references to SupportedCheckResult values.</param>
            <param name="errorMessage">An error message to show to the user. Set to null or String.Empty to show no error message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.CanAddProjectReferencesResult.IndividualResults">
            <summary>
            Gets a map of references to SupportedCheckResult values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.CanAddProjectReferencesResult.ErrorMessage">
            <summary>
            Gets an error message to show to the user; null or String.Empty to show no error message.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.SupportedCheckResult">
            <summary>
            Enum for results about whether or not something is supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.References.SupportedCheckResult.Unknown">
            <summary>
            We don't care about the action or cannot make a decision.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.References.SupportedCheckResult.NotSupported">
            <summary>
            The action is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.References.SupportedCheckResult.Supported">
            <summary>
            The action is supported
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1">
            <summary>
            Describes the result of adding a reference.
            </summary>
            <typeparam name="T">The type of reference.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.Reference">
            <summary>
            Gets the added or existing reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.Added">
            <summary>
            Gets a value indicating whether the reference was actually added to the project.
            (as opposed to being detected as already present).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.op_Equality(Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0},Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0})">
            <summary>
            Returns true if result1 == result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.op_Inequality(Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0},Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult{`0})">
            <summary>
            Returns true if result1 != result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.Equals(System.Object)">
            <summary>
            Returns true if obj equals this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.AddReferenceResult`1.GetHashCode">
            <summary>
            Returns the hashcode for the reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyCircularProjectReferenceDetectionService">
            <summary>
            An interface to the host-specific service that detects potential circular dependencies
            between projects with build dependencies on each other.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyCircularProjectReferenceDetectionService.WouldReferenceToProjectCompleteCycleAsync(System.String)">
            <summary>
            Determines whether adding a project reference directed at a given project would introduce a circular dependency.
            </summary>
            <param name="projectPath">The absolute path to another project, a reference to which is a candidate for addition to the current project.</param>
            <returns><c>true</c> if adding a reference to this project would introduce a circular dependency; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyCircularProjectReferenceDetectionService.WouldReferenceToProjectCompleteCycleAsync(System.Guid)">
            <summary>
            Determines whether adding a project reference directed at a given project would introduce a circular dependency.
            </summary>
            <param name="projectIdentifier">The project identifier to the other project.</param>
            <returns><c>true</c> if adding a reference to this project would introduce a circular dependency; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IManifestReferenceResolver">
            <summary>
            Managed version of the IVsManifestReferenceResolver interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IManifestReferenceResolver.ResolveReferenceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to resolve a deployed manifest file reference to an absolute path on disk.
            </summary>
            <param name="reference">The reference path to resolve.</param>
            <param name="referenceToFile">The path to which the reference is relative.  If <c>null</c>, the reference path is calculated relative to the project root.</param>
            <param name="cancellationToken">The cancellation token that signals the caller has lost interest in the answer.</param>
            <returns>The resolved path or <c>null</c> if the reference could not be resolved.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IReferencesUI">
            <summary>
            Provides services for invoking the user interface that offers reference management.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IReferencesUI.IsNonEmpty">
            <summary>
            Gets a value indicating whether any context providers apply to the Reference Manager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReferencesUI.ShowReferenceManagerDialog">
            <summary>
            Shows the add reference dialog and blocks until the dialog is dismissed.
            </summary>
            <remarks>
            Should only be invoked on the UI thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider">
            <summary>
            An interface that IResolvableReferencesService implementations can also implement to indicate
            they can look at a file path and add or remove a reference to it if it applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.SuggestedFileFilters">
            <summary>
            Gets the filters that should appear in an Add File Reference dialog.
            </summary>
            <value>
            A sequence of string pairs.
            The first string in a tuple is a localized caption for the filter.
            The second string in a tuple is a semicolon-delimited list of file patterns to match on.
            For example, first string "Component Files", second string: "*.dll;*.exe".
            Must never be null, but may be empty.  String values must never be null or empty.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.AddIfApplicableAsync(System.String)">
            <summary>
            Adds a reference to a given file if it applies to this project and provider.
            </summary>
            <param name="path">The path to the file to add a reference to.</param>
            <returns>
            A task whose result is the reference to the given file, if it was applicable;
            The result's reference property is <c>null</c> if the file was not applicable.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.AddFileAsync(System.String)">
            <summary>
            Adds a reference to a given file.
            </summary>
            <param name="path">The path to the file to add a reference to.</param>
            <returns>
            A task whose result is the reference to the given file.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesAddRemoveFileProvider.RemoveIfApplicableAsync(System.String)">
            <summary>
            Removes a reference that represents a given file, if it is of a matching reference type.
            </summary>
            <param name="path">The path to the file to add a reference to.</param>
            <returns>A task whose result describes the results of the removal attempt.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.ISdkReference">
            <summary>
            Interface definition for resolvable SDK references.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService">
            <summary>
            This component handles the adding and removing of SDK references to managed projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            This interface is kept around to add unique assembly reference methods, and to
            facilitate factory creation of an object that will deliver just assembly references.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.AddAsync(System.String)">
            <summary>
            Creates an SDK reference and adds it to the project, or returns the existing reference if it is already present.
            </summary>
            <param name="sdkIdentity">Identity of the SDK.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.GetUnresolvedReferenceAsync(System.String)">
            <summary>
            Gets an unresolved SDK reference.
            </summary>
            <param name="sdkIdentity">The identity of the SDK.</param>
            <returns>A <see name="IUnresolvedSdkReference"/> instance for the reference with the given name, or null if no references were found with that name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.GetResolvedReferenceAsync(System.String)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            </summary>
            <returns>
            Null if the named unresolved reference could not be found or if resolving it failed.
            </returns>
            <param name="sdkIdentity">The identity of the SDK.</param>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.ExpandReferenceAsync(Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedSdkReference)">
            <summary>
            Expands an SDK reference and returns the references it contains.
            </summary>
            <param name="sdkReference">The unresolved reference to expand.</param>
            <returns>The references the SDK reference contains.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.ExpandReferenceAsync(Microsoft.VisualStudio.ProjectSystem.References.ISdkReference)">
            <summary>
            Expands an SDK reference and returns the references it contains.
            </summary>
            <param name="sdkReference">The resolved reference to expand.</param>
            <returns>The references the SDK reference contains.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.CanResolveAsync(System.String)">
            <summary>
            Tests whether an SDK reference could be resolved if it was in this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.ContainsAsync(System.String)">
            <summary>
            Tests whether an SDK reference already belongs to this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ISdkReferencesService.RemoveAsync(System.String)">
            <summary>
            Attempts to remove all unresolved references with the given identity from the SDK.
            </summary>
            <param name="sdkIdentity">The from of the SDK being removed.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="sdkIdentity"/> is null or empty.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedSdkReference">
            <summary>
            Interface definition for a project reference representing a compile-time dependency.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedSdkReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IWinRTReferencesService">
            <summary>
            This component handles the adding and removing of WinRT references to managed projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult">
            <summary>
            Describes the result of an attempt to remove a reference from a project by the reference file path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult"/> struct.
            </summary>
            <param name="isReferenceApplicable">whether the file type matched the kind of reference this provider supports.</param>
            <param name="wasReferencePresent">whether a matching reference was found in the project.</param>
            <param name="wasReferenceRemoved">whether the matching reference was successfully removed from the project.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.IsReferenceApplicable">
            <summary>
            Gets a value indicating whether the file type matched the kind of reference this provider supports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.WasReferencePresent">
            <summary>
            Gets a value indicating whether a matching reference was found in the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.RemoveFileReferenceResult.WasReferenceRemoved">
            <summary>
            Gets a value indicating whether the matching reference was successfully removed from the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService">
            <summary>
            This component handles the adding and removing of .NET assembly references to managed projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            This interface is kept around to add unique assembly reference methods, and to
            facilitate factory creation of an object that will deliver just assembly references.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.AddAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Creates an assembly reference and adds it to the project, or returns the existing reference if it is already present.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <returns>
            The added unresolved reference, or the existing one if it exists.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.GetUnresolvedReferenceAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Gets the unresolved reference with the given assembly name.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <returns>
            Null if the named unresolved reference could not be found.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.GetResolvedReferenceAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <returns>
            Null if the named unresolved reference could not be found or if resolving it failed.
            </returns>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.CanResolveAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Tests whether an assembly reference could be resolved if it was in this project.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <remarks>
            This method does not require a reference to already exist in the project and does not add one.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.ContainsAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Tests whether an assembly reference already belongs to this project.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReferencesService.RemoveAsync(System.Reflection.AssemblyName,System.String)">
            <summary>
            Attempts to remove all unresolved references with the given name from the project.
            </summary>
            <param name="assemblyName">Name of the assembly.  May be null if <paramref name="assemblyPath"/> is not null or empty.</param>
            <param name="assemblyPath">The assembly path.  May be null if <paramref name="assemblyName"/> is not null.</param>
            <exception cref="T:System.ArgumentException">Thrown when a matching assembly reference cannot be found to remove.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReference">
            <summary>
            Interface definition for resolvable assembly references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReference.GetSpecificVersionAsync">
            <summary>
            Gets a value indicating whether the assembly reference should match only on a specific version.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IAssemblyReference.IsWinMDFileAsync">
            <summary>
            Gets a value indicating whether this reference points to a WinMD file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference">
            <summary>
            Interface definition for a project reference representing a compile-time dependency.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference.GetLinkLibraryDependencyAsync">
            <summary>
            Gets a value indicating whether to link the referenced project's .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference.GetUseLibraryDependencyInputsAsync">
            <summary>
            Gets a value indicating whether to link the referenced project's individual .obj files rather than its .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReference.GetSolutionIdentifierForReferencedProjectAsync">
            <summary>
            Gets the solution-assigned GUID for the referenced project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IComReference">
            <summary>
            Interface definition for resolvable COM references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetLocaleAsync">
            <summary>
            Gets the LCID on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetVersionAsync">
            <summary>
            Gets the version of a referenced COM component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetGuidAsync">
            <summary>
            Gets the GUID on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetWrapperToolAsync">
            <summary>
            Gets the name of the tool used to generate the COM interop assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetTypeLibraryNameAsync">
            <summary>
            Gets the simple type library name (lacks the "Interop." prefix and the ".1.0.dll" version and extension suffix).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetIsolatedAsync">
            <summary>
            Sets the Isolated metadata on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReference.GetControlFullPathAsync">
            <summary>
            Gets the full path to the ActiveX control's type library
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference">
            <summary>
            Interface definition for resolvable references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetCopyLocalAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to copy the referenced project's primary output to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetCopyLocalSatelliteAssembliesAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to copy the reference's satellite assemblies to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetNameAsync(System.String)">
            <summary>
            Sets the display name for the reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetReferenceOutputAssemblyAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether the assembly pointed to by this reference
            will actually be included on the command-line to the compiler.
            </summary>
            <value>
            <c>true</c> if reference the output assembly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.SetRequiredTargetFrameworkAsync(System.String)">
            <summary>
            Sets the required target framework.
            </summary>
            <value>The required target framework.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedReference.CanResolveAsync">
            <summary>
            Gets a value indicating whether this reference is resolvable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IReference">
            <summary>
            Interface definition for resolvable references.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetAssemblyNameAsync">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetCopyLocalAsync">
            <summary>
            Gets a value indicating whether to copy the referenced project's primary output to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetCopyLocalSatelliteAssembliesAsync">
            <summary>
            Gets a value indicating whether to copy the reference's satellite assemblies to this project's output directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetNameAsync">
            <summary>
            Gets the display name for the reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetReferenceOutputAssemblyAsync">
            <summary>
            Gets a value indicating whether the assembly pointed to by this reference
            will actually be included on the command-line to the compiler.
            </summary>
            <value>
            <c>true</c> if reference the output assembly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetRequiredTargetFrameworkAsync">
            <summary>
            Gets the required target framework.
            </summary>
            <value>The required target framework.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetDescriptionAsync">
            <summary>
            Gets the value of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/> that is embedded in the referenced assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IReference.GetFullPathAsync">
            <summary>
            The full path to whatever will be referenced at compile/link time.
            </summary>
            <value>
            For a Project Reference, this is the primary output of the project.
            For an Assembly reference, it is the referenced .DLL file.
            For a COM reference, it is the referenced interop dll.
            For an SDK reference, it is the path to the SDK's directory.
            </value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference">
            <summary>
            Interface definition for resolvable assembly references.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.GetHintPathAsync">
            <summary>
            Gets or sets the path where the assembly is expected to be reside.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.GetSDKIdentityAsync">
            <summary>
            Gets or sets the identity of the SDK where this reference resides (valid if IsWinMDFile is true)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetAssemblyNameAsync(System.Reflection.AssemblyName)">
            <summary>
            Sets the assembly name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetIsWinMDFileAsync(System.Boolean)">
            <summary>
            Sets the IsWinMDFile metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetHintPathAsync(System.String)">
            <summary>
            Sets the HintPath metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedAssemblyReference.SetSDKIdentityAsync(System.String)">
            <summary>
            Sets the SDKIdentity metadata.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference">
            <summary>
            Interface definition for a project reference representing a compile-time dependency.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
            <remarks>
            This property is here to reconcile the two versions of this property that are in base interfaces.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.SetLinkLibraryDependencyAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to link the referenced project's .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.SetUseLibraryDependencyInputsAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether to link the referenced project's individual .obj files rather than its .lib output into this project's output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedBuildDependencyProjectReference.SetSolutionIdentifierForReferencedProjectAsync(System.Guid)">
            <summary>
            Sets the solution-assigned GUID for the referenced project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference">
            <summary>
            Interface definition for an unresolved COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference.SetLocaleAsync(System.Int32)">
            <summary>
            Gets the LCID on a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference.SetWrapperToolAsync(System.String)">
            <summary>
            Gets or sets the name of the tool used to generate the COM interop assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IUnresolvedComReference.SetIsolatedAsync(System.Boolean)">
            <summary>
            Sets the Isolated metadata on a COM reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService">
            <summary>
            This component handles the adding and removing of COM references to projects.
            </summary>
            <remarks>
            Implementations of this interface should be thread safe.
            This interface is kept around to add unique COM reference methods, and to
            facilitate factory creation of an object that will deliver just COM references.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.AddAsync(System.Guid,System.Version,System.Int32,System.String)">
            <summary>
            Creates a COM reference and adds it to the project.
            </summary>
            <param name="classId">The class id.</param>
            <param name="version">The version.</param>
            <param name="localeId">The locale id.</param>
            <param name="wrapperTool">The wrapper tool.</param>
            <returns>
            The added unresolved reference, or the existing one if it exists.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.AddAsync(System.String)">
            <summary>
            Creates a COM reference to the COM server found at the specified path and adds it to the project.
            </summary>
            <param name="path">The path to the COM .dll.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.CanResolveAsync(System.String)">
            <summary>
            Determines whether the project can resolve a COM reference to a COM .dll at the specified path.
            </summary>
            <param name="path">The path to the COM library.</param>
            <returns>A value indicating whether the reference could be resolved.</returns>
            <remarks>
            This method does not require a reference to already exist in the project and does not add one.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.CanResolveAsync(System.Guid,System.Version,System.Int32,System.String)">
            <summary>
            Determines whether a reference to the described COM component can be resolved.
            </summary>
            <param name="classId">The classid of the COM component.</param>
            <param name="version">The version.</param>
            <param name="localeId">The LCID.</param>
            <param name="wrapperTool">The wrapper tool.</param>
            <returns>A value indicating whether the reference could be resolved.</returns>
            <remarks>
            This method does not require a reference to already exist in the project and does not add one.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IComReferencesService.RemoveAsync(System.Guid)">
            <summary>
            Attempts to remove all unresolved references with the given name from the project.
            </summary>
            <param name="classId">The class id.</param>
            <exception cref="T:System.ArgumentException">Thrown when a matching assembly reference cannot be found to remove.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult">
            <summary>
            Describes the result of resolving a COM reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.#ctor(System.Boolean,System.Guid,System.Version,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.Success">
            <summary>
            Gets a value indicating whether the reference resolved successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.ClassId">
            <summary>
            Gets the class ID of the resolved service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.Version">
            <summary>
            Gets the version of the COM service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.LocaleId">
            <summary>
            Gets the locale of the COM service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.op_Equality(Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult,Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult)">
            <summary>
            Returns true if result1 == result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.op_Inequality(Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult,Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult)">
            <summary>
            Returns true if result1 != result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.Equals(System.Object)">
            <summary>
            Returns true if obj equals this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.ComReferenceResolveResult.GetHashCode">
            <summary>
            Returns the hashcode for the reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService">
            <summary>
            Interface definition for providing all project references representing compile-time dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.AddAsync(System.String)">
            <summary>
            Adds a project reference to the project with the specified project path.
            </summary>
            <param name="projectPath">The project path of the project to reference.  May be absolute, or relative to this project.</param>
            <returns>The added unresolved reference, or the existing one if it exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.GetUnresolvedReferenceAsync(System.String)">
            <summary>
            Gets an unresolved project reference.
            </summary>
            <param name="projectPath">The path to the other project.  May be absolute or relative to the current project.</param>
            <returns>A <see name="IUnresolvedBuildDependencyProjectReference"/> instance for the reference with the given name, or null if no references were found with that name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.GetResolvedReferenceAsync(System.String)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            </summary>
            <returns>
            Null if the named unresolved reference could not be found or if resolving it failed.
            </returns>
            <param name="projectPath">The path to the other project.  May be absolute or relative to the current project.</param>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.CanResolveAsync(System.String)">
            <summary>
            Tests whether a project reference could be resolved if it was in this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.ContainsAsync(System.String)">
            <summary>
            Tests whether a project reference already belongs to this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IBuildDependencyProjectReferencesService.RemoveAsync(System.String)">
            <summary>
            Attempts to remove all unresolved references with the given name from the project.
            </summary>
            <param name="projectPath">The path to the other project.  May be absolute or relative to the current project.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="projectPath"/> is null or empty.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2">
            <summary>
            This component handles the adding and removing of references to projects.
            </summary>
            <typeparam name="TUnresolvedReference">The interface that unresolved references will use.</typeparam>
            <typeparam name="TResolvedReference">The interface that resolved references will use.</typeparam>
            <remarks>
            Implementations of this interface should be thread safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetUnresolvedReferenceAsync(`1)">
            <summary>
            Gets the unresolved reference from a resolved reference. Null if resolving it failed.
            </summary>
            <param name="resolvedReference">The resolved reference.</param>
            <returns>The unresolved reference.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetUnresolvedReferencesAsync">
            <summary>
            Get the unresolved references from the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetResolvedReferencesAsync">
            <summary>
            Returns an enumerable of all resolved references.
            </summary>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            References that could not be resolved will not be included in the returned enumerable.
            If the build task that resolves references fails, an empty enumerable will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.GetResolvedReferenceAsync(`0)">
            <summary>
            Gets the resolved reference for a given unresolved reference.
            Null if resolving it failed.
            </summary>
            <param name="unresolvedReference">The unresolved reference.</param>
            <remarks>
            This may cause the resolve references target to be executed in MSBuild.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.RemoveAsync(`0)">
            <summary>
            Attempts to remove this unresolved reference from the project.
            </summary>
            <param name="reference">The resolvable reference to remove. Note that it must be part of this project instance.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if the reference does not belong to this project instance or is not an unresolved resolvable reference item.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.References.IResolvableReferencesService`2.RemoveAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Attempts to atomically remove all given unresolved references from the project.
            </summary>
            <param name="references">The list of unresolved references to remove from the project.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectReloadInterceptor">
            <summary>
            Interface to intercept project reload.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectReloadInterceptor.InterceptProjectReload(System.Collections.Immutable.ImmutableArray{Microsoft.Build.Construction.ProjectPropertyElement},System.Collections.Immutable.ImmutableArray{Microsoft.Build.Construction.ProjectPropertyElement})">
            <summary>
            Intercept project reload when the project file changes.
            </summary>
            <param name="oldProperties">Before snapshot of the project properties.</param>
            <param name="newProperties">After snapshot of the project properties.</param>
            <returns>
            Return <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult.NoAction"/> to continue normal reload flow.
            Otherwise, return a specific <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult"/>.
            </returns>
            <remarks>This method is called within a write lock of the project file.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IInMemoryProjectsService">
            <summary>
            Service for checking if a project file or import file is loaded from memory only.
            When an project or import fails to automatically reload it will be added to this
            service. When it succeeds to reload it will be removed. This is used so the
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshotService"/> knows a part of the project import graph
            is in memory and to not calculate dependent file times.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IInMemoryProjectsService.IsProjectInMemoryOnly(System.String)">
            <summary>
            Checks if a project file is using in-memory XML only.
            </summary>
            <param name="projectFile">The project file or import to check.</param>
            <returns>True if in memory only, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IInMemoryProjectsService.AddProjectInMemoryOnly(System.String)">
            <summary>
            Adds a project file to the list of in-memory only files.
            </summary>
            <param name="projectFile">The project file or import to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IInMemoryProjectsService.RemoveProjectInMemoryOnly(System.String)">
            <summary>
            Removes a project file from the list of in-memory only files.
            </summary>
            <param name="projectFile">The project file or import to remove.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult">
            <summary>
            Represents the result of an attempt to silently load the project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult.NoAction">
            <summary>
            There was no action taken for the reload.
            </summary>
            <remarks>
            Used for <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectReloadInterceptor"/> to continue
            the normal reload flow.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult.ReloadCompleted">
            <summary>
            The reload has completed successfully
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult.ReloadFailedProjectDirty">
            <summary>
            A complete reload of the project is required
            beccause the project is dirty in memory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult.ReloadFailed">
            <summary>
            A complete reload of the project is required for some
            other reason - usually msbuild level reload failed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectReloadResult.NeedsForceReload">
            <summary>
            A complete reload of the project is required because there is
            a fundamental change to the project (e.g. switched from
            single-targeting to multi-targeting)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTelemetryService">
            <summary>
            Telemetry service that can be used to log telemetry events.
            Internal as we don't want anyone who depends on us to post events to our eventId.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTelemetryService.PostEventAsync(System.String,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Posts a given telemetry event path to the telemetry service session for the program.
            </summary>
            <param name="eventName">Event name.</param>
            <param name="unconfiguredProject">Optional project to collect common information about the project (e.g. project guid)</param>
            <param name="properties">Optional properties to be associated with the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ServiceProviderExtensions.GetService``2(System.IServiceProvider)">
            <summary>
            Returns the specified interface from the service. This is useful when the service and interface differ
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IVsShellServices">
            <summary>
            Provides common shell services in an agnostic manner
            </summary>
            <remarks>
            This contract defines the boundary between the VS shell system
            and the consumer to help avoid taking unnecessary assembly dependencies
            in the client.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.OnUIThread">
            <summary>
            Gets a value indicating whether the caller is executing on the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.InstallDirectory">
            <summary>
            Returns the installation directory for Visual Studio
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.SolutionFilePath">
            <summary>
            Full path to solution file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.RegistryRoot">
            <summary>
            Return the root registy location for the current VS process
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.VSHelpService">
            <summary>
            Returns the SVsHelp interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.BuildOutputWindowPane">
            <summary>
            Gets the build output window pane in Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.ProductSku">
            <summary>
            Returns the Product SKU (AppId) for this running version of VS.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSolutionBuildManagerPresent">
            <summary>
            Gets whether the Solution Build Manager is present and would therefore need to be coordinated with for builds.
            </summary>
            <remarks>
            Although we may be in VS, in the devenv.exe /upgrade scenario, now SBM is present,
            which is useful to know because we need to run design-time builds during upgrade.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSynchronousSolutionOperationInProgress">
            <summary>
            Gets a value indicating whether a synchronous solution operation (i.e. a build) is in progress.
            </summary>
            <remarks>
            The implementation is free threaded, as necessary due to callers needing to use this while on background threads.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsBuildInProgress">
            <summary>
            Determines if an MSBuild-based build is in progress in the shell (design-time or solution build).
            </summary>
            <value><c>true</c> if MSBuild-based projects are building either in-proc or out of proc.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSolutionBuildInProgress">
            <summary>
            Gets a value indicating whether the Solution Build Manager is currently executing a solution build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.BuildMaxNodeCount">
            <summary>
            Gets the number of nodes to use when building.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsLaunchInProgress">
            <summary>
            Gets a value indicating whether a launch (debug or no-debug) is in progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSolutionBuildManagerBusy">
            <summary>
            Gets a value indicating whether the Solution Build Manager is building or preparing to build.
            </summary>
            <value><c>true</c> if any projects are building and involving the solution build manager (full builds, out of proc).</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsInCommandLineMode">
            <summary>
            Gets a value indicating whether VS is running in command-line mode.
            </summary>
            <remarks>
            This has a free-threaded implementation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsInExperimentalMode">
            <summary>
            Gets a value indicating whether VS was launched with the "/rootsuffix" command line switch.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.UseEnvironment">
            <summary>
            Indicates whether the /useenv argument was passed to the VS startup
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.LogProjectLoadMessage(System.String)">
            <summary>
             Logs a message using IVsSolutionLogger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.LogProjectLoadWarning(System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Logs a warning using IVsSolutionLogger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.LogProjectLoadError(System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Logs an error using IVsSolutionLogger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.EnsureBuildManagerAccessorIsLoaded">
            <summary>
            Forces the MSBuild build manager accessor package to load if it has not been loaded already.
            </summary>
            <remarks>
            Every MSBuild-based project system must call this method at load time, prior to any
            design-time or full builds running because if the SBM fires a build event before the build manager
            accessor loads (and registers listeners for build events), it will be out of sync and cause failed builds.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.GetDialogFont(System.Boolean)">
            <summary>
            Return the font used by the shell dialogs.
            </summary>
            <param name="bold">True if the font should be forced to be bold, false is to take it as it is.</param>
            <returns>The dialog font, or null if not found.  The caller must dispose of this object when done using it.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.ShowHelpFromF1Keyword(System.String)">
            <summary>
            Shows a help page from an F1 keyword.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.ShowHelpFromUrl(System.String)">
            <summary>
            Shows a help page from a URL.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.ShowHelpFromId(System.String,System.Int32)">
            <summary>
            Shows a help page from a help file and context id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.GetDialogParentHandle">
            <summary>
            See IVsUIShell
            </summary>
            <returns>Returns the HWND that can be used to parent modal dialogs.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.EnableModeless(System.Boolean)">
            <summary>
            Enables or disables a frame's modeless dialog box.
            </summary>
            <param name="enable">True to enable modeless mode, false to disable.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.CreatePropertyGrid">
            <summary>
            Creates a property grid control for the property browser.
            </summary>
            <returns>An instance of the property grid control, or null if unable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.UpdatePropertyGrid">
            <summary>
            Forces a refresh of the property grid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.RegisterLogger(System.Int32,Microsoft.Build.Framework.ILogger)">
            <summary>
            Registers loggers for a particular build submission.
            </summary>
            <param name="submissionId">The submission for which the loggers should be registered.</param>
            <param name="logger">The logger to register.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.UnregisterLoggers(System.Int32)">
            <summary>
            Unregisters all loggers for the specified submission.
            </summary>
            <param name="submissionId">The submission id.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.UpdateCommandUI(System.Boolean)">
            <summary>
            Forces Visual Studio to flush any caches regarding which commands are available.
            </summary>
            <param name="immediate">A value indicating whether the refresh must occur immediately.  Use <c>false</c> to allow the command recalculation to be done on the next idle event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.UpdateDebugTargets">
            <summary>
            Hints to the debug target toolbar control that a change has been made.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.StartIgnoringFiles(System.String)">
            <summary>
            Ignores the specified file until the returned value is disposed.
            </summary>
            <param name="file">The file to ignore change notifications on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.StartIgnoringFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ignores the specified files until the returned value is disposed.
            </summary>
            <param name="files">The files to ignore change notifications on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSolutionBuildManagerPresentAsync">
            <summary>
            Async version of <see cref="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSolutionBuildManagerPresent"/> to get whether the Solution Build Manager is present.
            </summary>
            <returns>Task whose result is <c>true</c> if the Solution Build Manager is present; otherwise, <c>false</c>.</returns>
            <remarks>
            The difference comparing to <see cref="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSolutionBuildManagerPresent"/> is this async method will switch to main thread
            asynchronously if the internal cache has not been initialized, while <see cref="P:Microsoft.VisualStudio.ProjectSystem.IVsShellServices.IsSolutionBuildManagerPresent"/> must be
            called on main thread always.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities">
            <summary>
            A collection of useful functions operating on MSBuild projects, items, etc.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.ValueSeparatorChar">
            <summary>
            The char used to separate distinct elements in an MSBuild value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.ValueSeparatorCharArray">
            <summary>
            The semicolon as the only member of a char array.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.WildCardCharArray">
            <summary>
            Wildcards used inside msbuild items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.DefiningProjectFullPath">
            <summary>
            The built-in metadata for items whose value is the full path to the project file that actually defines the item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.ValueSeparatorCharString">
            <summary>
            The char used to separate distinct elements in an MSBuild value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.SharedImportLabel">
            <summary>
            The label to use for recognizing the ImportElement of the Shared.items file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.FileItemOnlyMetadata">
            <summary>
            The metadata which is only applicable to file based items
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.DimensionNameInConditionRegex">
            <summary>
            matches $(name) pattern
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.builtInMetadataNames">
            <summary>
            A cache of the names of built-in metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.BuiltInItemMetadataNames">
            <summary>
            Gets an enumeration of all MSBuild built-in item metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.RemoveSelf(Microsoft.Build.Construction.ProjectElement)">
            <summary>
            Removes the <paramref name="element"/> from its parent.
            If the parent is a <see cref="T:Microsoft.Build.Construction.ProjectItemGroupElement"/> that has no children after the remove,
            it is removed as well.
            </summary>
            <param name="element">The element to remove from its parent</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.UsesWildCards(System.String)">
            <summary>
            Check whether wildcards are being used by a msbuild property.
            </summary>
            <param name="value">Msbuild property value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetProjectItems(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds all items in an evaluated project with a given item type and unevaluated include.
            </summary>
            <param name="project">The MSBuild project evaluation model.</param>
            <param name="itemType"> The item type. </param>
            <param name="unevaluatedInclude"> The unevaluated value of the item. </param>
            <returns> All matching items, if there is atleast one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetNonImportedItemTypes(Microsoft.Build.Evaluation.Project)">
            <summary>
            Gets all item types that are from exclusively the project file, and not any target file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.IsBuiltInItemMetadataName(System.String)">
            <summary>
            Checks whether a given metadata name is one of MSBuild's built-in item metadata names.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetProjectItemsByUnevaluatedInclude(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds all items in an evaluated project with a given item type and unevaluated include.
            </summary>
            <param name="project">The MSBuild project evaluation model.</param>
            <param name="itemType"> The item type. </param>
            <param name="unevaluatedInclude"> The unevaluated value of the item. </param>
            <returns> All matching items, if there is atleast one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetFirstProjectItemByInclude(Microsoft.Build.Evaluation.Project,System.String,System.String,System.String)">
            <summary>
            Finds the first item in an evaluated project with a given item type and unevaluated include, and fall back to use the evaluated include value.
            </summary>
            <param name="project">The MSBuild project evaluation model.</param>
            <param name="itemType"> The item type. </param>
            <param name="unevaluatedInclude"> The unevaluated value of the item. </param>
            <param name="evaluatedInclude">The evaluated value of the item.</param>
            <returns> The first matching item, if there is at least one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetProjectItemsByEvaluatedInclude(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds all items in an evaluated project with a given item type and evaluated include.
            </summary>
            <param name="project">The MSBuild project evaluation model.</param>
            <param name="itemType"> The item type. </param>
            <param name="evaluatedInclude"> The evaluated value of the item. </param>
            <returns> All matching items, if there is atleast one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetFirstProjectItemByEvaluatedInclude(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds the first item in an evaluated project with a given item type and evaluated include (if any).
            </summary>
            <param name="project">The project.</param>
            <param name="itemType"> The item type. </param>
            <param name="evaluatedInclude"> The evaluated value of the item. </param>
            <returns> The first matching item, if there is at least one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetFirstProjectItemByEvaluatedIncludePathComparison(Microsoft.Build.Evaluation.Project,System.String,System.String)">
            <summary>
            Finds the first item in an evaluated project with a given item type and evaluated include (if any).
            Compensates for different slashes between <paramref name="evaluatedInclude"/> and the msbuild item.
            </summary>
            <param name="project">The project.</param>
            <param name="itemType"> The item type. </param>
            <param name="evaluatedInclude"> The evaluated value of the item. </param>
            <returns> The first matching item, if there is at least one, else null. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.DimensionalValuePairsToCondition(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Converts configuration dimensional value vector to a msbuild condition
            Use the standard format of
            '$(DimensionName1)|$(DimensionName2)|...|$(DimensionNameN)'=='DimensionValue1|...|DimensionValueN'
            </summary>
            <param name="dimensionalValues">vector of configuration dimensional properties</param>
            <returns>msbuild condition representation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.ConditionToDimensionValues(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}@)">
            <summary>
            Oposite to DimensionalValuePairsToCondition. Tries to parse an MSBuild condition to a dimensional vector
            only matches standard pattern:
            '$(DimensionName1)|$(DimensionName2)|...|$(DimensionNameN)'=='DimensionValue1|...|DimensionValueN'
            </summary>
            <param name="condition">msbuild condition string</param>
            <param name="dimensionalValues">configuration dimensions vector (output)</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.AreDimensionalVectorsEqual(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Check if two dimensional vectores are equal. i.e both keys nd values are the same
            </summary>
            <param name="left">dimensional property vector </param>
            <param name="right">dimensional property vector </param>
            <returns>true if the vectors are equal</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.AreConditionsEqual(System.String,System.String)">
            <summary>
            Check if two MSBuild conditions are the same. i.e all keys and values are same irrespective of the order. Returns false
            if either one of them is not in the format of an MSBuild condition.
            </summary>
            <param name="left"> Figuratively speaking, the left MSBuild condition in the comparision </param>
            <param name="right">Figuratively speaking, the right MSBuild condition in the comparision </param>
            <returns>true if the conditions are equal</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.ComposeExistsCondition(System.String)">
            <summary>
            Composes an MSBuild exists condition for a given path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.HasEffectiveCondition(Microsoft.Build.Construction.ProjectElement,System.String)">
            <summary>
            Checks if the effective condition of an element matches the given condition.
            </summary>
            <remarks> The effective condition of an element is simply the AND of its condition with
            all its ancestor's conditions. An accurate check for the effective condition involves
            building an expression tree, minimizing it and then comparing, which we don't support.
            We just assume that the matching condition is present wholly on either the element or ATLEAST one ancestor.
            For a non-empty condition, this checks to see that the element or ATLEAST
            one of its ancestors has a matching condition. In other words the element and all its ancestors
            have no condition or exactly this condition. For an empty condition, this checks to see that the element
            and ALL of its ancestors has empty condition. </remarks>
            <param name="element"> The project element. Cannot be null. </param>
            <param name="condition"> An MSBuild condition. </param>
            <returns> true, if the element has the given condition effectively. Else, false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.SetMetadata(Microsoft.Build.Construction.ProjectItemElement,System.String,System.String,System.Boolean)">
            <summary>
            Sets a piece of metadata on an MSBuild Item.
            </summary>
            <param name="itemXml">The item whose metadata is to be manipulated.</param>
            <param name="name">The name of the metadata to set.</param>
            <param name="value">The value of the metadata.  Use <see cref="F:System.String.Empty"/> to explicitly clear it.  Must not be null.</param>
            <param name="asAttribute">Set the metadata value as an attribute instead of a child XML element. Only used for new metadata.</param>
            <returns>The ProjectMetadataElement set on <paramref name="itemXml"/></returns>
            <remarks>
            If the metadata already exists on the item, the last definition of it is replaced.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.DeleteMetadata(Microsoft.Build.Construction.ProjectItemElement,System.String)">
            <summary>
            Deletes all instances of the named metadata, if it exists.
            </summary>
            <param name="itemXml">The item whose metadata is to be manipulated.</param>
            <param name="name">The name of the metadata to delete.</param>
            <returns><c>true</c> if the metadata was defined and deleted; <c>false</c> if the metadata was not defined.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetMetadataValue(Microsoft.Build.Construction.ProjectItemElement,System.String)">
            <summary>
            Gets the value of a named piece of metadata.
            </summary>
            <param name="itemXml">The item whose metadata is to be retrieved.</param>
            <param name="name">The name of the metadata whose value is to be retrieved.</param>
            <returns>The value of the named metadata; or <c>String.Empty</c> if the metadata is not defined.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetImmutableSnapshot(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Gets a snapshot of an ITaskItem.
            </summary>
            <param name="item">The item to clone.</param>
            <returns>The item and its metadata.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetImmutableSnapshot(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Gets a snapshot of a project item.
            </summary>
            <param name="item">The item to clone.</param>
            <returns>The item and its metadata.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.Extend(Microsoft.Build.Framework.XamlTypes.Rule,Microsoft.Build.Framework.XamlTypes.Rule)">
            <summary>
            Returns a new <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> with <paramref name="baseRule"/> as a starting point and then
            extended by <paramref name="extendingRule"/>. Collections and character-delimited lists are merged,
            regular strings and objects overwritten, and bools ignored.
            </summary>
            <remarks>
            Returns a new instance of <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> because the implementation has private
            collections that initialize only once, so we need a new instance to ensure they are re-created.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.GetMetadataOrEmpty(Microsoft.Build.Framework.ITaskItem,System.String)">
            <summary>
            Gets the value of the specified metadata entry, returning string.Empty if it was not successfully
            retrieved.
            </summary>
            <param name="item">The item whose metadata is to be retrieved.</param>
            <param name="name">The name of the metadata whose value is to be retrieved.</param>
            <returns>The value of the named metadata; or <see cref="F:System.String.Empty"/> if the metadata is not defined or could not be retrieved.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.UnquoteString(System.String@)">
            <summary>
            Unquote string. It simply removes the starting and ending "'", and checks they are present before.
            </summary>
            <param name="s">string tu unquote </param>
            <returns>true if string is successfuly unquoted</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MSBuildUtilities.InitializeBuiltInMetadataNames">
            <summary>
            Discovers the set of MSBuild built-in metadata names.
            </summary>
            <returns>A collection of the built-in metadata names.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler">
             <summary>
             TaskDelayScheduler
            
             Helper class which allows a task to be scheduled to run after some delay, but if a new task
             is scheduled before the delay runs out, the previous task is cancelled.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.#ctor(System.TimeSpan,Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler"/> class.
            Creates an instance of the TaskDelayScheduler. If an originalSourceToken is passed, it will be linked to the PendingUpdateTokenSource so
            that cancelling that token will also flow through and cancel a pending update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.TaskDelayTime">
            <summary>
            Delay time can be adjusted after creation - mostly useful for unit tests. Won't affect any pending task
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.PendingUpdateTokenSource">
            <summary>
            Task completetion source for cancelling a pending file update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.OriginalSourceToken">
            <summary>
            The original source token for this task
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.HasPendingUpdates">
            <summary>
            True if there are pending file changes
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.LatestScheduledTask">
            <summary>
            Holds the latest scheduled task
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.ScheduleAsyncTask(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Schedules a task to be run. Note that the returning Task represents
            the current scheduled task but not necessarily represents the task that
            ends up doing the actual work. If another task is scheduled later which causes
            the cancellation of the current scheduled task, the caller will not know
            and need to use that latest returned task instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.CancelPendingUpdates">
            <summary>
            Mechanism that owners can use to cancel pending tasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.Dispose(System.Boolean)">
            <summary>
            Cancels any pending tasks
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TaskDelayScheduler.ClearPendingUpdates(System.Boolean)">
            <summary>
            Clears the PendingUpdateTokenSource and if cancel is true cancels the token
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.PersistentDictionarySettings">
            <summary>
            A class that manages persistent storage for some VC build settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PersistentDictionarySettings.fakeRegistryHive">
            <summary>
            The dictionary used for faking get/set operations from the registry hive.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentDictionarySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.PersistentDictionarySettings"/> class
            when no VS service or registry root path are available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentDictionarySettings.SetSetting``1(System.String,System.String,``0)">
            <summary>
            Stores a value in the registry.
            </summary>
            <typeparam name="T">The type value value being set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentDictionarySettings.DeleteSetting(System.String,System.String)">
            <summary>
            Deletes a value from the registry if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentDictionarySettings.GetSetting``1(System.String,System.String,``0)">
            <summary>
            Looks up some registry value.
            </summary>
            <typeparam name="T">The type value value being read.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings">
            <summary>
            A class that manages persistent storage for some VC build settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings.registryRoot">
            <summary>
            The path to the registry key where these settngs will be stored.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings.#ctor(Microsoft.VisualStudio.ProjectSystem.IVsShellServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings"/> class.
            </summary>
            <param name="shell">The VS shell where the registry root can be retrieved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings"/> class.
            </summary>
            <param name="registryRoot">The registry key path where values should be persisted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings.SetSetting``1(System.String,System.String,``0)">
            <summary>
            Stores a value in the registry.
            </summary>
            <typeparam name="T">The type value value being set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings.DeleteSetting(System.String,System.String)">
            <summary>
            Deletes a value from the registry if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentRegistrySettings.GetSetting``1(System.String,System.String,``0)">
            <summary>
            Looks up some registry value.
            </summary>
            <typeparam name="T">The type value value being read.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.PersistentSettings">
            <summary>
            A class that manages persistent storage for build settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.VCSubPath">
            <summary>
            The registry sub-path for VC-specific settings, which also impacts other CPS projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.CpsSubPath">
            <summary>
            The registry sub-path for general CPS settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.GeneralSubPath">
            <summary>
            The registry sub-path for VS general settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.OutputWindowLogVerbosity">
            <summary>
            Gets or sets the verbosity of the log that is emitted to the Visual Studio Output window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.LogFileVerbosity">
            <summary>
            Gets or sets the verbosity of the log file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.IsDesignTimeOutputPaneEnabled">
            <summary>
            Gets or sets a value indicating whether we should log builds
            to the design-time build output window pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.LogFileEnabled">
            <summary>
            Gets or sets a value indicating whether MSBuild writes to a log file.
            </summary>
            <value>Default is true.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.LogTimingsEnabled">
            <summary>
            Gets or sets a value indicating whether MSBuild lists information about the build timings in the build log.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.LogEnvironmentVariablesEnabled">
            <summary>
            Gets or sets a value indicating whether MSBuild lists the initial value of all MSBuild properties
            into the build log.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.BuildCustomizationsSearchPath">
            <summary>
            Gets or sets the search path for build rules.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.ShowAllFilesDefault">
            <summary>
            Gets or sets the default Solution Explorer Mode setting.
            </summary>
            <remarks>
            In the registry, 1 = Show All Files, and 0 = show only files in project.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.AutoRefreshEnabled">
            <summary>
            Gets or sets a value indicating whether CPS' Solution Explorer Auto Refresh functionality is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.MaximumConcurrentFileCompiles">
            <summary>
            Gets or sets the maximum number of cores that can be used for compiling C++ files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.SetSetting``1(System.String,System.String,``0)">
            <summary>
            Stores a value in the registry.
            </summary>
            <typeparam name="T">The type value value being set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.SetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Stores a value in the registry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.DeleteSetting(System.String,System.String)">
            <summary>
            Deletes a value from the registry if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.GetSetting``1(System.String,System.String,``0)">
            <summary>
            Looks up some registry value.
            </summary>
            <typeparam name="T">The type value value being read.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PersistentSettings.GetSetting(System.String,System.String,System.Boolean)">
            <summary>
            Looks up some registry value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder">
            <summary>
            Methods for dealing with ordering of top-level elements in VC manifest and property sheets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.VCManifestOrderTemplate">
            <summary>
            The project ordering for a VC++ project manifest file captured as a skeletal MSBuild file.
            Note that a particular element in the project order template does not include a condition in
            its definition. In other words, we could have two project elements that match a top-level
            elements in the template below and yet have different conditions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.VCPropertySheetOrderTemplate">
            <summary>
            The project ordering for a VC++ property sheet file captured as a skeletal MSBuild file.
            DEV11DESIGNDISCUSSION (pavana) : Come up with a simple and elegant way for specifying ordering templates. One
            way we could solve this problem is to have a class called IProjectDefinitionOrder which contains child IProjectDefinition and each such definition
            has a method called matches. This way, we don't have to worry about doing the matching ourselves. Another idea is to just have the IProjectDefinitionOrder
            with two members - a Count member and a MatchesWithDefinition(int i).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.projectOrderTemplateElementsCache">
            <summary>
            A cache of results computed from the <see cref="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetProjectOrderTemplateElementsAsync(Microsoft.Build.Evaluation.ProjectCollection,Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.TemplateType,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)"/> method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.TemplateType">
            <summary>
            The type of template to use for determining element order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.TemplateType.Manifest">
            <summary>
            Manifest element order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.TemplateType.PropertySheet">
            <summary>
            Property sheet element order.
            </summary>
            <remarks>
            Note that the .user file is also considered a property sheet for project ordering purpose.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementAsync(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectRootElement,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.TemplateType,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)">
            <summary>
            When we need to add a top-level element to an MSBuild construction model (which is the same thing as saying an MSBuild file), this method
            returns an existing top-level element after which the given top-level element needs to be added according to project element order
            specification. If the project file is badly out of format, then the returned location would be the last top-level element that matches the type.
            </summary>
            <remarks> UNDONE (pavana): This method currently provides template services that should probably be abstracted out into its own
            component. That was not done because our current locking infrastructure does not allow us to return an MSBuild object from
            any of the component APIs (Idea: how about returning an index of a top-level element?). When this is figured out, we need to have a component interface that deals with position-according-to-template
            kind of questions for various project elements. Then we need to have a VC component which will encapsulate VC project template
            information inside it and answer question accordingly. Alternatively, if we can come up with a generic way to represent
            a project template (ideas: An MSBuild file containing just a skeleton with all labeled top level elements that can be placed
            as a file outside (not ideal since users can muck with it and bring the system down), or passed as a string reader or hardcoded
            inside the component; some other generic data structure representaton of the partial/total ordering of the top level elements),
            then we can have single base component that can be reused with minor customization for multiple project systems. </remarks>
            <param name="unconnectedElement"> An unconnected element that is sought to be added as a top-level element. </param>
            <param name="projectXml"> The project root element. </param>
            <param name="projectCollection">The ProjectCollection to use.</param>
            <param name="templateType">
            The element ordering template to use. The project elements in the manifest file are structured and ordered differently than property sheets.
            E.g. the manifest has a "ProjectConfigurations" item group as the first element whereas the property sheet does not even have such an element.
            </param>
            <param name="projectLockService">The project lock service.</param>
            <returns> A top-level element that immediately precedes the location where the given top-level element needs to be added. Null can also be returned
            when the add location is top of the MSBuild file. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetProjectOrderTemplateElementsAsync(Microsoft.Build.Evaluation.ProjectCollection,Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.TemplateType,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)">
            <summary>
            Acquires the default project element order for a given template type.
            </summary>
            <param name="projectCollection">The project collection to use for loading the project template.</param>
            <param name="templateType">The type fo template.</param>
            <param name="projectLockService">The project lock service.</param>
            <returns>A sequence of ProjectElements.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.CreateXmlReaderHelper(System.String)">
            <summary>
            Helper method to create the <see cref="T:System.Xml.XmlReader"/> based on the xml content.
            </summary>
            <devremarks>
            This was extracted in a separate method to avoid FxCop reporting false positive about the usage of <see cref="T:System.Xml.XmlReaderSettings"/> (CA3053 fails to identify that XmlResolver property is set to null).
            </devremarks>
            <param name="content">The xml content to use.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetLastTopLevelElementOfType(System.Type,Microsoft.Build.Construction.ProjectRootElement)">
            <summary>
            Retruns the last top-level element in the project xml with a given type or null if there are none.
            </summary>
            <param name="elementType"> The type we are searching for. </param>
            <param name="projectXml"> The project root element. </param>
            <returns> Last matching type element or null if there are none. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetTemplateSectionBeginAndEndMarkers(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectRootElement,Microsoft.Build.Construction.ProjectElement@,Microsoft.Build.Construction.ProjectElement@)">
            <summary>
            Gets the start and ending element of a consecutive set of top-level elements that match the passed-in template element.
            If there are multiple islands of such sections in the file, we return the markers for the last such section.
            </summary>
            <param name="projectOrderTemplateElement"> An element of a project order template. </param>
            <param name="projectXml"> The project root element. </param>
            <param name="startMarker"> The first element of the template section found. Could be null if no element of the section exists. </param>
            <param name="endMarker"> The last element of the template section found. Will be null if the start marker is null. Else, the only other
            case it can be null is when the last element in the projectXml lies in the template section we are searching for. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.MatchesWithProjectOrderTemplateElement(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)">
            <summary>
            Checks whether an element matches with an element representing a project-order-template's section.
            Matching here means that the type of the elements must match and:
            1) For import statements, the unevaluated value of the "Project" must match (although evaluated value would
            have been good, it is difficult to get).
            2) For non-import statements, the "Label" matches. Note that all non-import statements that can appear as
            top level elements in VC files have te ability to have a "Label" attribute.
            </summary>
            <param name="element"> The element to compare against the template section element. </param>
            <param name="projectOrderTemplateSectionElement"> The template section element. </param>
            <returns> True, if there is a match. False, otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetLabelOfProjectElement(Microsoft.Build.Construction.ProjectElement)">
            <summary>
            Get the label of an MSBuild project element.
            </summary>
            <param name="projectElement"> The project element. </param>
            <returns> The label. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementResult">
            <summary>
            A composite result from an asynchronous method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementResult.Result">
            <summary>
            Gets the element found by the method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectElementOrder.GetTemplateAddLocationOfTopLevelElementResult.AddTheTopLevelElementAtTemplateLocation">
            <summary>
            Gets a delegate that can create the element.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities">
            <summary>
            Project property value manipulation routines
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.NoInherit">
            <summary>
            $(NOINHERIT) keyword as known in old VC++
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.Inherit">
            <summary>
            $(INHERIT) keyword as known in old VC++
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.Quote">
            <summary>
            The " character.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.CharactersToEscapePreservingMacros">
            <summary>
            The characters that are special to MSBuild but NOT special to vcproj.
            </summary>
            <remarks>
            These are the characters we should escape when strings are set on the shim to make sure
            that old clients that are used to saving strings to vcproj files do not break because there
            are new characters that invoke special processing.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.escapingSequences">
            <summary>
            Backing store for <see cref="P:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.EscapingSequences"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.EscapingSequences">
            <summary>
            Key/value pairs where the keys are the characters that must be escaped and the values are the escaped sequences.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetItemsFromVCProjList(System.String,System.Char[])">
            <summary>
            Splits out a VCProj property value into items based on given delimiter(s).
            </summary>
            <param name="unevaluatedStringList">
            The unevaluated value from the vcproj-style property value.
            It must be either unevaluated or evaluated but still escaped
            to allow this method to guarantee proper splitting by semicolons.
            </param>
            <param name="delimiters">The delimiters that may be found in the string list to separate the items.</param>
            <returns>An enumeration of the items in the VCProj list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetItemsFromMSBuildList(System.String)">
            <summary>
            Splits out an MSBuild property value into items based on the semicolon delimiter.
            </summary>
            <param name="unevaluatedStringList">
            The unevaluated value from the MSBuild property.  It must be either unevaluated or evaluated but still escaped
            to allow this method to guarantee proper splitting by semicolons.
            </param>
            <returns>An enumeration of the items in the MSBuild list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.TrimMSBuildList(System.String)">
            <summary>
            Takes an MSBuild stringlist based on the semicolon delimiter and trims out the \r\n between each entry.
            </summary>
            <param name="unevaluatedStringList">
            The unevaluated value from the MSBuild property.  It must be either unevaluated or evaluated but still escaped
            to allow this method to guarantee proper splitting by semicolons.
            </param>
            <returns>The input string with any extra whitespace within the delimited string parts removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.AssembleMSBuildStringList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a list of strings for MSBuild property values.
            </summary>
            <param name="items">The items to include in the list.</param>
            <returns>A semicolon-delimited list, where each element has its internal semicolons escaped.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.AssembleVCProjStringList(System.Collections.Generic.IEnumerable{System.String},System.Char[])">
            <summary>
            Constructs a list of strings for shim client (vcproj) property values.
            </summary>
            <param name="items">The items to include in the list.</param>
            <param name="delimiters">Valid delimiters to use for the list.
            The first delimiter will be used in creating the list, and the others will be
            watched for and items quoted appropriately if they contain them.</param>
            <returns>A list delimited, where each element has its internal semicolons escaped.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMsBuildInheritance(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a string list property value that may contain a $(NOINHERIT) token to an MSBuild-style inheritance list.
            </summary>
            <param name="property">The property that will receive the value.</param>
            <param name="vcprojItems">The items in the list, possibly including the $(NOINHERIT).</param>
            <returns>An enumeration of items that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMsBuildInheritance(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)">
            <summary>
            Converts a string list property value that may contain a $(NOINHERIT) token to an MSBuild-style inheritance list.
            </summary>
            <param name="propertyName">The name of the property containing the value</param>
            <param name="vcprojItems">The items in the list, possibly including the $(NOINHERIT).</param>
            <param name="location">What kind of group this property is stored in.</param>
            <returns>An enumeration of items that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMsBuildInheritance(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts a string list property value that may contain $(NOINHERIT) or $(INHERIT) tokens to an MSBuild-style inheritance list.
            </summary>
            <param name="vcprojItems">The items in the list, possibly including $(INHERIT) or $(NOINHERIT).</param>
            <param name="msbuildInheritToken">The macro to use to indicate inheritance.</param>
            <returns>An enumeration of items that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetVCProjInheritance(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a string list property value that may contain an
            MSBuild-style $(InheritedPropertyName) token to an VCProj-style $(NOINHERIT) list.
            </summary>
            <param name="property">The property containing the value</param>
            <param name="msbuildItems">The items in the list, possibly including the $(InheritedPropertyName).</param>
            <returns>An enumeration of items that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetVCProjInheritance(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)">
            <summary>
            Converts a string list property value that may contain an
            MSBuild-style $(InheritedPropertyName) token to an VCProj-style $(NOINHERIT) list.
            </summary>
            <param name="propertyName">The name of the property containing the value</param>
            <param name="msbuildItems">The items in the list, possibly including the $(InheritedPropertyName).</param>
            <param name="location">What kind of group this property is stored in.</param>
            <returns>An enumeration of items that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetVCProjInheritance(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts a string list property value that may contain an
            MSBuild-style $(InheritedPropertyName) token to an VCProj-style $(NOINHERIT) list.
            </summary>
            <param name="msbuildItems">The items in the list, possibly including the $(InheritedPropertyName).</param>
            <param name="msbuildInheritToken">The macro to use to indicate inheritance.</param>
            <returns>An enumeration of items that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetVCProjInheritanceNonList(System.String,System.String)">
            <summary>
            Converts a string property value that may contain MSBuild-style %(Value) or $(Value) to
            a VCProj-style $(NOINHERIT) string
            </summary>
            <param name="msbuildValue">The value in MSBuild format</param>
            <param name="msbuildInheritToken">The inherit token to search for.</param>
            <returns>A VCProj string that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetVCProjInheritanceNonList(System.String,System.String,System.String)">
            <summary>
            Converts a string property value that may contain MSBuild-style %(Value) or $(Value) to
            a VCProj-style $(NOINHERIT) string
            </summary>
            <param name="msbuildValue">The value in MSBuild format</param>
            <param name="msbuildInheritToken">The inherit token to search for.</param>
            <param name="vcprojSeparator">Separator to use in VCProj.</param>
            <returns>A VCProj string that has any $(InheritedPropertyName) removed and $(NOINHERIT) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMsBuildInheritanceNonList(System.String,System.String)">
            <summary>
            Converts a string property value that may contain $(NOINHERIT) or $(INHERIT) tokens to an MSBuild-style inheritance value.
            </summary>
            <param name="vcprojValue">The items in the list, possibly including $(INHERIT) or $(NOINHERIT).</param>
            <param name="msbuildInheritToken">The substring for inheriting the parent value.</param>
            <returns>A string that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMsBuildInheritanceNonList(System.String,System.String,System.String)">
            <summary>
            Converts a string property value that may contain $(NOINHERIT) or $(INHERIT) tokens to an MSBuild-style inheritance value.
            </summary>
            <param name="vcprojValue">The items in the list, possibly including $(INHERIT) or $(NOINHERIT).</param>
            <param name="msbuildInheritToken">The substring for inheriting the parent value.</param>
            <param name="msbuildSeparator">Separator to use between the value and the inherited value</param>
            <returns>A string that has any $(NOINHERIT) removed and the appropriate $(PropertyName) added as necessary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.EscapePreservingMacros(System.String)">
            <summary>
            Escapes characters that did not invoke special processing in vcproj but would in msbuild.
            </summary>
            <param name="value">The string value to escape.</param>
            <returns>A version of the string that would have the same semantic meaning in msbuild as the input did in vcproj files.</returns>
            <remarks>
            <para>
            This method is <i>not</i> the same as the standard MSBuild Escape method.  This method does not
            escape all special MSBuild characters -- only the ones that are not also special characters in vcproj.
            This way, the VC shim can receive input that would have been safe in a vcproj file, including macros,
            and we can preserve the behavior of the macros while also ensuring that it is safe for msbuild.
            </para>
            <para>
            The <see cref="M:Microsoft.Build.Evaluation.ProjectCollection.Unescape(System.String)"/> may be used to reverse the effects
            of this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMSBuildInheritanceToken(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)">
            <summary>
            represent the "parent" reference token in msbuild terms - ie %(foo) or $(foo) depending on property location
            </summary>
            <param name="propertyName">name</param>
            <param name="location">location in msbuild file</param>
            <returns>parent reference token</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetValueWithoutInheritanceToken(System.String,System.String)">
            <summary>
            Gets a string that is sure to NOT have the given inheritance token.
            </summary>
            <param name="value">The starting property value, which may or may not contain the inheriting <paramref name="inheritanceToken"/></param>
            <param name="inheritanceToken">The value obtained by calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMSBuildInheritanceToken(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)"/>.</param>
            <returns>The <paramref name="value"/> with the <paramref name="inheritanceToken"/> removed if it appeared in the string before that.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetValueWithInheritanceToken(System.String,System.String)">
            <summary>
            Gets a string that is sure to have the given inheritance token.
            </summary>
            <param name="value">The starting property value, which may or may not contain the inheriting <paramref name="inheritanceToken"/></param>
            <param name="inheritanceToken">The value obtained by calling <see cref="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.GetMSBuildInheritanceToken(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.PropertyKind)"/>.</param>
            <returns>The <paramref name="value"/> with the <paramref name="inheritanceToken"/> tacked on the end if it did not appear in the string before that.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.SplitPathUnevaluatedParts(System.String,System.Func{System.String,System.String},System.String@,System.String@,System.String@)">
            <summary>
            Breaks up an unevaluated path (which may include macros) into directory, file and extension segments.
            </summary>
            <param name="unevaluatedPath">The unexpanded string that should represent a path (absolute or relative) when expanded.</param>
            <param name="expansion">The expansion function (typically MSBuild.Project.Evaluate) used to expand the unexpanded string.</param>
            <param name="unevaluatedDirectory">Receives the portion of the unexpanded string that makes up the directory.  Always ends in backslash if not empty.</param>
            <param name="unevaluatedFilename">Receives the portion of the unexpanded string that makes up the filename (omitting extension).</param>
            <param name="unevaluatedExtension">Receives the portion of the unexpanded string that makes up the extension (including period).</param>
            <exception cref="T:System.ArgumentException">Thrown if the unevaluatedPath does not expand to a path, or has a macro that expands across path component boundaries.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.TokenizeUnevaluatedString(System.String)">
            <summary>
            Breaks up an unevaluated string into macro tokens and individual characters for non-macros.
            </summary>
            <param name="unevaluatedValue">Unevaluated string.</param>
            <returns>A stream of individually evaluatable tokens.  For example, the string "foo$(bar)baz" would generate the stream: f o o $(bar) b a z.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.TokenMatcher(System.String[],System.Collections.Generic.IEnumerator{System.String},System.Func{System.String,System.String},System.StringComparison)">
            <summary>
            Matches evaluated tokens to their unevaluated counterparts, allowing for multiple
            unevaluated tokens to concatenate to form the evaluated forms.
            </summary>
            <param name="expandedTokens">A series of expanded tokens for each of which a series of unexpanded tokens should be found that evaluate to them.</param>
            <param name="unexpandedTokens">A stream of unexpanded tokens to draw on in assembling individual expanded tokens.</param>
            <param name="expansion">The expansion function (typically MSBuild.Project.Evaluate) used to expand the unexpanded string.</param>
            <param name="comparison">The nature of string comparison to use.</param>
            <returns>An array (of the same length as <paramref name="expandedTokens"/>) of unexpanded token substrings that, when evaluated, make up each of the expanded tokens provided.</returns>
            <remarks>
            Expandable tokens are assumed to be at least two characters in length.
            One character tokens will <i>not</i> be passed to the <paramref name="expansion"/> function.
            </remarks>
            <exception type="ArgumentException">Thrown when there are insufficient unexpanded tokens to make up the expanded tokens, or when the unexpanded tokens cannot map to any one individual expanded token.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.SplitRespectingQuotes(System.String,System.Char[])">
            <summary>
            Splits a string by some separator, but ignores all separators found within double-quote pairs.
            </summary>
            <param name="stringList">
            The <paramref name="delimiters"/>-delimited list of strings.
            Each element in the list MAY be quoted.
            Null is not allowed, but an empty string is.
            </param>
            <param name="delimiters">The characters used to separate the elements in the string.</param>
            <returns>An enumeration of the individual element substrings found in the list.</returns>
            <remarks>
            An empty <paramref name="stringList"/> will generate no strings.
            A non-empty <paramref name="stringList"/> with no unquoted delimiters will generate one string.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.RemoveUnescapedQuotes(System.String)">
            <summary>
            Removes any " characters that are not preceded by a backslash.
            </summary>
            <param name="value">The value to remove " characters from.  May be null or empty.</param>
            <returns>A string that is no longer than the original string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.TrimSurroundingQuotes(System.String)">
            <summary>
            Trims the surrounding quotes from a value if there are balanced, surrounding quotes on a value.
            </summary>
            <param name="value">The value to trim.</param>
            <returns>The original value, with one set of quotes trimmed from the edges if they were there.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Performs a case-insensitive string search and replacement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.CreateSafeXmlTagName(System.String)">
            <summary>
            Replaces chars invalid in xml tags names with '_'
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.VCStringUtilities.CountCharacters(System.String,System.Char)">
            <summary>
            Counts how many times a given character appears in a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator">
            <summary>
            Aggregates the command status for multiple nodes and determines a single answer to pass to Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.supported">
            <summary>
            The command is supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.enabled">
            <summary>
            The command is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.invisible">
            <summary>
            The command is invisible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.latched">
            <summary>
            The command is toggled on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.Result">
            <summary>
            Gets the aggregated status.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.Reset">
            <summary>
            Resets the aggregation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DefaultCommandStatusAggregator.AggregateStatus(Microsoft.VisualStudio.ProjectSystem.CommandStatus)">
            <summary>
            Aggregates the specified status with the previously aggregated statuses.
            </summary>
            <param name="status">The status to aggregate.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportCommandGroupAttribute">
            <summary>
            Marks a class as a MEF export and indicates what group of commands it can handle.
            </summary>
            <remarks>
            See also <see cref="T:Microsoft.VisualStudio.ProjectSystem.IAsyncCommandGroupHandler"/>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ExportCommandGroupAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ExportCommandGroupAttribute"/> class.
            </summary>
            <param name="group">The guid for the command group the handler handles.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ExportCommandGroupAttribute.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ExportCommandGroupAttribute"/> class.
            </summary>
            <param name="group">The guid for the command group the handler handles.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ExportCommandGroupAttribute.Group">
            <summary>
            The command group guid that a handler understands.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs">
            <summary>
            Provides a standard implementation of the abstract <see cref="T:Microsoft.VisualStudio.ProjectSystem.ActiveConfigurationChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.previouslyActive">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.PreviouslyActive"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.nowActive">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.NowActive"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.activeConfiguredProjectProviderDataSourceVersion">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.ActiveConfiguredProjectProviderDataSourceVersion"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs"/> class.
            </summary>
            <param name="previouslyActive">The previously active ConfiguredProject.</param>
            <param name="nowActive">The now active ConfiguredProject.</param>
            <param name="activeConfiguredProjectProviderDataSourceVersion">The datasource version of the active configured project provider.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.PreviouslyActive">
            <summary>
            Gets the previously active ConfiguredProject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.NowActive">
            <summary>
            Gets the ConfiguredProject that is now active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardActiveConfigurationChangedEventArgs.ActiveConfiguredProjectProviderDataSourceVersion">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.StandardFaultChangedEventArgs">
            <summary>
            Default event arguments for fault changed events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardFaultChangedEventArgs.isFaulted">
            <summary>
            True when the args are faulted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.StandardFaultChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.StandardFaultChangedEventArgs"/> class.
            </summary>
            <param name="isFaulted">True if the fault has changed to a faulted state</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardFaultChangedEventArgs.IsFaulted">
            <summary>
            Returns the isFaulted value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService">
            <summary>
            An UnconfiguredProject-level service that describes the current security state of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsBuildEnabled">
            <summary>
            Gets a value indicating whether building this project is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsDebugEnabled">
            <summary>
            Gets a value indicating whether debugging this project is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsDeployEnabled">
            <summary>
            Gets a value indicating whether deploying this project is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.IsPublishEnabled">
            <summary>
            Gets a value indicating whether publishing this project is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSecurityService.ResolveSecurityIssues">
            <summary>
            Invokes a dialog to present any security issues to the user
            and offer the opportunity to resolve those issues.
            </summary>
            <returns>
            A task that is completed after the user dismisses the dialog
            and (if applicable) any user actions have been applied.
            </returns>
            <remarks>
            Invoking this method does not ensure that any security issues have
            actually been resolved (as they may be up to user discretion).
            After the returned task is completed, callers
            should requery the properties on this interface to ascertain current status.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectService">
            <summary>
            The ProjectService represents the set of projects loaded into the same
            overall project collection so that they can be processed together, such as handling
            project-to-project references.
            </summary>
            <remarks>
            Implementing classes must be multi-threaded safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectService.LoadedUnconfiguredProjects">
            <summary>
            The set of projects that are currently loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectService.Services">
            <summary>
            Gets an accessor to the well known services and arbitrary extensions published to the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectService.Capabilities">
            <summary>
            Gets the project capabilities of the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectService.LoadProjectAsync(System.String,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Load an MSBuild project file into the engine.
            </summary>
            <param name="projectLocation">Name and path to the project file.</param>
            <param name="projectCapabilities">Extra project capabilities to inject.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectService.LoadProjectAsync(System.Xml.XmlReader,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Load an MSBuild project into the engine.
            </summary>
            <param name="reader">Xml reader version of the project data.</param>
            <param name="projectCapabilities">Extra project capabilities to inject.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectService.LoadProjectAsync(System.String,System.Boolean,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Load an MSBuild project file into the engine.
            </summary>
            <param name="projectLocation">Name and path to the project file.</param>
            <param name="delayAutoLoad">Whether auto load tasks should be delayed until the project is </param>
            <param name="projectCapabilities">Extra project capabilities to inject.</param>
            <remarks>Need merge it with other LoadProjectAsync when we introduce breaking changes.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectService.UnloadProjectAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Unloads the project and disposes the composition
            </summary>
            <param name="project">The unconfigured project to unload.</param>
            <remarks>
            Note that this is a ref counted object and therefore the unload only occurs when all
            who have requested a load then unload the project.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel">
            <summary>
            Threading models supports by CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel.Multithreaded">
            <summary>
            All project access is allowed only on MTA threads, events are often raised concurrently, and all CPS services are available.
            All project types except Visual C++ uses this threading model.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectServiceAccessor">
            <summary>
            An interface that can be used to obtain a specified version of the Common Project System.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectServiceAccessor.GetProjectService(Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel)">
            <summary>
            Gets a specified version of the Common Project System.
            </summary>
            <param name="threadingModel">Determines the threading model used by the CPS instance to obtain.</param>
            <returns>The CPS service instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectServices">
            <summary>
            An interface that provides access to common project service scoped services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.ThreadingPolicy">
            <summary>
            Gets the thread handling policy for this project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.FaultHandler">
            <summary>
            Gets the project fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectServices.ProjectReloader">
            <summary>
            Gets the project reloader service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource">
            <summary>
            An aggregate cancellation token that is cancelled only when all other tokens are cancelled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.CancelHandlerDelegate">
            <summary>
            A singleton delegate to reuse to avoid excessive memory allocations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.tokenSource">
            <summary>
            The source of the aggregate cancellation token.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.notifyRegistrations">
            <summary>
            The set of cancellation handler registrations to dispose of when we've lost interest.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.tokenCount">
            <summary>
            The number of remaining tokens to cancel before cancelling the aggregate token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource"/> class.
            </summary>
            <param name="tokenCount">The number of cancellations that must be received to cancel the union token.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.Token">
            <summary>
            Gets the aggregate cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.Dispose">
            <summary>
            Disposes of managed resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.CreateUnionCancellationToken(System.Collections.Generic.IReadOnlyCollection{System.Threading.CancellationToken})">
            <summary>
            Returns a cancellation token that is canceled when and if the entire set of cancellation tokens specified are canceled.
            </summary>
            <param name="tokens">The set of cancellation tokens.</param>
            <returns>The joint cancellation token.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.Dispose(System.Boolean)">
            <summary>
            Disposes of managed resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.CancelHandler(System.Object)">
            <summary>
            The method invoked when any cancellation token is cancelled.
            </summary>
            <param name="value">The instance of this class that should have its count decremented.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AggregateCancellationTokenSource.Decrement">
            <summary>
            Responds to a single token's cancellation, and
            cancels the union token if this was the last cancellation required.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1">
            <summary>
            A readonly collection that takes an ICollection for its constructor's parameter instead of an IList.
            </summary>
            <typeparam name="T">The type of item stored in the collection.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.wrappedCollection">
            <summary>
            The collection this read-only view wraps.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.Count">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.IsReadOnly">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.Add(`0)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.Clear">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.Contains(`0)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.Remove(`0)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlyRealCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1">
            <summary>
            an IReadOnlySet implementation that wraps a set
            </summary>
            <typeparam name="T">element type of readonly set</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1.set">
            <summary>
            underlying set
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1.Count">
            <summary>
            Gets the size of the set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1.Contains(`0)">
            <summary>
            check whether given data exist in the set
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1.GetEnumerator">
            <summary>
            return enumerator over the set
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            return non-generic version of the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.RollingLog`1">
            <summary>
            A thread-safe, enqueue-only queue that automatically discards older items.
            Used to help in bug investigations to find out what has happened recently.
            </summary>
            <typeparam name="T">The type of elements stored in the queue.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.queue">
            <summary>
            The underlying queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.capacity">
            <summary>
            The maximum length of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.RollingLog`1"/> class.
            </summary>
            <param name="capacity">The maximum capacity of the queue, beyond which the oldest elements are dropped.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the log is enabled.
            If not enabled, enqueued items will be dropped.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.GetEnumerator">
            <summary>
            Enumerates the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.RollingLog`1.Enqueue(`0)">
            <summary>
            Adds an item to the head of the queue.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2">
            <summary>
            Dictionary that does not prevent keys from being garbage collected.
            </summary>
            <typeparam name="TKey">Type of key, without the WeakReference wrapper.</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <remarks>
            See also Microsoft.Build.Collections.WeakDictionary.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.dictionary">
            <summary>
            The dictionary used internally to store the keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.keyComparer">
            <summary>
            The key comparer to use for hashing and equality checks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.capacity">
            <summary>
            The dictionary's initial capacity, and the capacity beyond which we will resist to grow
            by scavenging for collected keys first.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2"/> class.
            </summary>
            <param name="keyComparer">The key comparer to use. A <c>null</c> value indicates the default comparer will be used.</param>
            <param name="capacity">The initial capacity of the dictionary. Growth beyond this capacity will first induce a scavenge operation.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.Count">
            <summary>
            Count of entries.
            Some entries may represent keys or values that have already been garbage collected.
            To clean these out call <see cref="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.Scavenge"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.Item(`0)">
            <summary>
            Obtains the value for a given key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.ContainsKey(`0)">
            <summary>
            Whether there is a key present with the specified key
            </summary>
            <remarks>
            As usual, don't just call Contained as the wrapped value may be null.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value for the provided key.
            Returns true if the key is found, otherwise false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.Remove(`0)">
            <summary>
            Removes an entry with the specified key.
            Returns true if found, false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.Scavenge">
            <summary>
            Remove any entries from the dictionary that represent keys
            that have been garbage collected.
            </summary>
            <returns>The number of entries removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.Clear">
            <summary>
            Empty the collection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.GetEnumerator">
            <summary>
            See IEnumerable&lt;T&gt;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1">
            <summary>
            Strongly typed wrapper around a weak reference that caches
            the target's hash code so that it can be used in a hashtable.
            </summary>
            <typeparam name="T">Type of the target of the weak reference</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.hashcode">
            <summary>
            Cache the hashcode so that it is still available even if the target has been
            collected. This allows this object to be still found in a table so it can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.weakReference">
            <summary>
            Backing weak reference
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.notSoWeakTarget">
            <summary>
            Some of our instances are around just to do existence checks, and don't want
            to allocate WeakReference objects as they are short-lived.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.#ctor(`2,System.Collections.Generic.IEqualityComparer{`2},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.Target">
            <summary>
            Target wrapped by this weak reference.  Null if the target has already been garbage collected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.IsAlive">
            <summary>
            Whether the target has not been garbage collected yet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.GetHashCode">
            <summary>
            Returns the hashcode of the wrapped target
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReference`1.Equals(System.Object)">
            <summary>
            Compares two structures.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1">
            <summary>
            Equality comparer for weak references that actually compares the
            targets of the weak references
            </summary>
            <typeparam name="T">Type of the targets of the weak references to be compared</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.underlyingComparer">
            <summary>
            Comparer to use if specified, otherwise null
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1"/> class
            with an explicitly specified comparer.
            </summary>
            <param name="comparer">
            Comparer may be null, in which case the default comparer for the type
            will be used.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.GetHashCode(Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary{`0,`1}.WeakReference{`2})">
            <summary>
            Gets the hashcode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary`2.WeakReferenceEqualityComparer`1.Equals(Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary{`0,`1}.WeakReference{`2},Microsoft.VisualStudio.ProjectSystem.WeakKeyDictionary{`0,`1}.WeakReference{`2})">
            <summary>
            Compares the weak references for equality
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SetEqualityComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.ISet`1"/> equality comparer that uses
            <see cref="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})"/> to determine equality.
            </summary>
            <typeparam name="T">The type of element contained in the sets.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SetEqualityComparer`1.instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SetEqualityComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SetEqualityComparer`1"/> class.
            </summary>
            <devremarks>
            Suppresses the default constructor so this class is a singleton.
            </devremarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SetEqualityComparer`1.Default">
            <summary>
            Gets the singleton instance to this equality comparer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SetEqualityComparer`1.Equals(System.Collections.Immutable.IImmutableSet{`0},System.Collections.Immutable.IImmutableSet{`0})">
            <summary>
            Checks equality between two sets.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SetEqualityComparer`1.GetHashCode(System.Collections.Immutable.IImmutableSet{`0})">
            <summary>
            Gets the hashcode for a set.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.StringComparers">
            <summary>
            StringComparers to use for common scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.ProjectPropertyName">
            <summary>
             Gets the comparer to use for MSBuild project property names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.ProjectPropertyValue">
            <summary>
             Gets the comparer to use for MSBuild project property values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.File">
            <summary>
             Gets the comparer to use for file paths.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.MSBuildTargetName">
            <summary>
            Gets the comparer to use for MSBuild target names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.MSBuildItemName">
            <summary>
             Gets the comparer to use for MSBuild item names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.MSBuildItemType">
            <summary>
             Gets the comparer to use for MSBuild item types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.RuleName">
            <summary>
            Gets the equality comparer to use for Rule names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StringComparers.Capability">
            <summary>
            Gets the equality comparer to use for capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonProperties">
            <summary>
            Read/write of properties that have well-known names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProperties.DebuggerSymbolsPathProperty">
            <summary>
            The name of the property that the symbols search path is persisted to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProperties.CommonPropertySerializer">
            <summary>
            A cached read-only copy of the serializer for common types in this file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CommonProperties.CommonTypeSerializer">
            <summary>
            An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer"/> that can only serialize/deserialize the
            <see cref="P:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer.SimpleTypes"/> as well as the common types defined in CommonTypes.cs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProperties.InitializeCommonTypeSerializer">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.PropertySerializer"/> with mappings for all the common types in this file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonProperties.VCCLCompilerTool">
            <summary>
            Property names and access for the C++ compiler tool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProperties.VCCLCompilerTool.GetProjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider)">
            <summary>
            Gets the IProjectProperties to access project-level settings for the C++ compiler tool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProperties.VCCLCompilerTool.GetProjectPropertyReader(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider)">
            <summary>
            Gets the property reader for project-level C++ compiler tool settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonProperties.RemoteDebugger">
            <summary>
            Properties used by the Remote debugger
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonProperties.RemoteDebugger.DebuggerConnectionType">
            <summary>
            The two different connection types usable by the remote debugger.
            </summary>
            <remarks>
            Designed to resemble Microsoft.VisualStudio.VCProjectEngine.RemoteDebuggerType.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProperties.RemoteDebugger.DebuggerConnectionType.Authentication">
            <summary>
            aka DbgRemote
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProperties.RemoteDebugger.DebuggerConnectionType.NoAuthentication">
            <summary>
            aka DbgRemoteTCPIP
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonProperties.MpiDebugger">
            <summary>
            Properties used by the MPI debugger
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonProperties.MpiDebugger.NetworkSecurityMode">
            <summary>
            The methods the MPI debugger will allow for connecting the the remote debuggee.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProperties.MpiDebugger.NetworkSecurityMode.LocalSubnet">
            <summary>
            Accept only connections on the same subnet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProperties.MpiDebugger.NetworkSecurityMode.SpecifiedRange">
            <summary>
            Accept only connections on IP addresses fitting the NetworkFilterProperty value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProperties.MpiDebugger.NetworkSecurityMode.AnyAddress">
            <summary>
            Accept connections from any IP address.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonSharedProjectFileCategoryName">
            <summary>
            Common Category Name strings for use with the ISharedProjectFileRegistrationService.
            </summary>
            <remarks>
            Note: This is not claiming to be the complete list of all possible Category Names.
                  Category names are extensible.
            IN VISUAL STUDIO: Category Names are any string defined by a project system used for classifying
            the role of imported project files. Category names do not need to be predifined at install time;
            they can be genrated at runtime. Projects that use dynamic category names (e.g. based on the names of
            project configurations (e.g. "Debug|x86"), are expected to call RegisterDynamicSharedProjectFileCategoriesAsync.
            This method allows the system to cleanup of stale persisted file use category data. If the project uses
            such names that are user defined and can be added/removed, then it should call RegisterDynamicSharedProjectFileCategoriesAsync
            after it has finished calling RegisterSharedProjectFilesAsync for all of its categories.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonSharedProjectFileCategoryName.SharedItemsImports">
            <summary>
            Category Name to be used when registering Mercury Shared.items files with the ISharedProjectFileRegistrationServcie.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2">
            <summary>
            Provides simple dictionary equality checks.
            </summary>
            <typeparam name="TKey">The type of key in the dictionaries to compare.</typeparam>
            <typeparam name="TValue">The type of value in the dictionaries to compare.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2.defaultInstance">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2.Instance"/> static property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2.Instance">
            <summary>
            Gets a dictionary equality comparer instance appropriate for dictionaries that use the default key comparer for the <typeparamref name="TKey"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2.Equals(System.Collections.Immutable.IImmutableDictionary{`0,`1},System.Collections.Immutable.IImmutableDictionary{`0,`1})">
            <summary>
            Checks two dictionaries for equality.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DictionaryEqualityComparer`2.GetHashCode(System.Collections.Immutable.IImmutableDictionary{`0,`1})">
            <summary>
            Calculates a hash code for a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DisposableBag">
            <summary>
            A class that tracks a set of disposable objects and a cancellation token for purposes
            of managing the lifetime of a version-sync'd block join.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DisposableBag.cts">
            <summary>
            The source of the cancellation token exposed to the join.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DisposableBag.autoDisposeRegistration">
            <summary>
            The registration that automatically disposes this object when and if the cancellation token is ever canceled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DisposableBag.cancellationToken">
            <summary>
            A token based on the <see cref="F:Microsoft.VisualStudio.ProjectSystem.DisposableBag.cts"/>, so that it's accessible even after disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DisposableBag.disposables">
            <summary>
            The set of disposable blocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposableBag.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DisposableBag"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DisposableBag.IsDisposed">
            <summary>
            A value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DisposableBag.CancellationToken">
            <summary>
            Gets the cancellation token that signals the user has terminated the link.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposableBag.Dispose">
            <summary>
            Disposes of all contained links and signals the cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposableBag.AddDisposable(System.IDisposable)">
            <summary>
            Adds a value to be disposed of when this collection is disposed of or canceled.
            </summary>
            <param name="disposable">The value to be disposed of later. May be <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposableBag.AddDisposables(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Adds values to be disposed of when this collection is disposed of or canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposableBag.RemoveDisposable(System.IDisposable)">
            <summary>
            Removes a disposable value from the collection.
            </summary>
            <param name="disposable">The value to remove. May be <c>null</c>.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DisposableValue`1">
            <summary>
            A disposable wrapper with some value.
            </summary>
            <typeparam name="T">The type of value to make available.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DisposableValue`1.disposableValue">
            <summary>
            Extra data to dispose of with the value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposableValue`1.#ctor(`0,System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DisposableValue`1"/> class.
            </summary>
            <param name="value">The value to expose to the caller.</param>
            <param name="disposableValue">An additional value to dispose of when this instance is disposed of.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DisposableValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposableValue`1.Dispose">
            <summary>
            Disposes of the value and any related data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DisposeAction">
            <summary>
            An IDisposable that executes a delegate on disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DisposeAction.disposeAction">
            <summary>
            The delegate to invoke upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposeAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DisposeAction"/> class.
            </summary>
            <param name="disposeAction">The delegate to invoke upon disposal. Only ever executed once. Can be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DisposeAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities">
            <summary>
            This class contains methods that are useful for error checking and validation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.ReportDeprecatedMethod(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is deprecated.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
            <returns>Nothing actually as it always throws, but this allows callers to more easily handle the undetected return path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.ReportDeprecatedMethodNoThrow(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is deprecated, but does not throw.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.ReportNotYetImplementedMethod(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is no longer implemented.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
            <returns>Nothing actually as it always throws, but this allows callers to more easily handle the undetected return path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.ReportNotYetImplementedMethodNoThrow(System.String)">
            <summary>
            Reports that the caller has invoked a method or property that is no longer implemented, but does not throw.
            </summary>
            <param name="fullMethodName">The name of the method or property.</param>
            <remarks>Have a seperate method rather than calling so as not to corrupt the stack trace w/ util methods.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.VerifyReportWarning(System.Boolean,System.String,System.Object[])">
            <summary>
            Reports the warning condition with the message provided, formatted with the provided args, if the condition is false.
            </summary>
            <param name="condition">Assertion condition on whether to report or not, false indicating to report.</param>
            <param name="unformattedMessage">The warning message to be reported.</param>
            <param name="args">Formatted args for the message.</param>
            <returns>The condition parameter.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.VerifyThrow(System.Boolean,System.String)">
            <summary>
            Delegates to <see cref="M:Microsoft.Assumes.True(System.Boolean,System.String)"/>.  Here for FileMatcher.cs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.VerifyThrow(System.Boolean,System.String,System.Object[])">
            <summary>
            Delegates to <see cref="M:Microsoft.Assumes.True(System.Boolean,System.String,System.Object[])"/>.  Here for FileMatcher.cs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.IsCriticalException(System.Exception)">
            <summary>
            Returns true for critical exceptions, which are better be rethrown
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.RethrowIfCritical(System.Exception)">
            <summary>
            Rethrows an exception if it is critical.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorUtilities.AddStackTrace(System.Collections.Generic.IList{System.Diagnostics.StackFrame})">
            <summary>
            Given a stack trace, create a debug message for the stack trace.
            </summary>
            <param name="frames">Frames that make up the stack trace, in order.</param>
            <returns>The formatted debug string</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions">
            <summary>
            Extension methods that add options to the C# "await" keyword.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.StateInvokerDelegate">
            <summary>
            A singleton delegate that invokes its state object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.GetResultAssumeCompleted``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Gets the result of a task that should *always* have already completed, or else
            we'll throw an internal error exception.
            </summary>
            <typeparam name="T">The type of value returned by the task.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.ExecuteAsync(Microsoft.Build.Execution.BuildSubmission,Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService)">
            <summary>
            Begins an asynchronous build via MSBuild.
            </summary>
            <param name="submission">The submission to begin execution.</param>
            <param name="threadingService">The threading service.</param>
            <returns>The task that will return build results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.RegisterNoThrowOnDispose(System.Threading.CancellationToken,System.Action)">
            <summary>
            Registers a callback to be invoked when and if a token is canceled,
            protecting against <see cref="T:System.ObjectDisposedException"/> in the event that the
            <see cref="T:System.Threading.CancellationTokenSource"/> has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.RegisterNoThrowOnDispose(System.Threading.CancellationToken,System.Action{System.Object},System.Object)">
            <summary>
            Registers a callback to be invoked when and if a token is canceled,
            protecting against <see cref="T:System.ObjectDisposedException"/> in the event that the
            <see cref="T:System.Threading.CancellationTokenSource"/> has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.ResumeWith(System.Threading.Tasks.Task,System.Threading.Tasks.TaskScheduler,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Prepares to await on a task, where its continuation may execute with specific options and/or on a specific scheduler.
            </summary>
            <param name="predecessorTask">The awaitable task.</param>
            <param name="scheduler">The scheduler to execute the continuation on.  If null, the task scheduler for the current sync context is used if available, otherwise the default one.</param>
            <param name="options">The options to apply to the continuation.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.ResumeWith``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskScheduler,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Prepares to await on a task, where its continuation may execute with specific options and/or on a specific scheduler.
            </summary>
            <typeparam name="TResult">The value returned by the awaitable task.</typeparam>
            <param name="predecessorTask">The awaitable task.</param>
            <param name="scheduler">The scheduler to execute the continuation on.  If null, the task scheduler for the current sync context is used if available, otherwise the default one.</param>
            <param name="options">The options to apply to the continuation.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.GetContinuationScheduler(System.Boolean)">
            <summary>
            Gets the scheduler to use for an await continuation.  Must be called directly from the OnCompleted method
            -- NOT from within a delegate that executes in another context.
            </summary>
            <param name="considerCurrentScheduler">Whether to use the current TaskScheduler instead of the default one, if no sync context is available.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.SetBuildComplete(Microsoft.Build.Execution.BuildSubmission)">
            <summary>
            Marks the task created for a BuildSubmission as completed.
            </summary>
            <param name="submission">The build submission that has completed.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskSchedulerResumeWithAwaitable">
            <summary>
            An awaitable object that schedules tasks on a specific task scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskSchedulerResumeWithAwaitable.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskSchedulerResumeWithAwaitable.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskSchedulerResumeWithAwaitable"/> struct.
            </summary>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskSchedulerResumeWithAwaitable.GetAwaiter">
            <summary>
            Gets an awaitable object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.#ctor(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable"/> struct.
            </summary>
            <param name="predecessor">The task that is being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.GetAwaiter">
            <summary>
            Gets an awaitable object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.#ctor(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions"/> struct.
            </summary>
            <param name="predecessor">The task that is being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.IsCompleted">
            <summary>
            Gets a value indicating whether the awaitable task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.OnCompleted(System.Action)">
            <summary>
            Schedules some action to execute after the awaitable task has completed.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable.TaskAwaiterWithOptions.GetResult">
            <summary>
            Gets the result of the awaited task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
            <typeparam name="TResult">The type of value returned by the awaited task.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.#ctor(System.Threading.Tasks.Task{`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1"/> struct.
            </summary>
            <param name="predecessor">The task being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.GetAwaiter">
            <summary>
            Gets an awaitable object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions">
            <summary>
            An awaitable object that schedules tasks as continuations, on a specific scheduler with specific flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.scheduler">
            <summary>
            The scheduler to use for continuation tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.options">
            <summary>
            Options to apply to OnCompleted tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.predecessorTask">
            <summary>
            The task that is being awaited on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.#ctor(System.Threading.Tasks.Task{`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions"/> struct.
            </summary>
            <param name="predecessor">The task that is being awaited on.</param>
            <param name="options">Options to apply to OnCompleted tasks.</param>
            <param name="scheduler">The scheduler to use for continuation tasks.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.IsCompleted">
            <summary>
            Gets a value indicating whether the awaitable task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.OnCompleted(System.Action)">
            <summary>
            Schedules some action to execute after the awaitable task has completed.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AwaitExtensions.TaskResumeWithAwaitable`1.TaskAwaiterWithOptions.GetResult">
            <summary>
            Gets the result of the awaited task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions">
            <summary>
            Extension methods for various collections
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all the elements in a sequence to the set.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.GetOrCreate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            get or create dictionary value
            </summary>
            <typeparam name="T1">key type</typeparam>
            <typeparam name="T2">value type</typeparam>
            <param name="dictionary">dictionary this extension method applies to</param>
            <param name="key">dictionary key</param>
            <param name="creator">factory lambda that creates initial value</param>
            <returns>correspoinding value for the key</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
            return index of given item in the list
            </summary>
            <typeparam name="T">type of list item</typeparam>
            <returns>-1 when it can't find the node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Tries to divine the number of elements in a sequence without actually enumerating each element.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable source.</param>
            <param name="count">Receives the number of elements in the enumeration, if it could be determined.</param>
            <returns><c>true</c> if the count could be determined; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.TryGetCount``1(System.Collections.IEnumerable,System.Int32@)">
            <summary>
            Tries to divine the number of elements in a sequence without actually enumerating each element.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable source.</param>
            <param name="count">Receives the number of elements in the enumeration, if it could be determined.</param>
            <returns><c>true</c> if the count could be determined; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.AddTo``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder,``0,``1)">
            <summary>
            Extension method which allows you to chain together adds to an <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Builder"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.SetAll``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Sets all the values from <paramref name="source"/> on <paramref name="target"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Merge two enumerables together into a new enumerable, resolving conflicts by taking the value from <paramref name="source"/>
            </summary>
            <typeparam name="TSource">The resulting type of the list</typeparam>
            <typeparam name="TKey">The key to merge on.</typeparam>
            <param name="target">The target to merge items into</param>
            <param name="source">The source to merge items from. Conflicts are taken from this list.</param>
            <param name="keySelector">Determines what key to merge upon</param>
            <returns>
            A new enumberable with elements from <paramref name="target"/>
            and <paramref name="source"/>
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.Merge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Merge two enumerables together into a new enumerable.
            </summary>
            <typeparam name="TSource">The source type of the list</typeparam>
            <typeparam name="TKey">The key to merge on.</typeparam>
            <typeparam name="TResult">The resulting type of the list.</typeparam>
            <param name="target">The target to merge items into</param>
            <param name="source">The source to merge items from.</param>
            <param name="keySelector">Determines what key to merge upon</param>
            <param name="resultSelector">Determines what element to take upon a key conflict</param>
            <returns>
            A new enumberable with elements from <paramref name="target"/>
            and <paramref name="source"/>
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.ReverseList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Enumerates the list in reverse
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CollectionExtensions.AsReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Convert a ICollection to IReadOnlyCollection
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods">
            <summary>
            Extension methods usable by the Platform project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.AsReadOnly``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Returns a readonly (active) view of a set.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1">
            <summary>
            A read-only view of a set.
            </summary>
            <typeparam name="T">The type of element in the set.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.backingSet">
            <summary>
            The set that is being presented as readonly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.Count">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.IsReadOnly">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.Add(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.Clear">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.Contains(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.Remove(`0)">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.GetEnumerator">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonPlatformExtensionMethods.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ISet
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions">
            <summary>
            Extension methods for TPL Dataflow blocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.String[])">
            <summary>
            Links a block to receive design-time build information regarding a specified set of targets.
            </summary>
            <param name="snapshotBlock">The block on the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshotService"/> service to subscribe to.</param>
            <param name="target">The target block to receive messages.</param>
            <param name="linkOptions">Options to pass into the LinkTo method.</param>
            <param name="buildTargets">The MSBuild targets that should be included in the design-time build.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshot}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Links a block to receive design-time build information regarding a specified set of targets.
            </summary>
            <param name="snapshotBlock">The block on the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectBuildSnapshotService"/> service to subscribe to.</param>
            <param name="target">The target block to receive messages.</param>
            <param name="linkOptions">Options to pass into the LinkTo method.</param>
            <param name="buildTargets">The MSBuild targets that should be included in the design-time build.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Links a block to receive a cross-sectional slice of project data, including detailed descriptions of what changed between snapshots, as described by specified rules.
            </summary>
            <param name="differencingSnapshotBlock">The broadcasting block that produces the messages.</param>
            <param name="target">The block to receive the broadcasts.</param>
            <param name="linkOptions">Link options to include in the request.</param>
            <param name="initialDataAsNew">
            If <c>true</c>, causes the first message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first message at its default value of describing the project and its true prior state.
            </param>
            <param name="suppressVersionOnlyUpdates">A value indicating whether to prevent messages from propagating to the target block if no project changes are include dother than an incremented version number.</param>
            <param name="ruleNames">The names of the rules that describe the project data the caller is interested in.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Links a block to receive a cross-sectional slice of project data, including detailed descriptions of what changed between snapshots, as described by specified rules.
            </summary>
            <param name="differencingSnapshotBlock">The broadcasting block that produces the messages.</param>
            <param name="target">The block to receive the broadcasts.</param>
            <param name="linkOptions">Link options to include in the request.</param>
            <param name="initialDataAsNew">
            If <c>true</c>, causes the first message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first message at its default value of describing the project and its true prior state.
            </param>
            <param name="suppressVersionOnlyUpdates">A value indicating whether to prevent messages from propagating to the target block if no project changes are include dother than an incremented version number.</param>
            <param name="ruleNames">The names of the rules that describe the project data the caller is interested in.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkTo(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Collections.Immutable.IImmutableSet{System.String}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean,System.Boolean)">
            <summary>
            Links a block to receive cross-sectional slices of project data,
            including detailed descriptions of what changed between snapshots,
            as described by rules specified by another source block.
            </summary>
            <param name="differencingSnapshotBlock">The broadcasting block that produces the messages.</param>
            <param name="target">The block to receive the broadcasts.</param>
            <param name="ruleNamesBlock">A source block that supplies the names of the rules that describe the project data the caller is interested in.</param>
            <param name="linkOptions">Link options to include in the request.</param>
            <param name="initialDataAsNew">
            If <c>true</c>, causes the first message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first message at its default value of describing the project and its true prior state.
            </param>
            <param name="suppressVersionOnlyUpdates">A value indicating whether to prevent messages from propagating to the target block if no project changes are include dother than an incremented version number.</param>
            <returns>An object representing the link that can be disposed of to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.AsBlock(System.Action{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a Dataflow block that can process project subscription updates.
            </summary>
            <param name="action">The delegate to invoke for each project subscription update.</param>
            <param name="blockOptions">Any applicable block options.  May be null.</param>
            <returns>The initialized block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.AsAsyncBlock(System.Func{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate},System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a Dataflow block that can process project subscription updates.
            </summary>
            <param name="action">The delegate to invoke for each project subscription update.</param>
            <param name="blockOptions">Any applicable block options.  May be null.</param>
            <returns>The initialized block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CreateProjectTransformBroadcastBlock``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions,System.Func{``1,``1})">
            <summary>
            Creates a transform-broadcast block pair that operates on some project-derived value.
            </summary>
            <typeparam name="TSource">The type of value produced by the source block.</typeparam>
            <typeparam name="TTarget">The type of value produced by the specified function.</typeparam>
            <param name="sourceBlock">The source block.</param>
            <param name="production">The function to execute to produce the next value for the block.</param>
            <param name="transformBlockOptions">Options to pass into the transformation block.</param>
            <param name="cloningFunction">An optional delegate to use for cloning the value so that each consumer gets its own copy.</param>
            <returns>A broadcast block that produces a value each time the project is updated.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafePublicize``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0})">
            <summary>
            Wraps a TPL dataflow block such that it is safe to hand out references to consumers
            in a way that disallows them faulting and completing the block.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
            <param name="block">The block to wrap.</param>
            <returns>The safe wrapper.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafePublicize``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},System.String)">
            <summary>
            Wraps a TPL dataflow block such that it is safe to hand out references to consumers
            in a way that disallows them faulting and completing the block.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
            <param name="block">The block to wrap.</param>
            <param name="name">The name of the block.</param>
            <returns>The safe wrapper.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CaptureAndApplyExecutionContext``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Wraps a delegate in a repeatably executable delegate that runs within an ExecutionContext captured at the time of *this* method call.
            </summary>
            <typeparam name="TInput">The type of input parameter that is taken by the delegate.</typeparam>
            <param name="function">The delegate to invoke when the returned delegate is invoked.</param>
            <returns>The wrapper delegate.</returns>
            <remarks>
            This is useful because Dataflow doesn't capture or apply ExecutionContext for its delegates,
            so the delegate runs in whatever ExecutionContext happened to call ITargetBlock.Post, which is
            never the behavior we actually want. We've been bitten several times by bugs due to this.
            Ironically, in Dataflow's early days it *did* have the desired behavior but they removed it
            when they pulled it out of the Framework so it could be 'security transparent'.
            By passing block delegates through this wrapper, we can reattain the old behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CaptureAndApplyExecutionContext``2(System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Wraps a delegate in a repeatably executable delegate that runs within an ExecutionContext captured at the time of *this* method call.
            </summary>
            <typeparam name="TInput">The type of input parameter that is taken by the delegate.</typeparam>
            <typeparam name="TOutput">The type of value returned by the async delegate, excluding its wrapper Task.</typeparam>
            <param name="function">The delegate to invoke when the returned delegate is invoked.</param>
            <returns>The wrapper delegate.</returns>
            <remarks>
            This is useful because Dataflow doesn't capture or apply ExecutionContext for its delegates,
            so the delegate runs in whatever ExecutionContext happened to call ITargetBlock.Post, which is
            never the behavior we actually want. We've been bitten several times by bugs due to this.
            Ironically, in Dataflow's early days it *did* have the desired behavior but they removed it
            when they pulled it out of the Framework so it could be 'security transparent'.
            By passing block delegates through this wrapper, we can reattain the old behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CaptureAndApplyExecutionContext``1(System.Func{``0})">
            <summary>
            Wraps a delegate in a repeatably executable delegate that runs within an ExecutionContext captured at the time of *this* method call.
            </summary>
            <typeparam name="TOutput">The type of value returned by the async delegate, excluding its wrapper Task.</typeparam>
            <param name="function">The delegate to invoke when the returned delegate is invoked.</param>
            <returns>The wrapper delegate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.PostWithoutPropagatingContext``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,Microsoft.VisualStudio.ProjectSystem.IProjectLockService)">
            <summary>
            Posts a message to a dataflow block without allowing project locks leak to this block or the blocks downstream.
            </summary>
            <typeparam name="T">The message to be posted.</typeparam>
            <param name="target">The block to receive the message.</param>
            <param name="message">The message to send to the block.</param>
            <param name="projectLockService">The project lock service.</param>
            <returns>A value indicating whether the block accepted the message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.AsBlock``1(System.Action{``0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a Dataflow target block that can process messages.
            </summary>
            <typeparam name="T">The type of message this block receives.</typeparam>
            <param name="action">The delegate to invoke for each incoming message.</param>
            <param name="blockOptions">Any applicable block options.  May be null.</param>
            <returns>The initialized block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Links a dataflow block to some delegate.
            </summary>
            <typeparam name="T">The type of message published by the block.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkToPropagateFaults``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
            <summary>
            Links one block to another such that faults propagate but successful completions do not.
            </summary>
            <typeparam name="T">The type of value propagated between the blocks.</typeparam>
            <param name="sourceBlock">The source block.</param>
            <param name="targetBlock">The target block.</param>
            <returns>A value whose cancellation should terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafePublicize``2(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
            <summary>
            Wraps a TPL dataflow block such that it is safe to hand out references to consumers
            in a way that disallows them faulting and completing the block.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
            <typeparam name="TForward">The type of message produced by the block to forward links to.</typeparam>
            <param name="block">The block to wrap.</param>
            <param name="forwardLinksTo">
            A block that should receive replicated link requests (to null blocks)
            for every link request to <paramref name="block"/>.
            This is useful when there is special info passed to the source block by way of the
            DataflowLinkOptions instance that should impact the internal block.
            </param>
            <returns>The safe wrapper.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SmoothDisruptionDiff(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate},Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate})">
            <summary>
            Manufactures an artificial diff if we're currently straddling some disruptive change such as a switching of the active configured project.
            </summary>
            <returns>The new IProjectSubscriptionUpdate instance with the smooth diff.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.AreSameRuleSnapshots(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot)">
            <summary>
            Compares two project rule snapshots to see whether the project data is exactly the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CreateDisruptionDiffSmoothingTransformBlock">
            <summary>
            Creates a transform block that passes the message coming in from the configured project through to the listener,
            manufacturing an artificial diff if we're currently straddling some disruptive change such as a switching of the active configured project.
            </summary>
            <returns>
            A propagation block, that also implements IReceivableSourceBlock.
            </returns>
            <remarks>
            A disruption is signaled by posting a null message to this block.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkToChanges``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{System.Tuple{``0,``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Links a receiver to a source block such that it receives notifications initially, and when changes are broadcast.
            </summary>
            <typeparam name="T">The type of value produced by the source block.</typeparam>
            <param name="source">The source block.</param>
            <param name="receiver">The delegate to invoke with the old and new values.  The initial old value will be <c>default(T)</c></param>
            <param name="equalityComparer">An optional equality comparer to use when determining whether an interesting change has occurred.</param>
            <returns>A link to dispose of to terminate notifications.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CompleteIfNotNull``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
            <summary>
            Completes a block if it is not null.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CreateSelfFilteringTransformBlock``2(System.Func{``0,System.Collections.Generic.KeyValuePair{``1,System.Boolean}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a transformation block around a function where the function may elect to not produce any output for a given input.
            </summary>
            <typeparam name="TIn">The type of the input message.</typeparam>
            <typeparam name="TOut">The type of the output message.</typeparam>
            <param name="transform">The transformative function.  It should return the result, and a boolean indicating whether to produce that output from the block.</param>
            <param name="blockOptions">The options for the block.</param>
            <returns>The transforming, filtering block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CreateSelfFilteringTransformBlock``2(System.Func{``0,System.Threading.Tasks.Task{System.Collections.Generic.KeyValuePair{``1,System.Boolean}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a transformation block around a function where the function may elect to not produce any output for a given input.
            </summary>
            <typeparam name="TIn">The type of the input message.</typeparam>
            <typeparam name="TOut">The type of the output message.</typeparam>
            <param name="transform">The transformative function.  It should return the result, and a boolean indicating whether to produce that output from the block.</param>
            <param name="blockOptions">The options for the block.</param>
            <returns>The transforming, filtering block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.Transform``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Func{``0,``1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
            <summary>
            Creates a source block that produces a transformed value for each value from original source block.
            </summary>
            <typeparam name="TIn">The type of value produced by <paramref name="source"/>.</typeparam>
            <typeparam name="TOut">The type of value produced by <paramref name="transform"/>.</typeparam>
            <param name="source">The source block whose values are to be transformed.</param>
            <param name="transform">The function to execute on each value from <paramref name="source"/>.</param>
            <param name="blockOptions">Dataflow block options</param>
            <returns>The transformed source block and a disposable value that terminates the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.Clone(System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            Clones a TPL dataflow link options instance, allowing for ICloneable
            derived-types.
            </summary>
            <param name="linkOptions">The instance to clone.</param>
            <returns>The cloned instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CreateLinkedRemoveVersionTransform``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}})">
            <summary>
            Creates a block that repeats a source block's value but without the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1"/> wrapper.
            </summary>
            <typeparam name="T">The type of the inner value.</typeparam>
            <param name="sourceBlock">The block that produces version-wrapped values.</param>
            <returns>A block that produces non-version-wrapped values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.HandleFaultedCompletionAsync(System.Threading.Tasks.Dataflow.IDataflowBlock,Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Adds a continuation to completion of <paramref name="block"/> that reports any faults.
            Safe to forget this task.
            </summary>
            <param name="block">The block to report faults for</param>
            <param name="faultService">The fault service to report faults to</param>
            <param name="severity">The severity of the failure if one occurs.</param>
            <param name="project">The project related to the failure, if applicable and if an error occurs.</param>
            <returns>A task </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.CollectTaskFaults(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a set of all the exceptions from the specified tasks if they are faulted.
            </summary>
            <param name="tasks">An array of tasks, which may or may not have faulted.</param>
            <returns>A set of exceptions from whichever tasks have faulted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.TryFindMinimum``1(``0[],System.Collections.Generic.IComparer{``0},System.Int32@)">
            <summary>
            Looks for some minimum version among an array of values that satisfy transitivity rules.
            </summary>
            <typeparam name="T">The type of value in the array.</typeparam>
            <param name="values">The array of values.</param>
            <param name="comparer">The comparer to use between values.</param>
            <param name="minimumIndex">Receives the index of (one of) the minimum value(s).</param>
            <returns>A value indicating whether a minimum exists.  False if all values are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.ApplyLinkOptionsIfNotNullTo(System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            If a link options template is not null, applies its settings to another instance of link options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2">
            <summary>
            An ISourceBlock{T} that blocks calls to Complete and Fault.
            </summary>
            <typeparam name="T">The type of message produced by the block.</typeparam>
            <typeparam name="TForward">The type of message produced by the block to forward links to.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.inner">
            <summary>
            The wrapped source block.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.forwardLinksTo">
            <summary>
            The source block to forward links to.  May be null.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.name">
            <summary>
            Optional name for debugging.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.#ctor(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{`0},System.Threading.Tasks.Dataflow.ISourceBlock{`1},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.Completion">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.Complete">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.Fault(System.Exception)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.TryReceive(System.Predicate{`0},`0@)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.SafeSourceBlockWrapper`2.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
            See <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkCollection">
            <summary>
            Tracks a subscription to the broadcast block.  The result of the LinkTo method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkCollection.underlyingLinks">
            <summary>
            The underlying TPL Dataflow link.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkCollection.#ctor(System.Collections.Immutable.IImmutableSet{System.IDisposable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkCollection"/> class.
            </summary>
            <param name="underlyingLinks">The underlying TPL links created to propagate the data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkCollection.Dispose">
            <summary>
            Destroys this link and decrements target reference counts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.DataflowExtensions.LinkCollection.UpdateLinks(System.Collections.Immutable.IImmutableSet{System.IDisposable})">
            <summary>
            Updates the set of links to dispose of.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions">
            <summary>
            Extension methods usable by image monikers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.SyncObject">
            <summary>
            Lock that protects access to <see cref="F:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.InteropToProjectMap"/>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.InteropToProjectMap">
            <summary>
            An interning collection of <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.ToInteropType(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Converts a ProjectImageMoniker to an interop ImageMoniker.
            </summary>
            <param name="moniker">The moniker to convert</param>
            <returns>An interop image moniker</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.ToProjectSystemType(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Converts an interop ImageMoniker to a ProjectImageMoniker.
            </summary>
            <param name="interopMoniker">The moniker to convert</param>
            <returns>A project image moniker</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.InteropMonikerEqualityComparer">
            <summary>
            Class used for performant comparisons of interop ImageMonikers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.InteropMonikerEqualityComparer.Equals(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ImageMonikerExtensions.InteropMonikerEqualityComparer.GetHashCode(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.LazyExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Lazy`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.LazyExtensions.EvaluateNow``1(System.Lazy{``0})">
            <summary>
            Forces immediate evaluation of a lazily-initialized value.
            </summary>
            <typeparam name="T">The type of value to initialize</typeparam>
            <param name="lazyValue">The lazy value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.LazyExtensions.DisposeIfCreated``1(System.Lazy{``0})">
            <summary>
            Disposes some lazily-initialized object if it was initialized and if its value is disposable.
            </summary>
            <typeparam name="T">The type of lazily-initialized object.</typeparam>
            <param name="lazyInitializedField">The lazy initialized field.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.LazyExtensions.DisposeIfCreated``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
            <summary>
            Disposes some lazily-initialized object if it was initialized and if its value is disposable.
            </summary>
            <typeparam name="T">The type of lazily-initialized object.</typeparam>
            <param name="lazyInitializedField">The lazy initialized field.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IReadOnlySet`1">
            <summary>
            readonly view of a set
            </summary>
            <typeparam name="T">set's element type</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IReadOnlySet`1.Contains(`0)">
            <summary>
            check whether given data exist in the set
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.NameCollisionException">
            <summary>
            Exception class for problems renaming a file/folder to an existing one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NameCollisionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NameCollisionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NameCollisionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NameCollisionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.NameCollisionException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.PathHelper">
            <summary>
            Helper class used for common path operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PathHelper.NonFastPathCharacters">
            <summary>
            Wildcard characters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.PathHelper.InvalidPathChars">
            <summary>
            Cache of the list of invalid path characters, because this method returns a clone (for security reasons)
            which can cause significant transient allocations
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.Combine(System.String,System.String)">
            <summary>
            A wrapper around Path.Combine() to handle cases where the original method could not handle.
            </summary>
            <param name="basePath">An absolute path to use as the root if <paramref name="path"/> is relative.</param>
            <param name="path">A relative or absolute path, that needs to be absolute.</param>
            <returns>
            A absolute path.
            </returns>
            <Remarks>
            This function needs to remain fast as it can be called many times.
            </Remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRooted(System.String,System.String)">
            <summary>
            Generates an absolute path from a base path and another path.
            </summary>
            <param name="basePath">
            An absolute path to use as the root if <paramref name="path"/> is relative.
            IMPORTANT: if basePath is a directory, it must end with a directory separator character or else
            it will be treated like a filename and discarded.
            </param>
            <param name="path">A relative or absolute path, that needs to be absolute.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="basePath"/> argument is not an absolute path.</exception>
            <returns>
            A normalized, absolute path.  A path with relative parents (i.e. c:\temp\tmp\..\a.txt) will never be returned.
            Not necessarily canonical, in that the file casing of the path is not guaranteed to be consistent.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRelative(System.String,System.String)">
            <summary>
            given the absolute location of a file, and a disc location, returns relative file path to that disk location.
            </summary>
            <param name="basePath">
            The base path we want to relativize to. Must be absolute.
            Should <i>not</i> include a filename as the last segment will be interpreted as a directory.
            </param>
            <param name="path">
            The path we need to make relative to basePath.  The path can be either absolute path or a relative path in which case it is relative to the base path
            </param>
            <returns>
            The relative path (can be the full path when no relationship exists).
            If <paramref name="basePath"/> and <paramref name="path"/> are equivalent, the empty string is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRootedAndRelative(System.String,System.String,System.String@,System.String@)">
            <summary>Takes a path that may be relative or absolute, classifies it and creates its counterpart.</summary>
            <param name="path">The absolute or relative path.</param>
            <param name="basePath">
            An absolute path to use as the root if <paramref name="path"/> is relative.
            IMPORTANT: if basePath is a directory, it must end with a directory separator character or else
            it will be treated like a filename and discarded.
            </param>
            <param name="relativePath">Receives the relative path.</param>
            <param name="rootedPath">Receives the absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.ClassifyProjectPath(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String@,System.String@)">
            <summary>Takes a path that may be relative or absolute, classifies it and creates its counterpart.</summary>
            <param name="unconfiguredProject">The unconfigured project that forms the assumed base of a relative path.</param>
            <param name="path">The absolute or relative path.</param>
            <param name="projectRelativePath">Receives the relative path.</param>
            <param name="rootedPath">Receives the absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsOutsideProjectDirectory(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets a value indicating whether a given path lies inside or outside the project directory cone.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">A project-relative or absolute path. Must not be null. If empty, the method will always return <c>false</c>.</param>
            <returns><c>true</c> if <paramref name="path"/> represents a location outside the project directory; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsOutsideProjectDirectory(System.String,System.String)">
            <summary>
            Gets a value indicating whether a given path lies inside or outside the project directory cone.
            </summary>
            <param name="projectRootDirectory">The project's root directory. Must not be null or empty.</param>
            <param name="path">A project-relative or absolute path. Must not be null. If empty, the method will always return <c>false</c>.</param>
            <returns><c>true</c> if <paramref name="path"/> represents a location outside the project directory; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.TryMakeRelativeToProjectDirectory(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String@)">
            <summary>
            Gets the project-relative path for a given absolute (or project-relative) path.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">A project-relative or absolute path.</param>
            <param name="relativePath">Set to a project-relative path if <paramref name="path"/> is relative to the project directory, otherwise null.</param>
            <returns><c>true</c> if <paramref name="path"/> represents a location within the project directory; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRelative(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets the project-relative path for a given absolute (or project-relative) path.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">The path to create the project-relative path from.</param>
            <returns>A project-relative path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRelative(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a set of file paths where all file paths are project-relative paths (unless they can only be expressed as absolute paths).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRelative(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Returns a set of file paths where all file paths are project-relative paths (unless they can only be expressed as absolute paths).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRooted(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets the absolute path for a given project-relative (or absolute) path.
            </summary>
            <param name="unconfiguredProject">The project whose full path is used in the calculation.</param>
            <param name="path">The path to create the absolute path from.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.EnsureTrailingSlash(System.String)">
            <summary>
            Make sure there is a trailing directory separator.
            </summary>
            <param name="path">directory path</param>
            <returns>directory path with trailing slash</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.CanonicalizeItemInFolder(System.String,System.String)">
            <summary>
            Retrieves the canonical name for a folder or file in a directory. Throws if the item does not exist.
            </summary>
            <param name="directoryName">The directory the item is in.</param>
            <param name="itemName">The name of the item.</param>
            <returns>The full path of the item with the last portion canonicalized.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.GetValueAsPathAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty,System.Boolean,System.Boolean)">
            <summary>
            Gets a named property's value.
            Non-existent properties result in an empty string.
            </summary>
            <param name="property">The property whose value is being sought.</param>
            <param name="shouldBeQuoted">
            If true, the double quote character will be added to the beginning and end of the string (even if it was otherwise empty).
            If false, any leading/trailing double quote characters will be removed from the value before it is returned.
            </param>
            <param name="required">Whether an exception should be thrown if the property does not exist or has an empty value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsFileNameValid(System.String,System.Boolean)">
            <summary>
            Checks if a file name is valid.
            </summary>
            <param name="fileName">The file name to check.</param>
            <param name="useVsInvalidCharacters">Whether or not to use the Visual Studio set of invalid characters when checking.</param>
            <returns>True if the file name is valid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsSamePath(System.String,System.String,System.Boolean)">
            <summary>
            Compares two paths to see if they refer to the same path.
            </summary>
            <param name="file1">The first path.</param>
            <param name="file2">The second path.</param>
            <param name="caseSensitive">When true, the string comparison will be case senstive. Default is false.</param>
            <returns><c>true</c> if the two paths match.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.EnsureDirectoryForFileExists(System.String)">
            <summary>
            Ensures that the path to a file is fully created so that a file might be created within it without error.
            </summary>
            <param name="pathToFile">The path to a file that may not exist already.  If a relative path is given it will be based on the process current directory.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.EndsWithTrailingSlash(System.String)">
            <summary>
            True if path ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>. False otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.RemoveTrailingSlashes(System.String)">
            <summary>
            Removes trailing slashes from a path.
            </summary>
            <param name="path"> The path. </param>
            <returns> The path with all trailing slashes removed. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRootedIfNoMacros(System.String,System.String)">
            <summary>
            Given a relative or full path without macros, returns the full path. If the path contains
            macros, then it is returned unprocessed.
            </summary>
            <param name="baseDirectory"> The rooted base directory. It has to be a directory path and not a file path. </param>
            <param name="relativeOrFullPath"> The relative or full path, with or without macros. </param>
            <returns> The full path or the path itself (if it contains macros). </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.MakeRelativeIfNoMacros(System.String,System.String)">
            <summary>
            Given a relative or full path without macros, returns the relative path. If the path contains
            macros, then it is returned unprocessed.
            </summary>
            <param name="baseDirectory"> The rooted base directory. It has to be a directory path and not a file path. </param>
            <param name="relativeOrFullPath"> The relative or full path, with or without macros. </param>
            <returns> The relative path or the path itself (if it contains macros). </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsRooted(System.String)">
            <summary>
            Tests a path to see if it is absolute or not.  More reliable that Path.IsPathRooted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.VerifyThrowArgumentPathMustBeRooted(System.String,System.String)">
            <summary>
            Throws an ArgumentException if the given path is not an absolute path,
            non-blank and non-null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.GetExtensionWithoutPeriod(System.String)">
            <summary>
            Returns the extension (without the ".") for a path. Returns null, if the input is null. It
            returns empty if the input path does not have an extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.ChangeFileName(System.String,System.String)">
            <summary>
            Changes the filename in a given path.
            </summary>
            <param name="path">An absolute path.</param>
            <param name="newFileName">The new filename to set on the path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the file extension of a given file or path.
            </summary>
            <param name="path">An absolute path to change, which may or may not have an extension already.  Must not be null or empty.</param>
            <param name="newExtension">The new extension to apply to the file.  This may or may not include a preceding period.  Must not be null or empty.</param>
            <returns>The original path, with the altered extension.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.TryGetWildcardPattern(System.String,Microsoft.Build.Shared.FileMatcher.FileMatchPattern@)">
            <summary>
            Check whether a give pattern contains wildcard, if it is, create the wildcard pattern to match files.
            Pattern is case insensitive.
            </summary>
            <param name="wildcardPattern">A DOS-like file wildcard pattern.  For examples: *.cpp, c:\temp\*.cpp.</param>
            <param name="pattern">The resulting file match pattern</param>
            <remarks>
            Please note that wildcards can appear in directory names or file names, but cannot cross directory boundaries.
            For instance, c:\*\d.txt will match c:\f\d.txt, but not c:\f\a\d.txt.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.ContainsMacros(System.String)">
            <summary>
            Does a simple check to determine if the given path contains any
            MSBuild macros.
            </summary>
            <comment> For now, I am assuming macro = MSBuild property. This method can be
            suitable grown to includeitem type metadata, etc. </comment>
            <param name="path"> The path. </param>
            <returns> true, if it contains macros, else false. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.CreateUriFromPath(System.String)">
            <summary>
            Helper function to create Uri object form path.
            </summary>
            <param name="path">path string</param>
            <returns>uri object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.CleanupLocalFilePath(System.String)">
            <summary>
            Fixes common problems with local paths like double-backslash.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsFilePartInvalid(System.String,System.Boolean)">
            <summary>
            Checks whether a file part contains invalid characters. The file part can be any part of a non rooted path.
            </summary>
            <param name="filePart">The file part to check.</param>
            <param name="useVsInvalidCharacters">Whether or not to use the Visual Studio set of invalid characters when checking.</param>
            <returns>True if the path is invalid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsStringAllGivenCharacter(System.Char,System.String)">
            <summary>>
            Checks if the string is all the given character.
            </summary>
            <remarks>This is used to check that file names are not all '.' or ' '.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.PathNeedsNormalization(System.String)">
            <summary>
            A few fast checks that determine whether normalization of a path is warranted.
            </summary>
            <param name="path">A non-empty path.</param>
            <returns><c>true</c> if normalization is likely needed; <c>false</c> if normalization doesn't appear to be needed.</returns>
            <remarks>
            In the interest of executing very fast (since this method is used in fast-or-slow-path checks)
            this method by no means is comprehensive, but it should catch the common causes for needing normalization.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.NormalizePathSeparators(System.String)">
            <summary>
            Replaces all unexpected instances of multiple path separators with single separators.
            </summary>
            <remarks>
            This allows for protocols, rooted drives, and network paths.
            This function does not check if the path is actually correct. It only cares about removing excess path separators.
            No need to check if normalization is needed first, implementation allocates new memory only if needed.
            </remarks>
            <param name="path">The path to be normalized. Can be null or empty string.</param>
            <returns>The normalized path. If no changes are needed, it returns the original path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsInvalidPath(System.String)">
            <summary>
            A help method to detect invalid path of non file system msbuild items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsNormalizedRelativePath(System.String)">
            <summary>
            Check whether a path is a simple normalized relative path, which can be handled more efficiently in the code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsExtended(System.String)">
            <summary>
            Returns true if the path uses the canonical form of extended syntax ("\\?\" or "\??\"). If the
            path matches exactly (cannot use alternate directory separators) Windows will skip normalization
            and path length checks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IsValidDriveChar(System.Char)">
            <summary>
            Returns true if the given character is a valid drive letter
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PathHelper.IndexOfLastNonSlash(System.String)">
            <summary>
            Returns the last index in a path that is not a '/' or '\'.
            Returns -1 if the path only contains slashes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1">
            <summary>
            A broadcast block that produces values on demand and publishes them when significant changes between values are observed.
            </summary>
            <typeparam name="T">The type of value produced by this block.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.syncProduction">
            <summary>
            The function that executes the value calculation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.broadcastBlock">
            <summary>
            The broadcast block to publish data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.initialNotificationRaised">
            <summary>
            Whether we have published the first version of data.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.lastValue">
            <summary>
            The latest data published.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.equalityComparer">
            <summary>
            The comparer to check whether the data is the same as the pervious one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.requestVersion">
            <summary>
            Track the number of refresh requests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.inProcessing">
            <summary>
            Whether we have a task to do the calculations, otherwise, we need start one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.isCompleted">
            <summary>
            Whether the data flow block is completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.threadingService">
            <summary>
            Project Threading service
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.scheduler">
            <summary>
            Task scheduler
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.#ctor(System.Func{`0},System.Collections.Generic.IEqualityComparer{`0},System.Boolean,Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,System.Threading.Tasks.TaskScheduler,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1"/> class.
            </summary>
            <param name="production">The function that calculates the value.</param>
            <param name="equalityComparer">A comparer to use between two calculated values to ascertain whether they are sufficiently different to publish a new value.</param>
            <param name="initialRefresh">A value indicating whether to immediately queue a production.</param>
            <param name="threadingService">The threading service to control thread context.</param>
            <param name="scheduler">An optional scheduler to use for executing the dataflow block.</param>
            <param name="name">A name used inside dataflow to help to diagnose problems.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Collections.Generic.IEqualityComparer{`0},System.Boolean,Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,System.Threading.Tasks.TaskScheduler,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1"/> class.
            </summary>
            <param name="productionAsync">The async function that calculates the value.</param>
            <param name="equalityComparer">A comparer to use between two calculated values to ascertain whether they are sufficiently different to publish a new value.</param>
            <param name="initialRefresh">A value indicating whether to immediately queue a production.</param>
            <param name="threadingService">The threading service to control thread context.</param>
            <param name="scheduler">An optional scheduler to use for executing the dataflow block.</param>
            <param name="name">A name used inside dataflow to help to diagnose problems.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.PublicBlock">
            <summary>
            The source block of the message broadcasts that we can expose.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.Completion">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.Complete">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.Fault(System.Exception)">
            <summary>
            See IReceivableSourceBlock{T}
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.Refresh">
            <summary>
            Triggers a refresh of the broadcast value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.Process">
            <summary>
            The loop to calculate data and push it to the broadcast block.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProductionBroadcastBlock`1.PublishValue(`0)">
            <summary>
            Publish value to the broadcast block, if it is changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities">
            <summary>
            This class contains methods that are useful for error checking and validation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowRulePropertyMissing(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an exception indicating that a property in an IRule is missing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowRuleMissing(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Throws an exception indicating that an IRule is missing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.VerifyThrowProjectException(System.Boolean,System.String)">
            <summary>
            Throws an ProjectException with the specified message string if some condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The text message to display.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.VerifyThrowProjectException(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string if some condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first string formatting argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.VerifyThrowProjectException(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an ProjectException with the specified message string if some condition is false.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="unformattedMessage">The text message to display.</param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(System.String)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="message">The text message to display.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(System.String,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(System.String,System.Object,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <param name="arg1">The second formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(System.Exception,System.String)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="innerException">Can be null.</param>
            <param name="message">The text message to display.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(System.Exception,System.String,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="innerException">Can be null.</param>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(System.Exception,System.String,System.Object,System.Object)">
            <summary>
            Throws an ProjectException with the specified message string
            </summary>
            <param name="innerException">Can be null.</param>
            <param name="message">The text message to display.</param>
            <param name="arg0">The first formatting argument to consume when formatting the message string.</param>
            <param name="arg1">The second formatting argument to consume when formatting the message string.</param>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectExceptionHelper(System.Exception,System.String,System.Object[])">
             <summary>
             Throws a ProjectException.
            
             PERF WARNING: calling a method that takes a variable number of arguments
             is expensive, because memory is allocated for the array of arguments -- do
             not call this method repeatedly in performance-critical scenarios
             </summary>
             <param name="innerException">Can be null.</param>
             <param name="unformattedMessage">The text message to display.</param>
             <param name="args">The formatting arguments to consume when formatting the message string.</param>
             <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ResourceUtilities">
            <summary>
            This class contains utility methods for dealing with resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ResourceUtilities.FormatString(System.String,System.Object[])">
             <summary>
             Formats the given string using the variable arguments passed in.
            
             PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
             the array of arguments -- do not call this method repeatedly in performance-critical scenarios
             </summary>
             <remarks>This method is thread-safe.</remarks>
             <param name="unformatted">The string to format.</param>
             <param name="args">Optional arguments for formatting the given string.</param>
             <returns>The formatted string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ResourceUtilities.GetHelpKeyword(System.String)">
            <summary>
            Retrieves the CPS F1-help keyword for the given resource string. Help keywords are used to index help topics in
            host IDEs.
            </summary>
            <param name="resourceName">Resource string to get the CPS F1-keyword for.</param>
            <returns>The CPS F1-help keyword string.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector">
            <summary>
            A helper for checking for and recovering from stomped SynchronizationContexts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector.initialSyncContext">
            <summary>
            The SynchronizationContext captured when the struct was initialized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector"/> struct.
            </summary>
            <param name="initialSyncContext">The SynchronizationContext to watch for deviations from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector.Start">
            <summary>
            Initializes the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector"/> struct by snapping the current SynchronizationContext.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector.EnsureIntegrity">
            <summary>
            Checks that the SynchronizationContext is still at its snapped value.
            If it is not, an assertion failure is raised and the problem is corrected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SyncContextProtector.Dispose">
            <summary>
            Checks the SynchronizationContext one last time.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.TraceUtilities">
            <summary>
            This class contains methods that are useful for logging.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.Source">
            <summary>
            The CPS trace source.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.CriticalTraceRotatingBuffer">
            <summary>
            Buffer to preserve lastest set of error messages to help diagnosing Watson bugs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.CurrentLevel">
            <summary>
            Gives the current Travel Level setting for the CPS tracing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.TraceVerbose(System.String)">
            <summary>
            Requests a verbose trace message to be written out to the listeners.
            </summary>
            <param name="formattedMessage">The message to be traced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.TraceVerbose(System.String,System.Object[])">
            <summary>
            Requests a verbose trace message to be written out to the listeners.
            </summary>
            <param name="unformattedMessage">The unformatted message to be traced.</param>
            <param name="args">The arguments to be formatted into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.TraceWarning(System.String)">
            <summary>
            Requests a warning trace message to be written out to the listeners.
            </summary>
            <param name="formattedMessage">The message to be traced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.TraceWarning(System.String,System.Object[])">
            <summary>
            Requests a warning trace message to be written out to the listeners.
            </summary>
            <param name="unformattedMessage">The unformatted message to be traced.</param>
            <param name="args">The arguments to be formatted into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.TraceError(System.String)">
            <summary>
            Requests an error trace message to be written out to the listeners.
            </summary>
            <param name="formattedMessage">The message to be traced.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.TraceError(System.String,System.Object[])">
            <summary>
            Requests an error trace message to be written out to the listeners.
            </summary>
            <param name="unformattedMessage">The unformatted message to be traced.</param>
            <param name="args">The arguments to be formatted into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.TraceUtilities.TraceException(System.String,System.Exception)">
            <summary>
            Requests an error trace message to be written out to the listeners
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnlocalizedStrings">
            <summary>
            A set of string constants for internal error reporting that we don't want localized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.UnlocalizedStrings.InternalCpsErrorCausedInconsistentState">
            <summary>
            A string reporting that an internal error within CPS has caused a data inconsistency.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.AppliesToAttribute">
            <summary>
            Adds AppliesTo metadata to a MEF export to indicate where this export should be applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.AppliesToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.AppliesToAttribute"/> class.
            </summary>
            <param name="appliesToExpression">An expression that indicates where this export should be applied. The empty string signifies the export is always applied.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.AppliesToAttribute.AppliesTo">
            <summary>
            Gets the expression that indicates where this export should be applied.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectAutoLoadAttribute">
            <summary>
            An attribute that causes a method to be invoked automatically when a ConfiguredProject gets loaded.
            </summary>
            <remarks>
            This attribute cannot be inherited because ExportAttribute cannot be inherited,
            and InheritedExportAttribute does not allow application on methods.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectAutoLoadAttribute.ContractName">
            <summary>
            The contract name for delegates that should be auto-loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectAutoLoadAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectAutoLoadAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectAutoLoadAttribute.RequiresUIThread">
            <summary>
            Gets or sets a value indicating whether this method must be invoked on the UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportSpecialFileProviderAttribute">
            <summary>
            Marks a class as a MEF export and indicates which range of special files they possibly provide.
            </summary>
            <remarks>
            See also <see cref="T:Microsoft.VisualStudio.ProjectSystem.ISpecialFileProvider"/>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ExportSpecialFileProviderAttribute.#ctor(Microsoft.VisualStudio.ProjectSystem.SpecialFiles)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ExportSpecialFileProviderAttribute"/> class.
            </summary>
            <param name="specialFile">The type of special file handled.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ExportSpecialFileProviderAttribute.#ctor(Microsoft.VisualStudio.ProjectSystem.SpecialFiles,Microsoft.VisualStudio.ProjectSystem.SpecialFiles)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ExportSpecialFileProviderAttribute"/> class.
            </summary>
            <param name="minimum">The minimum special file type possibly handled.</param>
            <param name="maximum">The maximum special file type possibly handled.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ExportSpecialFileProviderAttribute.Minimum">
            <summary>
            The minimum special file type the provider could possibly handle.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ExportSpecialFileProviderAttribute.Maximum">
            <summary>
            The maximum special file type the provider could possibly handle.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportVsProfferedProjectServiceAttribute">
            <summary>
            Exports a service to be proffered by the service provider returned from
            IVsProject.GetItemContext when VSConstants.VSITEMID_Root is passed in.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ExportVsProfferedProjectServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ExportVsProfferedProjectServiceAttribute"/> class.
            </summary>
            <param name="serviceGuid">The identifier by which the service is proferred.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ExportVsProfferedProjectServiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ExportVsProfferedProjectServiceAttribute"/> class.
            </summary>
            <param name="serviceType">The type whose <see cref="P:System.Type.GUID"/> property is the identifier for the service.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ExportVsProfferedProjectServiceAttribute.ServiceGuid">
            <summary>
            Gets the identifier by which the service is proffered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectAutoLoadAttribute">
            <summary>
            Identifies a method with a <c>Func&lt;Task&gt;</c> signature as one that must be invoked
            when a project is loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAutoLoadAttribute.ContractName">
            <summary>
            The contract name for delegates that should complete execution
            before any configuration is loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectAutoLoadAttribute.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint,Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectAutoLoadAttribute"/> class.
            </summary>
            <param name="startAfter">The checkpoint after which the method may be invoked.</param>
            <param name="completeBy">The checkpoint that must not proceed before the method has completed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectAutoLoadAttribute.RequiresUIThread">
            <summary>
            Gets or sets a value indicating whether the method must be invoked on the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectAutoLoadAttribute.CompleteBy">
            <summary>
            Gets or sets the project load checkpoint that must not proceed before this delegate has completed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectAutoLoadAttribute.StartAfter">
            <summary>
            Gets or sets the project load checkpoint that must be reached before this delegate is invoked.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTypeGuidFilterAttribute">
            <summary>
            ProjectTypeGuidFilter metadata is used in some special flavored project components to indicate which falvor project system it supports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTypeGuidFilterAttribute.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTypeGuidFilterAttribute"/> class.
            </summary>
            <param name="projectType">A project type GUID.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTypeGuidFilterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTypeGuidFilterAttribute"/> class.
            </summary>
            <param name="projectType">A project type GUID string.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTypeGuidFilterAttribute.ProjectType">
            <summary>
            Gets the project type supported.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCompatibilityCheckLevel">
            <summary>
            Enum value to represent whether a more specific project compatibity check is required.
            </summary>
            <remarks>
            This represents the level of project compatibility check we need, so please maintain the order of values.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCompatibilityCheckLevel.None">
            <summary>
            No further check is required.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCompatibilityCheckLevel.UnconfiguredProject">
            <summary>
            Extra project veto check at unconfigured project level.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCompatibilityCheckLevel.ConfiguredProject">
            <summary>
            Extra project veto check at configured project level.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute">
            <summary>
            Adds SupportedProjectTypeGuid metadata to a MEF export to indicate where certain project type is supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute.#ctor(System.Guid,Microsoft.VisualStudio.ProjectSystem.ProjectCompatibilityCheckLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute"/> class.
            </summary>
            <param name="supportedProjectType">A project type GUID.</param>
            <param name="projectCompatibilityCheckLevel">Whether more specific logic to check the project compatiblity is required.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.ProjectCompatibilityCheckLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute"/> class.
            </summary>
            <param name="supportedProjectType">A project type GUID string.</param>
            <param name="projectCompatibilityCheckLevel">Whether more specific logic to check the project compatiblity is required.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute.SupportedProjectType">
            <summary>
            Gets the project type supported by extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute.ProjectCompatibilityCheckLevel">
            <summary>
            Whether the compactibility of the project file need be checked with more detailed logic in the later stage.
            A later stage check means some performance hit when loading the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SupportsFileExtensionAttribute">
            <summary>
            Marks a class as a MEF export and indicates what file extensions this applies to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SupportsFileExtensionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SupportsFileExtensionAttribute"/> class.
            </summary>
            <param name="supportedExtension">The file extension to which this applies, including the leading period.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SupportsFileExtensionAttribute.SupportedExtension">
            <summary>
            Gets the set of file extensions to which this applies, including the leading period.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3">
            <summary>
            An ordered import collection that optionally filters based on project capabilities and performs
            a transform on the list any time the set of filtered exports changes.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
            <typeparam name="TMetadata">The metadata interface for the export.</typeparam>
            <typeparam name="TProcessed">The type of the data, post processing.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.syncObject">
            <summary>
            An object to lock when checking cache validation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.processor">
            <summary>
            The processor to run when the filtered set of exports changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.processedValue">
            <summary>
            A cache of the most recently processed value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.filteredSnapshot">
            <summary>
            Latest snapshots used to computed the processed value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.#ctor(System.Func{System.Collections.Generic.IReadOnlyList{System.Lazy{`0,`1}},`2},Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3"/> class.
            </summary>
            <param name="processor">The processor to run to transform the list of exports.</param>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckScope">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.#ctor(System.Func{System.Collections.Generic.IReadOnlyList{System.Lazy{`0,`1}},`2},Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3"/> class.
            </summary>
            <param name="processor">The processor to run to transform the list of exports.</param>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.#ctor(System.Func{System.Collections.Generic.IReadOnlyList{System.Lazy{`0,`1}},`2},Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3"/> class.
            </summary>
            <param name="processor">The processor to run to transform the list of exports.</param>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProcessedOrderPrecedenceImportCollection`3.ProcessedValue">
            <summary>
            Gets the processed value for the current set of filtered exports.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer">
            <summary>
            A comparer that can sort MEF imports in a preferred order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.order">
            <summary>
            The ordering style for this instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.preferredComesFirstInstance">
            <summary>
            An instance of this class that sorts preferred imports earlier in a sequence.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.preferredComesLastInstance">
            <summary>
            An instance of this class that sorts preferred imports later in a sequence.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder">
            <summary>
            The ordering styles available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder.PreferredComesFirst">
            <summary>
            Higher precedence order integers appear earlier in the sequence. Ordered numerically descending.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder.PreferredComesLast">
            <summary>
            Lower precedence order integers appear earlier in the sequence. Ordered numerically ascending.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferredComesFirst">
            <summary>
            Gets an instance of this class that sorts preferred imports earlier in a sequence.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferredComesLast">
            <summary>
            Gets an instance of this class that sorts preferred imports later in a sequence.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.GetComparer(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Gets the comparer for a given ordering style.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Sorts in integer descending order.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames">
            <summary>
            Contract names to use for CPS exports/imports.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Prefix">
            <summary>
            The substring to prepend to all CPS-defined contract names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.PropertyXamlRuleDefinition">
            <summary>
            The contract by which an export describing where a XAML-encoded
            <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> can be found.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Scopes">
            <summary>
            The three scopes of CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Scopes.ProjectService">
            <summary>
            The top-level project system related MEF container.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Scopes.UnconfiguredProject">
            <summary>
            The project file level MEF container.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Scopes.ConfiguredProject">
            <summary>
            The project configuration level MEF container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectTreeProviders">
            <summary>
            Contracts used by tree providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectTreeProviders.PhysicalViewRootGraft">
            <summary>
            Extensions that add special folders to the physical tree provider's root node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectTreeProviders.PhysicalViewTree">
            <summary>
            The normal tree that shows the physical file/folder layout of the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectTreeProviders.PhysicalProjectTreeService">
            <summary>
            The contract name on an IProjectTreeService export for the physical (file system) view of a project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectTreeProviders.FaultedTree">
            <summary>
            The faulted tree provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectTreeProviders.LoadingViewTree">
            <summary>
            The "(loading...)" tree provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectTreeProviders.FileSystemDirectoryTree">
            <summary>
            The tree of the exact contents of the project directory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectItemProviders">
            <summary>
            Contract names for project item providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectItemProviders.Folders">
            <summary>
            The project item provider that manages Folder items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectItemProviders.SourceFiles">
            <summary>
            The project item provider that manages source files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectItemProviders.FxCopDictionaries">
            <summary>
            The project item provider that manages CodeAnalysisDictionary items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes">
            <summary>
            Contract names for exports within the "Microsoft.VisualStudio.Shell.Interop" namespace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsProjectCfgDebugTargetSelection">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsProjectCfgDebugTypeSelection">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsDependencyProvider">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
            <remarks>
            The prefix is removed here because these contracts are patched onto VS services using UnconfiguredProjectQIProvider,
            which doesn't support custom contract names.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsDesignTimeAssemblyResolution">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
            <remarks>
            The prefix is removed here because these contracts are patched onto VS services using UnconfiguredProjectQIProvider,
            which doesn't support custom contract names.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsProjectStartupServices">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsProjectCfg">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsProject">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsHierarchy">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsUIHierarchy">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsRetargetProjectAsync">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.IVsJavaScriptJmcProjectControl">
            <summary>
            The contract exported for extensions that implement this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.ProjectNodeComExtension">
            <summary>
            The contract for being aggregated with our project node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.ConfiguredProjectPropertiesAutomationObject">
            <summary>
            The contract exported for the configured project properties automation object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.VSProject">
            <summary>
            The contract exported from the implementation of this interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.CpsVSProject">
            <summary>
            The CPS implementation of VSLangProject.VSProject
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.SLocalRegistry">
            <summary>
            The SLocalRegistry service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsTypes.ComProjectNode">
            <summary>
            The native wrapped outer project node.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsServiceProviders">
            <summary>
            Contract names exported for proferring services through CPS to external parties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.VsServiceProviders.ProjectContextService">
            <summary>
            The contract name a service may be exported to with ServiceGuid metadata so that it
            becomes available for acquisition via a call to IVsProject.GetItemContext(VSConstants.VSITEMID_Root, out sp)
            followed by a call to sp.GetService(your-service-guid).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Threading">
            <summary>
            Contract names for synchronization, task schedulers, and threading.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Threading.TaskScheduler">
            <summary>
            Contract name applied for all exports of the <see cref="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Threading.TaskScheduler"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Threading.OnIdleTaskScheduler">
            <summary>
            Contract name for the <see cref="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Threading.TaskScheduler"/> that executes tasks on the UI thread while VS is idle.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Threading.AfterProjectWriteLockReleasedCallbacks">
            <summary>
            The contract name for exported delegates to invoke after project write locks are released.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Build">
            <summary>
            Contract names for build behaviors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Build.FullBuildGlobalPropertiesProviders">
            <summary>
            The contract name exported into the MEF catalog for providers of full build properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Build.DesignTimeBuildGlobalPropertiesProviders">
            <summary>
            The contract name exported into the MEF catalog for providers of design-time build properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Build.AggregateGlobalPropertiesProviders">
            <summary>
            The contract name of an export that is responsible for aggregating exports of the
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.Build.IProjectGlobalPropertiesProvider"/> interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Build.DesignTimeBuildErrorList">
            <summary>
            The contract name to access the design time build error list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Build.ProjectBuildErrorList">
            <summary>
            The contract name to access the solution build error list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Build.AggregateProjectBuildMessages">
            <summary>
            The aggregating component for the project level error list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.HostObjects">
            <summary>
            Contract names for host objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.HostObjects.ConfiguredProject">
            <summary>
            The contract name for the ConfiguredProject-scoped host object export.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.HostObjects.UnconfiguredProject">
            <summary>
            The contract name for the UnconfiguredProject-scoped host object export.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions">
            <summary>
            Contract names for exported functions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.CanRenameProject">
            <summary>
            A function that participates in determining whether a project can be renamed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.SourceItemsRemoving">
            <summary>
            A function that receives notifications when source items are about to be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.SourceItemsAdding">
            <summary>
            A function that receives notifications when source items are about to be added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.SourceItemsRenaming">
            <summary>
            A function that receives notifications when source items are about to be renamed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.SourceItemsRemoved">
            <summary>
            A function that receives notifications when source items are removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.SourceItemsAdded">
            <summary>
            A function that receives notifications when source items are added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.SourceItemsRenamed">
            <summary>
            A function that receives notifications when source items are renamed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Functions.UIUpdateWaiter">
            <summary>
            Delegates to synchronously invoke just after the property page UI applies a change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Automation">
            <summary>
            Contract names applied to exports of VS automation interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Automation.DteProject">
            <summary>
            Contract name for the CPS export of EnvDTE.Project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Automation.DteGlobals">
            <summary>
            Contract name for the CPS export of EnvDTE.Globals
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Automation.VsLangProjProject">
            <summary>
            Contract name for the CPS export of VSLangProj.VSProject
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Automation.VsLangProjEvents">
            <summary>
            Contract name for the CPS export of VSLangProj.VSProjectEvents
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Automation.VsLangProjBuildManager">
            <summary>
            Contract name for the CPS export of VSLangProj.BuildManager
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Automation.VsLangProjReferences">
            <summary>
            Contract name for the CPS export of VSLangProj.References
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders">
            <summary>
            Contract names for IProjectPropertiesProvider implementations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders.Intrinsic">
            <summary>
            Contract name for the property provider that reads MSBuild intrinsic properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders.ProjectFile">
            <summary>
            Contract name for the property provider that reads/writes properties from the project file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders.UserFile">
            <summary>
            Contract name for the property provider that reads/writes properties from the user file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders.UserFileWithXamlDefaults">
            <summary>
            Contract name for the property provider that reads/writes properties from the user file
            and when properties are not defined in context falls back to defaults as specified
            in the XAML file rather than from elsewhere in the project (e.g. such as .props files).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders.AssemblyReference">
            <summary>
            Contract name for the property provider that reads/writes special properties from the project file
            for assembly references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders.ProjectFileFolderItems">
            <summary>
            Contract name for the property provider that reads MSBuild folder item properties with Xaml rule defaults.
            It handles both explicit and implicit included folders.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ProjectPropertyProviders.ProjectFileWithCatalog">
            <summary>
            Contract name for the property provider that lazily retrieves its Rule before writing to the project file.
            This allows it to obey "Attribute" and "Element" persistence styles.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ClrTypes">
            <summary>
            Custom contract names for exported types that are found in the BCL.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.ClrTypes.SynchronizationContext">
            <summary>
            Contract name for exported sync contexts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.BuildManagerHosts">
            <summary>
            Build manager hosts available in CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.BuildManagerHosts.BuildManagerAccessorDesignTime">
            <summary>
            The build manager host that coordinates design-time builds with the build manager accessor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.BuildManagerHosts.SolutionBuildManagerParticipant">
            <summary>
            The build manager host that coordinates with the VS solution build manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.BuildManagerHosts.Independent">
            <summary>
            The build manager host used by multi-threaded CPS tenants for design-time builds.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.DocumentManager">
            <summary>
            The document managers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.DocumentManager.File">
            <summary>
            The document manager used for opening ordinary files in the editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.DocumentManager.AppDesigner">
            <summary>
            The document manager used for opening app designer pages.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.MSBuild">
            <summary>
            Contracts used by CPS exports of MSBuild objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.MSBuild.ProjectCollection">
            <summary>
            The contract name for MEF imports of the <see cref="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.MSBuild.ProjectCollection"/> that CPS uses.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.MSBuild.GlobalProjectCollectionGlobalProperties">
            <summary>
            The contract name on the IProjectGlobalPropertiesProvider export that publishes all the global properties on the GlobalProjectCollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Extensions">
            <summary>
            Contracts used by CPS to extract information about its extensions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Extensions.SupportedProjectTypeGuid">
            <summary>
            The contract name for MEF imports SupportedProjectTypeGuid metadata.  The MEF component must carry one or more <see cref="T:Microsoft.VisualStudio.ProjectSystem.SupportedProjectTypeGuidAttribute"/>
            to indicate which project type is supported by the extension.  The compoenent itself will not be used.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ExportContractNames.Extensions.ProjectBuildTargetToCapabilities">
            <summary>
            The contract name for MEF imports ProjectBuildTargetToCapabilities netadata.
            The MEF component must carry one or more <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectBuildTargetToCapabilityAttribute"/> to declare the target file to capabilities mapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.MefExtensions">
            <summary>
            Extension methods for MEF types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.GetExportedValueOrDefault``1(Microsoft.VisualStudio.Composition.ExportProvider)">
            <summary>
            Get a single component and allow default.
            </summary>
            <typeparam name="T">The type identity of the export to retrieve.</typeparam>
            <param name="exportProvider">The container to query.</param>
            <returns>The exported component</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.GetExportedValueOrDefault``1(Microsoft.VisualStudio.Composition.ExportProvider,System.String)">
            <summary>
            Get a single component and allow default.
            </summary>
            <typeparam name="T">The type identity of the export to retrieve.</typeparam>
            <param name="exportProvider">The container to query.</param>
            <param name="contractName">The contract to query.</param>
            <returns>The exported component</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.GetService``1(Microsoft.VisualStudio.Composition.ExportProvider,System.Boolean)">
            <summary>
            Gets a single MEF exported value from a container.
            </summary>
            <typeparam name="T">The type identity of the export to retrieve.</typeparam>
            <param name="exportProvider">The container to query.</param>
            <param name="allowDefault">A value indicating whether returning a <c>default(T)</c> instance is preferable to throwing an exception if the service is not available.</param>
            <returns>The exported value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.GetServiceLazy``1(Microsoft.VisualStudio.Composition.ExportProvider,System.Boolean)">
            <summary>
            Gets a single MEF exported value from a container.
            </summary>
            <typeparam name="T">The type identity of the export to retrieve.</typeparam>
            <param name="exportProvider">The container to query.</param>
            <param name="allowDefault">A value indicating whether returning a <c>default(T)</c> instance is preferable to throwing an exception if the service is not available.</param>
            <returns>The exported value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.FindByMetadata``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.FindExportByMetadata``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.FindByMetadata``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Predicate{``1})">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
            <typeparam name="TMetadata">The type of the export metadata.</typeparam>
            <param name="exports">The exports.</param>
            <param name="metadataCheck">The metadata constraint.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.FindExportByMetadata``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Predicate{``1})">
            <summary>
            Gets the first export from a list of exports that matches some metadata constraint,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
            <typeparam name="TMetadata">The type of the export metadata.</typeparam>
            <param name="exports">The exports.</param>
            <param name="metadataCheck">The metadata constraint.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.FindNamedExport``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.INamedExportMetadataView}},System.String)">
            <summary>
            Finds the exported value with the given export metadata name, or the default value if no match was found.
            </summary>
            <typeparam name="T">The type of export to search.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.FindByMetadata``1(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.ExportFactory{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.FindExportFactoryByMetadata``1(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.ExportFactory{``0,System.Collections.Generic.IDictionary{System.String,System.Object}}},System.String,System.String)">
            <summary>
            Gets the first export from a list of exports that matches some metadata name=value pair,
            or null if no match was found.
            </summary>
            <typeparam name="T">The interface exported by the MEF part.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.ExtensionValuesWithMetadata``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
            <summary>
            Enumerates a sequence of extensions, omitting any extensions that throw MEF exceptions.
            </summary>
            <typeparam name="T">The type of extension.</typeparam>
            <typeparam name="TMetadata">The type of metadata on each export.</typeparam>
            <param name="extensions">The collection of extensions.</param>
            <returns>The safely constructed sequence of extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.ExtensionValues``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}},System.Boolean)">
            <summary>
            Enumerates a sequence of extensions, omitting any extensions that throw MEF exceptions.
            </summary>
            <typeparam name="T">The type of extension.</typeparam>
            <param name="extensions">The collection of extensions.</param>
            <param name="onlyCreatedValues">
            <c>true</c> to only enumerate extensions from Lazy's that have previously been created.
            This is useful in Dispose methods to avoid MEF ObjectDisposedExceptions from accidentally
            creating values during a container disposal.
            </param>
            <returns>The safely constructed sequence of extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.ExtensionValues``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Boolean)">
            <summary>
            Enumerates a sequence of extensions, omitting any extensions that throw MEF exceptions.
            </summary>
            <typeparam name="T">The type of extension.</typeparam>
            <typeparam name="TMetadata">The metadata on each extension.</typeparam>
            <param name="extensions">The collection of extensions.</param>
            <param name="onlyCreatedValues">
            <c>true</c> to only enumerate extensions from Lazy's that have previously been created.
            This is useful in Dispose methods to avoid MEF ObjectDisposedExceptions from accidentally
            creating values during a container disposal.
            </param>
            <returns>The safely constructed sequence of extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.MefExtensions.TryGetValue``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value with a given key from a dictionary if the key is defined and the value is of the required type.
            </summary>
            <typeparam name="TValue">The type of the value desired.</typeparam>
            <param name="metadata">The dictionary to search.</param>
            <param name="key">The key to search for.</param>
            <param name="value">Receives the value, if the key is found and if the value is of the right type. Otherwise <c>default(TValue)</c>.</param>
            <returns><c>true</c> if the key was found and the value was of the expected type; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IAppliesToMetadataView">
            <summary>
            A contract on export metadata to discover where an export should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IAppliesToMetadataView.AppliesTo">
            <summary>
            Gets the expression that indicates where this export should be applied.
            </summary>
            <remarks>
            This property does not have the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> applied to it,
            which has the effect of automatically filtering out exports that are missing this export metadata.
            All exports should include this metadata so that they are applied to the appropriate projects.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProviderMetadataView">
            <summary>
            The MEF metadata view for metadata that is required on an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider"/> export.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProviderMetadataView.ProjectType">
            <summary>
            Gets the non-localized moniker for the project type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProviderMetadataView.ProjectFileExtensions">
            <summary>
            Gets the set of project file extensions that are typically seen for this type of project.
            </summary>
            <value>An array of strings, each element starting with a period.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IMultipleNamedExportMetadataView">
            <summary>
            An interface that describes metadata on named exports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMultipleNamedExportMetadataView.Name">
            <summary>
            Gets the "Name" metadata for this export.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.INamedExportMetadataView">
            <summary>
            An interface that describes metadata on named exports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.INamedExportMetadataView.Name">
            <summary>
            Gets the "Name" metadata for this export.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView">
            <summary>
            Provides a view at an export's metadata that declares its own preferred precedence order among a collection of similar exports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView.OrderPrecedence">
            <summary>
            Gets the precedence order, where higher numbers generally are interpreted to mean more preferred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions">
            <summary>
            Extension methods for Capabilities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.GetEffectiveCapabilitiesSnapshot(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Gets the effective <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot"/> from the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.Contains(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope,System.String)">
            <summary>
            Checks whether a specific project capability is defined in the currently published set of capabilities for the specified provider.
            </summary>
            <param name="capabilitiesScope">The <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope"/> that provides the set of capabilities.</param>
            <param name="capability">The capability to check for.</param>
            <returns><c>true</c> if <paramref name="capabilitiesScope"/> is defined by this project; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.CanSatisfy(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <summary>
            Checks whether capabilites requirements are satisified in the current context.
            </summary>
            <param name="capabilitiesScope">The <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope"/> that provides the set of capabilities.</param>
            <param name="requirements">The capabilities requirements to check for.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.AppliesTo(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope,System.String)">
            <summary>
            Gets a value indicating whether an AppliesTo expression is satisfied given a set of capabilities.
            </summary>
            <param name="capabilitiesScope">The scope of capabilities to consider.</param>
            <param name="appliesToExpression">The AppliesTo expression.</param>
            <returns><c>true</c> if the AppliesTo expression is satisfied; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.AppliesTo(Microsoft.VisualStudio.ProjectSystem.IAppliesToMetadataView,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Gets a value indicating whether an export with the specified metadata is applicable to the current project.
            </summary>
            <param name="exportMetadata">The metadata on the export to be tested. May be <c>null</c>, in which case <c>false</c> is returned</param>
            <param name="capabilitiesScope">The scope of capabilities.</param>
            <returns><c>true</c> if the export should be applied; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.AppliesTo``2(System.Lazy{``0,``1},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Gets a value indicating whether the specified import is applicable to the current project.
            </summary>
            <typeparam name="T">The type of exported value.</typeparam>
            <typeparam name="TMetadata">The type of metadata exported with the value.</typeparam>
            <param name="lazyImport">The import to be tested. May be <c>null</c>, in which case <c>false</c> is returned</param>
            <param name="capabilitiesScope">The scope of capabilities.</param>
            <returns><c>true</c> if the export should be applied; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.FiltersWith``1(System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.IAppliesToMetadataView},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Check whether the imported component matches the declared project capabilities, otherwise returns <c>null</c>.
            </summary>
            <typeparam name="T">The type of the lazily-initialized value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.FilteredValue``1(System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.IAppliesToMetadataView},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Check whether the imported component matching the project capability, otherwise returns <c>null</c>.
            </summary>
            <typeparam name="T">The type of the lazily-initialized value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.HasSameInheritedSnapshotsInstances(Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot,Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot)">
            <summary>
            Helper method to check whether two snapshots have the same inner checkers
            </summary>
            <param name="snapshot1">The first snapshot</param>
            <param name="snapshot2">The second snapshot</param>
            <returns><c>true</c> if the two snapshots have the same inner checkers</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.WaitConfiguredProjectCapabilitiesPublishedAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Threading.CancellationToken)">
            <summary>
            Wait the first set of configured project capabilities published.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.TryCollectAllCapabilities(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot)">
            <summary>
            Collects all the capabilities defined in a snapshot that can be determined without knowing what we're looking for.
            </summary>
            <param name="snapshot">The snapshot to read capabilities from.</param>
            <returns>The set of discovered capabilities. This may not be a complete set.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.ContributeCapabilities(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot},System.Collections.Immutable.ImmutableHashSet{System.String}.Builder)">
            <summary>
            Aggregates all the discoverable capabilities in the given snapshot into a collection.
            </summary>
            <param name="snapshots">A collection of snapshots to read from.</param>
            <param name="capabilitiesCollector">The collection of capabilities to add to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilitiesExtensions.ContributeCapabilities(System.Collections.Generic.IEnumerable{System.String},System.Collections.Immutable.ImmutableHashSet{System.String}.Builder)">
            <summary>
            Aggregates all the discoverable capabilities in the given snapshot into a collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser">
            <summary>
            A project and service capability expression parser and evaluator.
            </summary>
            <devremarks>
            This is a struct rather than a class to avoid allocating memory unnecessarily.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.CapabilityExpressionParameterName">
            <summary>
            The parameter name to report as in error in thrown argument exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.symbolDefinedCheck">
            <summary>
            The function to call to check whether a specific symbol has been defined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.symbolDefinedCheckArgument">
            <summary>
            The value to pass to <see cref="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.symbolDefinedCheck"/> as the second argument.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.tokenizer">
            <summary>
            The tokenizer that reads the capability expression.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.#ctor(System.String,System.Func{System.String,System.Object,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser"/> struct.
            </summary>
            <param name="expression">The capability expression.</param>
            <param name="symbolDefinedCheck">The function to call to check whether a specific symbol has been defined.</param>
            <param name="symbolDefinedCheckArgument">The value to pass to <paramref name="symbolDefinedCheck"/> as the second argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Evaluate(System.String,System.Func{System.String,System.Object,System.Boolean},System.Object)">
            <summary>
            Checks whether a given capability expression matches against a given set of project or service capabilities.
            </summary>
            <param name="expression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <param name="symbolDefinedCheck">The function to call to check whether a specific symbol has been defined.</param>
            <param name="symbolDefinedCheckArgument">The value to pass to <paramref name="symbolDefinedCheck"/> as the second argument.</param>
            <returns>The result of the expression match test.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.IsSymbolCharacter(System.Char)">
            <summary>
            Checks whether a given character is an allowed member of a capability term.
            </summary>
            <param name="ch">The character to test.</param>
            <returns>true if the character would be an allowed member of a capability term; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.OrTerm">
            <summary>
            Processes | operators.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.AndTerm">
            <summary>
            Processes &amp; operators.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Term">
            <summary>
            Processes capability terms.
            </summary>
            <returns>The result of evaluating the current sub-expression.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Top">
            <summary>
            Processes the entire expression.
            </summary>
            <returns>The result of evaluating the expression.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer">
            <summary>
            The expression tokenizer.
            </summary>
            <devremarks>
            This is a struct rather than a class to avoid allocating memory unnecessarily.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.i">
            <summary>
            The current position within the expression.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.peeked">
            <summary>
            The most recently previewed token.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.input">
            <summary>
            The entire expression being tokenized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer"/> struct.
            </summary>
            <param name="input">The expression to parse.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.Input">
            <summary>
            Gets the entire expression being tokenized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.Position">
            <summary>
            Gets the position of the next token.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.Next">
            <summary>
            Gets the next token in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.Peek">
            <summary>
            Peeks at the next token in the stream without skipping it on
            the next invocation of <see cref="M:Microsoft.VisualStudio.ProjectSystem.CapabilityExpressionParser.Tokenizer.Next"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCapabilitiesProviderBase">
            <summary>
            A base class for project capabilities providers which may (or may not) change the set of project capabilities declared over time
            and that derive capabilities from the ConfiguredProject scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCapabilitiesProviderBase.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCapabilitiesProviderBase"/> class.
            </summary>
            <param name="configuredProject">The configured project to which this instance applies.</param>
            <param name="name">The name of the capabilities provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCapabilitiesProviderBase.ConfiguredProject">
            <summary>
            Gets the configured project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCapabilitiesProviderBase.InitializeCoreAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCapabilitiesProviderBase.DisposeCoreAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCapabilitiesProviderBase.ConfiguredProject_ProjectChangedSynchronous(System.Object,System.EventArgs)">
            <summary>
            Responds to changes in the ConfiguredProject by assessing
            any impact to project capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext">
             <summary>
             Defines a project capabilities context, which is a part of the execution context, to ensure we are using the consistant set of snapshots
             within a single execution.
             When the code within the execution context checks capabilities for certain scope, it need use the scope's identity and find the right snapshot
             from the ProjectCapabilitiesContext.Current.
            
             When capabilities are evaluated within the context, the result can be tracked by the context based on <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType"/>.
            
             Capabilities contexts can be both isolated or non-isolated.  The difference is that capabilities calculation inside an isolated context will
             not be tracked by its parent context, but a non-isolated context will.
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.Context">
            <summary>
            The capabilities context stack
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.projectContext">
            <summary>
            The project this context belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.dependencyManagementType">
            <summary>
            How this context manages capabilities dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectScopeCapabilitiesSnapshot},Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType,System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.NamedIdentity}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext"/> class.
            </summary>
            <param name="project">The project where capabilites are evaluated.</param>
            <param name="snapshots">Project scope capabilities snapshots.</param>
            <param name="dependencyManagementType">Controls how capabilities dependencies are managed.  Details can be found in <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType"/>.</param>
            <param name="forceToUpdate">When it is true, the context will take new project capabilities snapshots from the input parameter, instead of using values from inheritedSnapshots.</param>
            <param name="needIsolation">Whether to create an isolated capabilities context.</param>
            <param name="inheritedSnapshots">Capabilities snapshots from existing context.</param>
            <param name="inferredScopes">Capabilities scopes inferred from the context.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType">
            <summary>
            How to managed capabilities dependencies within the context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType.SelfManaged">
            <summary>
            Capabilities change can be managed by the code itself, so there is no need to track the dependency in the context.
            For example, it can be within a context of making a one time change to the project file.  Later capabilities change
            is no longer interesting.  Another scenario is that the code doesn't cache any state, and new calculation will be done
            on the new capabilities set, so there is no need to track the current dependencies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType.InvalidateProjectState">
            <summary>
            Any capabilities change invalid the current state of the project in the memory. The project has to be reloaded.
            The context automatically register dependencies to the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirementsService"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType.CalculatedWithContext">
            <summary>
            Capabilities dependencies are calculated in the context (except all dependencies in isolated context), and the result
            can be found in the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext"/>.  It can be used by the code to manage dependencies to capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CurrentContext">
            <summary>
            Gets the current <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext"/> in the current execution context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CurrentCapabilitiesByScopes">
            <summary>
            Gets the current capabilities sets in different scopes in the current execution context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesByScopes">
            <summary>
            Gets all known capabilities in the current context, including capabilities in parent context if applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.Dependencies">
            <summary>
            Gets the current capablities dependencies.
            This is property is only available for <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType.CalculatedWithContext"/> type context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.SuppressRelevance">
            <summary>
            Create a capability context without any content.  This provides an execution context insulated from the current one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType)">
            <summary>
            Creates a capability context based on the current value of a capabilities scope.
            </summary>
            <param name="project">A project capabilities scope</param>
            <param name="dependencyManagement">How to track capabilities dependencies,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateContext(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType)">
            <summary>
            Creates a capability context based on the current value of a capabilities scope.
            </summary>
            <param name="project">A project capabilities scope</param>
            <param name="dependencyManagement">How to track capabilities dependencies,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateIsolatedContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Boolean,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType)">
            <summary>
            Creates a capability context based on the current value of a capabilities scope.
            </summary>
            <param name="project">A project capabilities scope</param>
            <param name="forceToUpdate">Pick up the new published value from the project</param>
            <param name="dependencyManagement">How to track capabilities dependencies,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateIsolatedContext(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Boolean,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType)">
            <summary>
            Creates a capability context based on the current value of a capabilities scope.
            </summary>
            <param name="project">A project capabilities scope</param>
            <param name="forceToUpdate">Pick up the new published value from the project</param>
            <param name="dependencyManagement">How to track capabilities dependencies,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateIsolatedContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType)">
            <summary>
            Creates a capabilities context based on a specific version of unconfigured project capabilies.
            </summary>
            <param name="project">The current project</param>
            <param name="capabilities">A specific version of the project capabilities</param>
            <param name="dependencyManagement">How to track capabilities dependencies,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateIsolatedSubScopeContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType)">
            <summary>
            Create a special capabilities context for special internal scopes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateIsolatedContext(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType,System.Boolean)">
            <summary>
            Create a special capabilities context for special internal scopes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CreateIsolatedContext(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot,Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.DependencyManagementType)">
            <summary>
            Creates a capabilities context based on a specific version of configured project capabilies.
            </summary>
            <param name="project">The current project</param>
            <param name="capabilities">A specific version of the project capabilities</param>
            <param name="dependencyManagement">How to track capabilities dependencies,</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.RevertRelevance">
            <summary>
            A structure that clears the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext"/> stack, and restore the value when it is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.RevertRelevance.Dispose">
            <summary>
            Restore the original see cref="ProjectCapabilitiesContext"/> stack.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesDependencies">
            <summary>
            Reprsents all capabilities dependecies of the current <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesDependencies.Item(Microsoft.VisualStudio.ProjectSystem.NamedIdentity)">
            <summary>
            Gets the capablities requirements for a specific capabilities scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesDependencies.Item(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Gets the capablities requirements for a specific capabilities scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesDependencies.ContainsDependencies(Microsoft.VisualStudio.ProjectSystem.NamedIdentity)">
            <summary>
            Returns whether there is any capabilities requirement in a specific capabilities scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesDependencies.ContainsDependencies(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Returns whether there is any capabilities requirement in a specific capabilities scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesDependencies.RegisterDependencies">
            <summary>
            Register all dependencies to the RequirementsService, so the project will be reloaded, if the condition is invalid later.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.CapabilitiesDependencies.IsSatisfied">
            <summary>
            Check whether all the project capabilities requirements are satisified under the current context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesContext.ProjectCapabilitiesChecker">
            <summary>
            A wrapper of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot"/> to track dependencies.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities">
            <summary>
            Well-known project capabilities.
            </summary>
            <remarks>
            Project capability requirements must be expressed on MEF parts via:
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.AppliesToAttribute"/> using one of the valid metadata names given below.
            Project capabilities are not case sensitive.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.VisualC">
            <summary>
            Expressed on parts applicable to any Visual C++ project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.CSharp">
            <summary>
            Expressed on parts applicable to any C# project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.VB">
            <summary>
            Expressed on parts applicable to any Visual Basic .NET project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.AlwaysApplicable">
            <summary>
            The empty string, because project capability expressions that are empty evaluate to <c>true</c>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.Cps">
            <summary>
            Expressed on parts applicable to any pure-CPS project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.UseFileGlobs">
             <summary>
             Indicates that msbuild globs are being used.
            
             Note: consider removing this eventually.
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.DynamicDependentFile">
            <summary>
            Present when dependent file in the project is dynamically calculated, instead of saving to the project file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.HostSetActiveProjectConfiguration">
            <summary>
            Present when the project is loaded in the context of a host process
            that has a concept of active project configurations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsInferredFromUsage">
            <summary>
            Present when a project does not explicitly declare its own project configurations, but rather expects the
            project system to infer what they are based on MSBuild element Condition attributes that appear in the project.
            </summary>
            <remarks>
            This capability tends to be used for C#/VB.
            </remarks>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsDeclaredAsItems"/>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsDeclaredDimensions"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsDeclaredAsItems">
            <summary>
            Present when a project explicitly declares its own project configurations as ProjectConfiguration msbuild items.
            </summary>
            <remarks>
            This capability tends to be used for C++/JS.
            </remarks>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsInferredFromUsage"/>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsDeclaredDimensions"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsDeclaredDimensions">
            <summary>
            Present when the project system provides the dimensions.
            </summary>
            <remarks>
            This capability tends to be used for .Net Core.
            </remarks>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsInferredFromUsage"/>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsDeclaredAsItems"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.RunningInVisualStudio">
            <summary>
            Present when the CPS-VS MEF components are available.
            </summary>
            <remarks>
            This project capability is here to help VC adjust to turning off
            stable composition by forcing parts that would be rejected to be
            removed from the MEF catalog.  It is not intended for general purpose
            consumption.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.NotLoadedWithIDEIntegration">
            <summary>
            A capability defined when a project is loaded without integration with the IDE.
            Examples include .filters file and platform projects internally used by the project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.RenameNearbySimilarlyNamedImportsWithProject">
            <summary>
            A capability that opts a project into automatically having its imported files renamed with the project.
            </summary>
            <remarks>
            For example, if a.proj imports a.proj.user and a.proj is renamed to b.proj, then a.proj.user should be renamed to b.proj.user.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ShowMissingItemTypes">
            <summary>
            A capability that enables CPS to generate temporary rules for item types in the project file that do not have rules yet.
            This allows CPS to show missing items in the project tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.PreserveFormatting">
            <summary>
            A capability to enables preserveFormatting on the MSBuild project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.Managed">
            <summary>
            A project capability expressed by projects that compile to MSIL (e.g. C#, VB, F#, and Managed C++ or C++/CLI).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ReferencesFolder">
            <summary>
            Expressed on parts that provide the special References folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.SharedAssetsProject">
            <summary>
            Expressed on parts that provide services for Code Sharing projects (i.e. Mercury master projects).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.NestedProjects">
            <summary>
            Expressed on parts that provide services for nested projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.SourceItemsFromImports">
            <summary>
            Indicates that source items should be presented in the UI even if they appear in imported files
            (as opposed to the project manifest itself).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.SharedImports">
            <summary>
            Expressed on parts that provide services for projects that contain imports of MSBuild files that may
            be imported by other projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.LanguageService">
            <summary>
            Present to activate the language service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.SingleFileGenerators">
            <summary>
            Present to activate support for single file generators (aka custom tools that execute at design-time).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ParentVCProject">
            <summary>
            Present to activate support for VC codesharing parent project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.RelativePathDerivedDefaultNamespace">
            <summary>
            Present to activate tracking folder names in namespace (i.e. RootNamespace.Folder1.Folder2).
            </summary>
            <devremarks>
            TODO: This should not be a capability, but a project property.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.WindowsXaml">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) as a UI framework.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.WindowsXamlPage">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) as a UI framework for pages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.WindowsXamlCodeBehind">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) code-behinds.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.WindowsXamlResourceDictionary">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) for resource dictionaries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.WindowsXamlUserControl">
            <summary>
            A project capability defined on a project that supports Windows Xaml (not WPF) as a UI framework for user controls.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.DiagnoseCapabilities">
            <summary>
            A project capability to enable disgnostic features around capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.HandlesOwnReload">
            <summary>
            A project capability defined on a project that supports handling its own reload when there are external changes to the
            project file..
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.NoGeneralDependentFileIcon">
            <summary>
            A project capability to suppress using a general icon for all dependent files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.WinRTReferences">
            <summary>
            Expressed on parts applicable to projects that support WinRT references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.AssemblyReferences">
            <summary>
            Expressed on parts applicable to projects that support assembly references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ComReferences">
            <summary>
            Expressed on parts applicable to projects that support COM references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectReferences">
            <summary>
            Expressed on parts applicable to projects that support project references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.SharedProjectReferences">
            <summary>
            Expressed on parts applicable to projects that support shared project references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.SdkReferences">
            <summary>
            Expressed on parts applicable to projects that support SDK references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.PackageReferences">
            <summary>
            Expressed on parts applicable to projects that support Package references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.OutputGroups">
            <summary>
            Activates the overall output groups support in a project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.AllTargetOutputGroups">
            <summary>
            Activates auto-detection of output groups based on a common target naming convention.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.VisualStudioWellKnownOutputGroups">
            <summary>
            Activates auto-detection of targets supporting well-known output groups.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.BuildWindowsDesktopTarget">
            <summary>
            A capability present in projects that produce all or part of an application that can be both:
             1. launched using Win32 CreateProcess, and
             2. debugged using a standard Visual Studio debug engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.FallbackProjectConfigurationService">
            <summary>
            An internal capability to enable fallback project configurations service, when no other provider to replace it.
            </summary>
            <seealso cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.ProjectConfigurationsInferredFromUsage"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.RequiresSharedAssetsProjectLoadForOpenDocuments">
            <summary>
            Indicates that the project's design-time components are not vetted to work when the project's referenced
            Shared Assets Project(s) are not yet loaded by ASL. (see bug 892019)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.DisallowedCharacters">
            <summary>
            The set of disallowed characters in project capabilities.
            </summary>
            <remarks>
            We restrict many symbols, especially mathematical symbols, because we may eventually want to
            support Project Capability arithmetic in project files or MEF metadata string values.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilities.IsValidProjectCapabilityName(System.String)">
            <summary>
            Checks whether a given project capability name is valid.
            </summary>
            <param name="projectCapability">The project capability to validate.</param>
            <returns><c>true</c> if the project capability is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportEvaluationProvider">
            <summary>
            Adds a project capability based on what a project imports either directly or through its other imports.
            </summary>
            <remarks>
            Derived-types should export the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider"/> interface.
            They should also strongly consider adding a file extension filter to avoid getting loaded
            for irrelevant project types.
            So for example:
            <example><code>
            [Export(ExportContractNames.Scopes.ConfiguredProject, typeof(IProjectCapabilitiesProvider))]
            [SupportsFileExtension(".csproj")]
            </code></example>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportEvaluationProvider.capabilities">
            <summary>
            The capabilities to inject into the project if the matching targets import is found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportEvaluationProvider.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportEvaluationProvider"/> class.
            </summary>
            <param name="configuredProject">The configured project to which this instance applies.</param>
            <param name="triggerTargets">The substring to search for in the Import/@Project attribute.</param>
            <param name="capabilities">The capability to add on a match.</param>
            <param name="name">The name of the capabilities provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportEvaluationProvider.TriggerTarget">
            <summary>
            The value inside &lt;Import Project="{0}" /&gt; on which to match.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportEvaluationProvider.GetCapabilitiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the capabilities that fit the project in context that this provider contributes.
            </summary>
            <value>A task which returns a sequence that is possibly empty but never <c>null</c>.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportEvaluationProvider.GetIsApplicableAsync">
            <summary>
            Gets a value indicating whether the project matching criteria has been met and
            this component's capabilities should be injected into the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportXmlProvider">
            <summary>
            Adds a project capability based on what a project directly imports.
            </summary>
            <remarks>
            Derived-types should export the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider"/> interface.
            They should also strongly consider adding a file extension filter to avoid getting loaded
            for irrelevant project types.
            So for example:
            <example><code>
            [Export(ExportContractNames.Scopes.UnconfiguredProject, typeof(IProjectCapabilitiesProvider))]
            [SupportsFileExtension(".csproj")]
            </code></example>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportXmlProvider.capabilities">
            <summary>
            The capabilities to inject into the project if the matching targets import is found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportXmlProvider.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportXmlProvider"/> class.
            </summary>
            <param name="unconfiguredProject">The unconfigured project to which this instance applies.</param>
            <param name="triggerTargets">The substring to search for in the Import/@Project attribute.</param>
            <param name="capabilities">The capabilities to add on a match.</param>
            <param name="name">The name of the capabilities provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportXmlProvider.TriggerTarget">
            <summary>
            The value inside &lt;Import Project="{0}" /&gt; on which to match.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportXmlProvider.GetCapabilitiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the capabilities that fit the project in context that this provider contributes.
            </summary>
            <returns>A task which returns a sequence that is possibly empty but never <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesFromImportXmlProvider.GetIsApplicableAsync">
            <summary>
            Gets a value indicating whether the project matching criteria has been met and
            this component's capabilities should be injected into the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase">
            <summary>
            A base class for project capabilities providers which may (or may not) change the set of project capabilities declared over time.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.version">
            <summary>
            The version that represents the most current value that is available or queued for computation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.dataSourceRegistry">
            <summary>
            The data source registry to register with.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.publicBlock">
            <summary>
            The public facing broadcast block for project capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.productionBlock">
            <summary>
            The block that serializes computation of project capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.dataSourceRegistryCancellation">
            <summary>
            The value to dispose of to cancel data source registration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.capabilities">
            <summary>
            The last capabilities snapshot published.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.#ctor(System.String,Microsoft.VisualStudio.Threading.JoinableTaskContextNode,Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase"/> class.
            </summary>
            <param name="joinableTaskContextNode">The JoinableTaskContext to use.</param>
            <param name="dataSourceRegistry">The data source registry to register this data source with.</param>
            <param name="configuredProjectLevel"><c>true</c> if this instance belongs to the ConfiguredProject scope.</param>
            <param name="name">The name of the capabilities provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.Microsoft#VisualStudio#ProjectSystem#IProjectValueDataSource#SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.Current">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.ThreadingService">
            <summary>
            Gets or sets the service that will use alternate threads for code execution of the UI thread, as the threading model may dictate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.Microsoft#VisualStudio#ProjectSystem#IJoinableProjectValueDataSource#Join">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.GetCapabilitiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the capabilities that fit the project in context that this provider contributes.
            </summary>
            <returns>A task which returns a sequence that is possibly empty but never <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.InitializeCoreAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.DisposeCoreAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesProviderBase.Refresh">
            <summary>
            Invalidates the last computed capabilities and schedules a refresh of capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements">
            <summary>
            A default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.#ctor(System.Collections.Immutable.IImmutableDictionary{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.CapabilitiesRequirements">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.Empty">
            <summary>
            Gets an Empty instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.IsEmpty">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.Add(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.Add(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.ConflictsWith(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.IsSatisfiedBy(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.Remove(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectCapabilitiesRequirements.Remove(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot">
            <summary>
            A default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectScopeCapabilitiesSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot.#ctor(Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot"/> class.
            </summary>
            <param name="scopeIdentity">The identity of the current scope.</param>
            <param name="innerCheckers">Capability checkers to call on if a symbol is not defined locally.</param>
            <param name="version">The version of the snapshot under the scope.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot.InheritedProjectScopeCapabilitiesSnapshots">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot.ScopeIdentity">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot.Version">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot.InnerCheckers">
            <summary>
            Gets the collection of inherited checkers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot.IsProjectCapabilityPresent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectScopeCapabilitiesSnapshot.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ServiceCapabilities">
            <summary>
            Well-known project capabilities.
            </summary>
            <remarks>
            Project capability requirements must be expressed on MEF parts via:
            <see cref="T:Microsoft.VisualStudio.ProjectSystem.AppliesToAttribute"/> using one of the valid metadata names given below.
            Project capabilities are not case sensitive.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ServiceCapabilities.DiagnosticRuntimeServiceCapability">
            <summary>
            Performance regress acceptable in favor of additional runtime diagnostic checks.
            </summary>
            <remarks>
            This is the opposite of <see cref="F:Microsoft.VisualStudio.ProjectSystem.ServiceCapabilities.RetailRuntimeServiceCapability"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ServiceCapabilities.RetailRuntimeServiceCapability">
            <summary>
            Suppresses additional diagnostic checks that could otherwise cause performance to suffer.
            </summary>
            <remarks>
            This is the opposite of <see cref="F:Microsoft.VisualStudio.ProjectSystem.ServiceCapabilities.DiagnosticRuntimeServiceCapability"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ServiceCapabilities.MetricsCollectionServiceCapability">
            <summary>
            CPS collects metrics that may be helpful in analyzing performance characteristics.  Performance impact should be minimal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ServiceCapabilities.HonorProjectXmlToolsVersionWhenExists">
            <summary>
            A capability that causes MSBuild Project evaluations to consider the ToolsVersion dictated by
            the project XML to be the one actually wanted, so long as it is a toolset that is defined in
            the CPS ProjectCollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCapabilitiesProviderBase">
            <summary>
            A base class for project capabilities providers which may (or may not) change the set of project capabilities declared over time
            and that derive capabilities from the UnconfiguredProject scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCapabilitiesProviderBase.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCapabilitiesProviderBase"/> class.
            </summary>
            <param name="unconfiguredProject">The unconfigured project to which this instance applies.</param>
            <param name="name">The name of the capabilities provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCapabilitiesProviderBase.UnconfiguredProject">
            <summary>
            Gets the unconfigured project whose project capabilities are to be manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCapabilitiesProviderBase.InitializeCoreAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCapabilitiesProviderBase.DisposeCoreAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCapabilitiesProviderBase.OnChangingProjectXml(System.Object,System.EventArgs)">
            <summary>
            Responds to project write lock releases to see if it might invalidate the capabilities produced by this provider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools">
            <summary>
            Extension methods to work with MEF concepts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.AppliesToIntentionallyInconsistent">
            <summary>
            The name of MEF part metadata that identifies a part that has multiple exports that are intentionally
            decorated with inconsistent AppliesTo metadata values.
            </summary>
            <remarks>
            The value of this metadata should be a boolean value and is expected to be <c>true</c> when present.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.EmptyStringArray">
            <summary>
            An empty string array.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.DefaultReportSettings">
            <summary>
            Default report settings to use.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SemicolonDelimiter">
            <summary>
            A single instance of an array which contains a semicolon array, this is used in methods that take a char array as a delimiter char.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.CommaDelimiter">
            <summary>
            Single, static instance of an array that contains a comma, which is used to split strings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizedRuleIdentifier">
            <summary>
            Used as a metadata key to identify a rule created from <see cref="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizeEmptyRule(System.String)"/>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ProjectTreeChildrenFilter">
            <summary>
            Criteria that will skip certain branches of a project tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.DimensionNamesSeparator">
            <summary>
            Separator used to create the "canonical name aka Debug|Win32"
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizedRuleBackupName">
            <summary>
            Backup rule name used for <see cref="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizeEmptyRule(System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IsCapabilityMatch(System.String,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Checks whether a given capability expression matches against a given set of project or service capabilities.
            </summary>
            <param name="capabilityExpression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <param name="presentCapabilities">The set of capabilities present.</param>
            <returns>The result of the expression match test.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IsCapabilityMatch(System.String,System.Func{System.String,System.Object,System.Boolean},System.Object)">
            <summary>
            Checks whether a given capability expression matches against a given set of project or service capabilities.
            </summary>
            <param name="capabilityExpression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <param name="symbolDefinedCheck">The function to call to check whether a specific symbol has been defined.</param>
            <param name="symbolDefinedCheckArgument">The value to pass to <paramref name="symbolDefinedCheck"/> as the second argument.</param>
            <returns>The result of the expression match test.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.LoadedProject(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService)">
            <summary>
            Provides protection for some operation that the project will not close before the completion of some *synchronous* work.
            </summary>
            <param name="asyncTaskService">The async task service used to detect/postpone project unload.</param>
            <returns>An object to dispose at the conclusion of the asynchronous task.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the project was already unloaded before this method was invoked.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.LoadedProjectAsync``1(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Provides protection for some operation that the project will not close before the completion of some task.
            </summary>
            <typeparam name="T">The type of value returned by the joinable.</typeparam>
            <param name="asyncTaskService">The async task service used to detect/postpone project unload.</param>
            <param name="action">The action to execute within the context of a loaded project.</param>
            <param name="registerFaultHandler">A value indicating whether faulted tasks should be logged and reported to the user.</param>
            <returns>An object to dispose at the conclusion of the asynchronous task.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the project was already unloaded before this method was invoked.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.LoadedProjectAsync(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Provides protection for some operation that the project will not close before the completion of some task.
            </summary>
            <param name="asyncTaskService">The async task service used to detect/postpone project unload.</param>
            <param name="action">The action to execute within the context of a loaded project.</param>
            <param name="registerFaultHandler">A value indicating whether faulted tasks should be logged and reported to the user.</param>
            <returns>An object to dispose at the conclusion of the asynchronous task.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the project was already unloaded before this method was invoked.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SortByImportPrecedence``1(System.Collections.Generic.IEnumerable{System.Lazy{``0,Microsoft.VisualStudio.ProjectSystem.IOrderPrecedenceMetadataView}},Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Orders a sequence of imports in precedence order.
            </summary>
            <typeparam name="T">The type of the imports.</typeparam>
            <param name="imports">The sequence of imports.</param>
            <param name="orderingStyle">A spec for which direction the exports should be sorted.</param>
            <returns>An ordered sequence of imports.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ToContext(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Creates a project properties context that points to a given
            </summary>
            <param name="item">The item to create a context for.</param>
            <param name="unconfiguredProject">The unconfigured project to which this item applies.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Derive``2(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0},System.Func{``0,``1})">
            <summary>
            Constructs an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1"/> wrapper around a value constructed from an existing instance.
            </summary>
            <typeparam name="T">The type of value that acts as the data source.</typeparam>
            <typeparam name="TOut">The type of value derived from <typeparamref name="T"/>.</typeparam>
            <param name="projectVersionedValue">The versioned value that is the data source.</param>
            <param name="transform">A transform that computes a <typeparamref name="TOut"/> from a <typeparamref name="T"/>.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1"/> with the same data source versions as <paramref name="projectVersionedValue"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetSchema(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot,System.String,System.String)">
            <summary>
            Gets the rule from the specified catalog, if such a catalog and rule exist.
            </summary>
            <param name="snapshot">The snapshot to read from.</param>
            <param name="catalogName">The name of the catalog.</param>
            <param name="ruleName">The name of the rule.</param>
            <returns>The rule, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetEffectiveToolsVersion(Microsoft.VisualStudio.ProjectSystem.IProjectService,Microsoft.Build.Construction.ProjectRootElement,Microsoft.Build.Evaluation.ProjectCollection)">
            <summary>
            Gets the ToolsVersion value that the caller should pass into MSBuild to create
            an evaluated Project.
            </summary>
            <param name="projectService">The project service.</param>
            <param name="projectRootElement">The project root element to scan.</param>
            <param name="projectCollection">The project collection that will evaluate the project.</param>
            <returns>The value to pass to the Project constructor's toolsVersion parameter.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.CreateHostObjectsAsync``1(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ProjectSystem.Build.IHostObjectProvider,``0}})">
            <summary>
            Assembles a set of host objects to include in the build.
            </summary>
            <typeparam name="TMetadata">The type of metadata appear on the providers.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ToListAsync``2(System.Collections.Generic.IReadOnlyCollection{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Performances transformation a set of elements concurrently and returns a collection of the result from the transformation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizeMinimalProjectConfiguration(System.String,System.String)">
            <summary>
            Creates an IMinimalProjectConfiguration object representing the traditional Visual Studio "configuration" and "platform" properties.
            </summary>
            <param name="configuration">The simple configuration name (i.e. "Debug")</param>
            <param name="platform">The platform name (i.e. "Win32")</param>
            <returns>A VS configuration with the standard name and two dimension properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizeMinimalProjectConfigurationAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationDimensionsProvider},Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Creates an IMinimalProjectConfiguration object representing the traditional Visual Studio "configuration" and "platform" properties.
            </summary>
            <param name="hybridConfigName">The full project configuration name (i.e. "Debug|Win32")</param>
            <param name="dimensionProviders">Set of dimension providers that can supply missing components (configuration and/or platform).</param>
            <param name="unconfiguredProject">Unconfigured project that gets passed to the dimension providers.</param>
            <returns>A VS configuration with the standard name and two dimension properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizeProjectConfiguration(System.String,System.String)">
            <summary>
            Creates a ProjectConfiguration object representing the traditional Visual Studio "configuration" and "platform" properties.
            </summary>
            <param name="configuration">The simple configuration name (i.e. "Debug")</param>
            <param name="platform">The platform name (i.e. "Win32")</param>
            <returns>A configuration with the standard name and two dimension properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizeProjectConfiguration(System.String)">
            <summary>
            Creates a ProjectConfiguration object representing the traditional Visual Studio "configuration" and "platform" properties.
            </summary>
            <param name="hybridConfigName">The full project configuration name (i.e. "Debug|Win32")</param>
            <returns>A configuration with the standard name and two dimension properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ComposeCanonicalName(Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Given the Configuration and Platform property values in a project configuration, compose the "Config|Platform" string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ComposeCanonicalName(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Given the Configuration and Platform property values in a project configuration, compose the "Config|Platform" string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ComposeConfigurationCanonicalName(System.String,System.String)">
            <summary>
            Composes a "Debug" and "Win32" string into its "Debug|Win32" form.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SplitCanonicalProjectConfigurationName(System.String,System.String@,System.String@)">
            <summary>
            Splits a "Debug|Win32" string into individual "Debug" and "Win32" strings.
            </summary>
            <param name="projectConfigurationName">The "Debug|Win32" formatted string.</param>
            <param name="configurationName">The "Debug" string</param>
            <param name="platformName">The "Win32" string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.FindHint``1(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint}},System.String)">
            <summary>
            Finds specific details about the change of some file.
            </summary>
            <typeparam name="T">The type of details to search for.  Must bear a <see cref="T:System.Runtime.InteropServices.GuidAttribute"/> on the type.</typeparam>
            <param name="hints">The map of hints to search.</param>
            <param name="file">The file to find details for.</param>
            <returns>The details found, or <c>null</c> if none were available.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.FindHint(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint}},System.String,System.Guid)">
            <summary>
            Finds specific details about the change of some file.
            </summary>
            <param name="hints">The map of hints to search.</param>
            <param name="file">The file to find details for.</param>
            <param name="kind">The kind of hint to find.</param>
            <returns>The details found, or <c>null</c> if none were available.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Add``1(``0,Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint)">
            <summary>
            Adds a project change hint to its appropriate place in a map.
            </summary>
            <typeparam name="T">The type of map.</typeparam>
            <param name="hintMap">The map.</param>
            <param name="hint">The hint.</param>
            <returns>The updated map.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(System.Exception)">
            <summary>
            Rethrows a previously thrown exception while preserving the callstack.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetActiveConfigAndCancellationToken(Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject@,System.Threading.CancellationToken@)">
            <summary>
            Atomically gets the active configured project and the cancellation token for it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IsAllowed(Microsoft.VisualStudio.ProjectSystem.Build.BuildStatus)">
            <summary>
            Gets a value indicating whether the build may be requested.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IncrementCountOptimistically``2(``0@,``1)">
            <summary>
            Uses an optimistic transaction to increment the counter on some value without using locks.
            </summary>
            <typeparam name="TMap">The type of map being updated.</typeparam>
            <typeparam name="T">The type of value whose ref count is being tracked.</typeparam>
            <param name="refCountingMap">The map keeping the ref counts.</param>
            <param name="value">The value whose ref count is being incremented.</param>
            <returns><c>true</c> if the ref count was just incremented to 1; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.DecrementCountOptimistically``2(``0@,``1)">
            <summary>
            Uses an optimistic transaction to decrement the counter on some value without using locks.
            </summary>
            <typeparam name="TMap">The type of map being updated.</typeparam>
            <typeparam name="T">The type of value whose ref count is being tracked.</typeparam>
            <param name="refCountingMap">The map keeping the ref counts.</param>
            <param name="value">The value whose ref count is being decremented.</param>
            <returns><c>true</c> if the ref count was just decremented to 0; <c>false</c> otherwise.</returns>
            <remarks>If the ref count drops to 0, the entry in the map is removed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.InvokeAllCollectingExceptions(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.InvokeAllCollectingExceptions``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <typeparam name="T">The type of event args accepted by the callback.</typeparam>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.InvokeAllCollectingExceptions(System.Collections.Generic.IEnumerable{System.EventHandler},System.Object,System.EventArgs)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetResultOrThrowFirstException``1(System.Threading.Tasks.Task{``0})">
            <summary>
            This method will run a task and return it's result.  If the task fails by throwing an aggregate exception,
            the method will flatten the aggregate exception and then rethrow the first exception in the InnerExceptions list.
            </summary>
            <typeparam name="T">The return type of the task</typeparam>
            <param name="task">A task that returns T</param>
            <returns>The result of the task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.InvokeAllCollectingExceptions``1(System.Collections.Generic.IEnumerable{System.EventHandler{``0}},System.Object,``0)">
            <summary>
            Synchronously invokes all event handlers in sequence, catching any exceptions for individual handlers and throwing
            any caught exceptions as one AggregateException at the conclusion.
            </summary>
            <typeparam name="T">The type of event args accepted by the callback.</typeparam>
            <param name="handlers">The sequence of event handlers.</param>
            <param name="sender">The argument to pass to the event handlers as the sender.</param>
            <param name="args">The argument to pass to the event handlers as the second parameter.</param>
            <exception cref="T:System.AggregateException">Thrown if and only if at least one of the event handlers throw an exception.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.WhenAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Invokes an async delegate on every item of the specified sequence.
            Any and all exceptions are returned at the conclusion of the sequence
            in aggregate.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <param name="data">The sequence of data.</param>
            <param name="asyncOperation">The async operation to perform.</param>
            <returns>
            A task that completes when all async operations are done.
            The task will fault if any of the async operations faulted.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.WhenAll``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Threading.Tasks.Task},``1)">
            <summary>
            Invokes an async delegate on every item of the specified sequence.
            Any and all exceptions are returned at the conclusion of the sequence
            in aggregate.
            </summary>
            <typeparam name="T">The type of data in the sequence.</typeparam>
            <typeparam name="TArg">The type of argument to pass into the <paramref name="asyncOperation"/> delegate.</typeparam>
            <param name="data">The sequence of data.</param>
            <param name="asyncOperation">The async operation to perform.</param>
            <param name="argument">An argument to pass into the <paramref name="asyncOperation"/> delegate.</param>
            <returns>
            A task that completes when all async operations are done.
            The task will fault if any of the async operations faulted.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.DisposeIfNotNull(System.IDisposable)">
            <summary>
            Calls the <see cref="M:System.IDisposable.Dispose"/> method on an object, allowing the object to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.DisposeIfNotNullAsync(Microsoft.VisualStudio.Threading.IAsyncDisposable)">
            <summary>
            Calls the <see cref="M:Microsoft.VisualStudio.Threading.IAsyncDisposable.DisposeAsync"/> method on an object, allowing the object to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.DisposeAllIfNotNull(System.Collections.Generic.IEnumerable{System.IDisposable},System.Boolean)">
            <summary>
            Calls <see cref="M:System.IDisposable.Dispose"/> on all elements in a sequence,
            allowing the sequence itself or elements inside it to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.DisposeAllIfNotNullAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Threading.IAsyncDisposable},System.Boolean)">
            <summary>
            Calls <see cref="M:Microsoft.VisualStudio.Threading.IAsyncDisposable.DisposeAsync"/> on all elements in a sequence,
            allowing the sequence itself or elements inside it to be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.WaitAllWithLooseStaSupport(System.Threading.WaitHandle[],System.TimeSpan)">
            <summary>
            Calls <see cref="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)"/> on MTA threads,
            and provides a *rough* WaitAll behavior on STA threads (it blocks on all handles once),
            but not simultaneously.
            </summary>
            <param name="handles">The handles to wait on.</param>
            <param name="timeout">The maximum time to wait before returning <c>false</c></param>
            <returns>A value indicating whether all handles were free within the timeout.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.WaitAnyWithRetryLoop(System.Threading.WaitHandle[])">
            <summary>
            Does a WaitAny on a set of handles, but passes in a timeout and retries in a loop to
            allow for a better debugging experience when stuck on a WaitAny.
            </summary>
            <param name="handles">The handles to wait on.</param>
            <returns>The result of WaitHandle.WaitAny when sucessful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetProjectConfigurationsWithDimensionAsync(Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService,System.String,System.String)">
            <summary>
            Enumerates all the sets of conditions for known project configurations that include
            a given simple configuration name (i.e. Debug).
            </summary>
            <param name="projectConfigurationsService">The project configuration service.</param>
            <param name="dimensionName">The dimension name to search for (e.g. "Configuration" or "Platform").</param>
            <param name="dimensionValue">The dimension value to search for (e.g. "Debug" or "Release")</param>
            <returns>A sequence of matching configurations.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetAbsolutePathOf(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.String)">
            <summary>
            Gets the absolute path for some file, assuming that if it is relative it is relative to the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetProjectPropertiesProvider(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider,Microsoft.VisualStudio.ProjectSystem.INamedExportMetadataView}})">
            <summary>
            Gets the provider for properties stored in the user file of a given <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetUserPropertiesProvider(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider,Microsoft.VisualStudio.ProjectSystem.INamedExportMetadataView}})">
            <summary>
            Gets the provider for properties stored in the user file of a given <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesProvider,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Gets the properties for some context (property sheet, item type, item, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value for a given key in a dictionary, or the default value if the key is not in the dictionary.
            </summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Cast``1(System.Object)">
            <summary>
            Casts an object to a given type.
            </summary>
            <typeparam name="T">The type to cast the given object to.</typeparam>
            <remarks>
            The idea here is not to cast any object, but specifically objects that you know
            implement some interface, but you need the concrete class that implements the interface.
            If you know what concrete class you're expecting, you can use this method to cast
            and provide a meaningful error message if it fails.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.FindFirstDuplicate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks for duplicates in a sequence.
            </summary>
            <typeparam name="T">The type of elements that are being checked.</typeparam>
            <returns>
            Either the first element that occurs more than once in the sequence,
            or null if all elements in the sequence are unique.
            </returns>
            <remarks>
            An O(N) algorithm.
            Relies on GetHashCode() performing correctly.
            Discretely different objects that share a hash code are recognized as
            different objects provided their Equals methods return false.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.AreEquivalent``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Tests two dictionaries to see if their contents are identical.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.  May be null.</typeparam>
            <typeparam name="TValue">The type of value used in the dictionary.  May be null.</typeparam>
            <param name="dictionary1">One dictionary to compare.</param>
            <param name="dictionary2">The other dictionary to compare.</param>
            <param name="valueComparer">The comparer to use to determine equivalence of the dictionary values.</param>
            <returns><c>true</c> if the dictionaries' contents are equivalent.  <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.AreEquivalent``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Tests two dictionaries to see if their contents are identical.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.  May be null.</typeparam>
            <typeparam name="TValue">The type of value used in the dictionary.  May be null.</typeparam>
            <param name="dictionary1">One dictionary to compare.</param>
            <param name="dictionary2">The other dictionary to compare.</param>
            <param name="valueComparer">The comparer to use to determine equivalence of the dictionary values.</param>
            <returns><c>true</c> if the dictionaries' contents are equivalent.  <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.AreEquivalent``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},System.Collections.Immutable.IImmutableDictionary{``0,``1})">
            <summary>
            Tests two dictionaries to see if their contents are identical.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.  May be null.</typeparam>
            <typeparam name="TValue">The type of value used in the dictionary.  May be null.</typeparam>
            <param name="dictionary1">One dictionary to compare.</param>
            <param name="dictionary2">The other dictionary to compare.</param>
            <returns><c>true</c> if the dictionaries' contents are equivalent.  <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service by a given interface.
            </summary>
            <typeparam name="T">The interface to fetch an object for.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IndexOfSorted``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Discovers where an item should appear in a sorted list.
            </summary>
            <typeparam name="T">The type of elements that are stored in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="element">The element.</param>
            <param name="sort">The sorting routine that was used to sort the existing elements in the list.  A value of <c>null</c> indicates that <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.</param>
            <returns>The index where <paramref name="element"/> would appear in the list if it was present (which it may!).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ForEachAggregateExceptions``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Aggregate exceptions when applying action on the sequence items.
            </summary>
            <typeparam name="T">The type of the element that is stored in the list.</typeparam>
            <param name="sequence">The list.</param>
            <param name="action">Action to apply.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ForEachAggregateExceptionsAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Aggregate exceptions when applying action on the sequence items.
            </summary>
            <typeparam name="T">The type of the element that is stored in the list.</typeparam>
            <param name="sequence">The list.</param>
            <param name="action">Action to apply.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IndexOfSorted``2(System.Collections.Generic.IList{``0},``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Discovers where an item should appear in a sorted list.
            </summary>
            <typeparam name="T">The type of elements that are stored in the list.</typeparam>
            <typeparam name="TKey">The type of value extracted from each element that is used in the comparison.</typeparam>
            <param name="list">The list.</param>
            <param name="element">The element.</param>
            <param name="selector">A lambda that translates <typeparamref name="T"/> to <typeparamref name="TKey"/>.</param>
            <param name="sort">The sorting routine that was used to sort the existing elements in the list.  A value of <c>null</c> indicates that <see cref="P:System.Collections.Generic.Comparer`1.Default"/> should be used.</param>
            <returns>The index where <paramref name="element"/> would appear in the list if it was present (which it may!).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IsEnvironmentVariableSettingEnabled(System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether an environment variable overrides some default boolean setting.
            </summary>
            <param name="name">The name of the environment variable.</param>
            <param name="defaultValue">The default value to use if the environment variable is not defined or is set to an unrecognized value.</param>
            <returns>The value from the default or from the environment variable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ExtractUserActionableMessage(System.Exception)">
            <summary>
            Discovers the message within the specified exception that is most likely to be useful
            and friendly to the user for display in a message box.
            </summary>
            <param name="exception">The exception to derive a message from.</param>
            <returns>An exception message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.ExtractInterestingException(System.AggregateException,System.Boolean)">
            <summary>
            Discovers the exception within the specified aggregate exception that is most likely to be useful
            and friendly to the user for display in a message box.
            </summary>
            <param name="exception">The exception to derive a message from.</param>
            <param name="preferNonInvalidOperationExceptions">A value indicating whether to look for and return exceptions that are not InvalidOperationException if they are available.</param>
            <returns>An exception message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.SynthesizeEmptyRule(System.String)">
            <summary>
            Creates an empty Rule.
            </summary>
            <param name="itemType">The item type the rule represents.  May be null or empty to represent a project-level property rule.</param>
            <returns>An empty rule.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.WriteProjectTree(System.IO.TextWriter,Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Boolean,System.Int32)">
            <summary>
            Renders a tree as a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetDefaultMetadata(Microsoft.VisualStudio.ProjectSystem.IContentType)">
            <summary>
            Gets the default metdata of the given content type from the xaml files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.CreateCollection(Microsoft.VisualStudio.Threading.JoinableTaskContextNode,System.String)">
            <summary>
            Creates a JoinableTaskCollection and names it.
            </summary>
            <param name="context">The JoinableTaskContext to use to create the collection.</param>
            <param name="displayName">
            A human-readable name that may appear in hang reports.
            This should *not* be set to a value that may disclose
            personally identifiable information or other confidential data
            since this value may be included in hang reports sent to a third party.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.CreateCollection(Microsoft.VisualStudio.Threading.JoinableTaskContextNode,System.Object)">
            <summary>
            Creates a JoinableTaskCollection and names it.
            </summary>
            <param name="context">The JoinableTaskContext to use to create the collection.</param>
            <param name="owner">
            The object which owns this collection, and from which a DisplayName will derived from the
            full name  of the containing type.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IsPowerOfTwoOrZero(System.Int32)">
            <summary>
            Checks if a number is a power of two or zero.
            </summary>
            <remarks>This can be used to check if only a single enum flag is being set.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IsPowerOfTwo(System.Int32)">
            <summary>
            Checks if a number is a power of two
            </summary>
            <remarks>This can be used to check if only a non-zero single enum flag is being set.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.IsIoRelatedException(System.Exception)">
            <summary>
            If the given exception is file IO related or expected return true.
            Otherwise, return false.
            </summary>
            <param name="e">The exception to check.</param>
            <returns> True if exception is IO related or expected otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetString(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Gets a human-readable textual representation of an image moniker.
            </summary>
            <param name="imageMoniker">The image moniker. Null is allowed.</param>
            <returns>A ({guid} id) formatted string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.GetDefaultErrorReportSubmitUIOptions">
            <summary>
            Gets the default customized UI options for the submit consent dialog.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OrderAttribute">
            <summary>
            Suggests to an <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/> consumer of this export what order
            this particular export should appear in a priority-sorted list of similar exports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderAttribute"/> class.
            </summary>
            <param name="orderPrecedence">
            The precedence order, where higher numbers generally are interpreted to mean more preferred.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OrderAttribute.OrderPrecedence">
            <summary>
            Gets the precedence order, where higher numbers generally are interpreted to mean more preferred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2">
            <summary>
            A collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/> to ensure imports are sorted according
            to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
            <typeparam name="TMetadata">The metadata interface for the export.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.list">
            <summary>
            The list that contains the contents of this collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.comparer">
            <summary>
            The comparer to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.Count">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.IsReadOnly">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.Add(System.ComponentModel.Composition.ExportFactory{`0,`1})">
            <summary>
            Adds an item to the collection in the sorted position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.Contains(System.ComponentModel.Composition.ExportFactory{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.CopyTo(System.ComponentModel.Composition.ExportFactory{`0,`1}[],System.Int32)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.Remove(System.ComponentModel.Composition.ExportFactory{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`1">
            <summary>
            A collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/> to ensure imports are sorted according
            to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceExportFactoryCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2">
            <summary>
            A project capability filtering collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/>
            to ensure imports are sorted according to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
            <typeparam name="TMetadata">The metadata interface for the export.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.syncObject">
            <summary>
            An object to lock when checking cache validation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.list">
            <summary>
            The list that contains the contents of this collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.comparer">
            <summary>
            The comparer to use.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.projectCapabiliesScope">
            <summary>
            A source for the filter to apply to exports. May be null for no filtering.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.isListSorted">
            <summary>
            A value indicating whether <see cref="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.list"/> has already been sorted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.filterVersion">
            <summary>
            The version of the project capability filter when it was last used to capture a snapshot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.filteredSnapshot">
            <summary>
            A snapshot of the exports after the project capability filter has been applied.
            May be <c>null</c> if no snapshot has been created yet or since it was last invalidated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.filteredSnapshotDependencies">
            <summary>
            The capabilities dependency of the current filteredSnapshot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.lastestSnapshot">
            <summary>
            Caching the latest requirement context to prevent tracking dependencies repeatedly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckScope">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectService)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.Count">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.IsReadOnly">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.Add(System.Lazy{`0,`1})">
            <summary>
            Adds an item to the collection in the sorted position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.Contains(System.Lazy{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.CopyTo(System.Lazy{`0,`1}[],System.Int32)">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.Remove(System.Lazy{`0,`1})">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator for the contents of the array.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.System#Collections#Generic#IEnumerable{System#Lazy{T,TMetadata}}#GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.Single">
            <summary>
            Gets the applicable export when exactly one matching export is expected.
            </summary>
            <returns>The exported value.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException">Thrown when there is not exactly 1 applicable export.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.SingleOrDefault">
            <summary>
            Gets the applicable export when 0 or 1 matching export is expected.
            </summary>
            <returns>The exported value, or <c>null</c> if no exported values were found.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException">Thrown when there is not exactly 1 applicable export.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.FirstOrDefault">
            <summary>
            Returns the first (best) applicable export, if any.
            </summary>
            <returns>The exported value, or <c>null</c> if no applicable exports are available.</returns>
            <remarks>
            This is defined to avoid the object allocations for this common operation the Linq extension method would incur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.First">
            <summary>
            Returns the first (best) applicable export, and throws if no export is found.
            </summary>
            <returns>The exported value, or <c>null</c> if no applicable exports are available.</returns>
            <remarks>
            This is defined to avoid the object allocations for this common operation the Linq extension method would incur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.GetFilteredSnapshot">
            <summary>
            Gets a current snapshot of the filtered exports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.WhereAppliesTo(System.Collections.Generic.IEnumerable{System.Lazy{`0,`1}},Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot,System.Collections.Immutable.ImmutableDictionary{System.String,System.Boolean}.Builder)">
            <summary>
            Filters a sequence of exports to just those exports whose AppliesTo expressions are satisfied
            by the specified set of project capabilities.
            </summary>
            <param name="exports">The sequence of exports to be filtered.</param>
            <param name="projectCapabilityHitTester">The provider for hit testing of specific capabilities.</param>
            <param name="dependenciesBuilder">A dictionary build to collect all the capabilities evaluation results.</param>
            <returns>The sequence of exports, filtered to only include those that should apply to the project whose capabilities were specified.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`2.InvalidateFilteredSnapshot">
            <summary>
            Marks the most recent export snapshot has invalid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1">
            <summary>
            A project capability filtering collection that can be used with a MEF <see cref="T:System.ComponentModel.Composition.ImportManyAttribute"/>
            to ensure imports are sorted according to some precedence rule.
            </summary>
            <typeparam name="T">The type of imported value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckScope">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.IProjectService)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ImportOrderPrecedenceComparer.PreferenceOrder,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OrderPrecedenceImportCollection`1"/> class.
            </summary>
            <param name="orderingStyle">A value indicating how the precedence order should be applied for sorting this instance.</param>
            <param name="projectCapabilityCheckProvider">The source for the filter to apply to exports. May be null for no filtering.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1">
            <summary>
            A base class for project value data sources that are derivatives of others.
            </summary>
            <typeparam name="T">The type of value produced by this data source.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.firstLink">
            <summary>
            The link to dispose of to terminate the dataflow.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.publicBroadcastBlock">
            <summary>
            The public broadcast block exposed by <see cref="P:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.SourceBlock"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.projectLockService">
            <summary>
            The project lock service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1"/> class.
            </summary>
            <param name="commonServices">The CPS common services.</param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
            <param name="registerDataSource"><c>true</c> to register the data source.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.ContainingProject">
            <summary>
            The project which owns the data source block.  It can be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ChainedProjectValueDataSourceBase`1.LinkExternalInput(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`0}})">
            <summary>
            Links an external data source to this one.
            </summary>
            <param name="targetBlock">The block to which the upstream data source should be linked when ready for broadcast.</param>
            <returns>A value to dispose of to break the first link in the dataflow.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources">
            <summary>
            Project data source constants and utility methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ActiveProjectConfiguration">
            <summary>
            Gets the identity used to represent the data source that increments each time the active project configuration changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ConfiguredProjectVersion">
            <summary>
            The value of <see cref="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectVersion"/> at the time the value was produced.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ConfiguredProjectIdentity">
            <summary>
            The identity of a configured project, this is to add additional information to ensure we are checking the right configured project version.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.AdditionalRuleDefinitionsVersion">
            <summary>
            The identity used to represent the data source that increments each time the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IAdditionalRuleDefinitionsService"/> changes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SharedImportSnapshotsVersion">
            <summary>
            The identity used to represent the data source that increments each time any shared import file is modified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.InconsistentDataVersion">
            <summary>
            The identity used to represent whether the data coming from a consisent input value.
            The version 0 means the input data is in the consistent state, 1 means it uses some input, which has newer data than the others.
            A data source block publishes mixed version data, must publish its data based on the minimal version of its sources.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GlobalProjectCollectionGlobalProperties">
            <summary>
            The identity used to represent the data source that increments each time a global property is changed on the GlobalProjectCollection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SolutionGlobalProperties">
            <summary>
            The identity used to represent the data source that increments each time a global property changes that came from the solution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.EmptyVersions">
            <summary>
            The empty version numbers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.VersionEqualityComparer">
            <summary>
            Gets a project value version equality checker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.IsSatisfiedBy(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement},Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions)">
            <summary>
            Gets a value indicating whether all data sources that went into the construction of a given tree snapshot
            are current or newer than a given map of required data source versions.
            </summary>
            <param name="versionRequirements">The map of data sources and required versions.</param>
            <param name="value">The snapshot to check data sources on.</param>
            <returns><c>true</c> if all data sources meet requirements; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ToRequirements(Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions)">
            <summary>
            Translates a map of project value versions into a map of requirements for those values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.CreateVersionRequirement(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Boolean)">
            <summary>
            Create a data source version requirement to match the version of a configured project.
            </summary>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <param name="allowMissingData">Allow the dataflow to meet the condition, if it doesn't depend on the configured project.</param>
            <returns>A version requirement</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetDataSourceVersion(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Get the data source version of a configured project.
            </summary>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <returns>A data source version based on the configured project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetSpecificVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable,System.Boolean,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is data that satisfies specific data source version requirements.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for data.</param>
            <param name="dataSourceKey">The specific data source whose specific version is sought.</param>
            <param name="dataSourceVersion">The specific version that is required.</param>
            <param name="allowMissingData">A value indicating whether the data source entirely missing is considered satisfactory.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetSpecificVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement},System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is data that satisfies specific data source version requirements.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="versionRequirements">The version requirements of the resulting data.</param>
            <param name="linkCreator">The function that forms the link between the source and target blocks. May be null to create a default link.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown (via the returned task) if <paramref name="cancellationToken"/> is canceled or <paramref name="valueSource"/> completes prior to supplying a qualifying value.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetLatestVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetLatestVersionAsync``1(Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{``0},Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetLatestVersionAsync``1(Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{``0},Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for project values.</param>
            <param name="dataSourceRegistry">The registry of data sources to refer to for looking up the latest version information.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetLatestVersionAsync(Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource{Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate},Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="configuredProject">The configured project whose version is to be used.</param>
            <param name="ruleNames">The names of the rules to retrieve from the snapshot.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SyncLinkTo(System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions}},System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Jointly links several source blocks to a target block, taking care to ensure
            that any message posted to the target block carries a set of messages from the
            source blocks that are all based on the same version of backing data.
            </summary>
            <param name="sourceBlocks">The blocks to be joined.</param>
            <param name="target">The block to receive the joined messages.</param>
            <param name="linkOptions">The options to apply to the link to the target block.</param>
            <param name="cancellationToken">A cancellation token to cancel the link (without throwing InvalidOperationExceptions due to a project unload).</param>
            <returns>An object that may be disposed to terminate the link.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SyncLinkTo``6(Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``1}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``2}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``3}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``4}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``5}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Tuple{``0,``1,``2,``3,``4,``5}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <typeparam name="T3">The type of the value that comes from block <paramref name="source3"/>.</typeparam>
            <typeparam name="T4">The type of the value that comes from block <paramref name="source4"/>.</typeparam>
            <typeparam name="T5">The type of the value that comes from block <paramref name="source5"/>.</typeparam>
            <typeparam name="T6">The type of the value that comes from block <paramref name="source6"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="source3">A source block.</param>
            <param name="source4">A source block.</param>
            <param name="source5">A source block.</param>
            <param name="source6">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SyncLinkTo``5(Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``1}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``2}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``3}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``4}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Tuple{``0,``1,``2,``3,``4}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <typeparam name="T3">The type of the value that comes from block <paramref name="source3"/>.</typeparam>
            <typeparam name="T4">The type of the value that comes from block <paramref name="source4"/>.</typeparam>
            <typeparam name="T5">The type of the value that comes from block <paramref name="source5"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="source3">A source block.</param>
            <param name="source4">A source block.</param>
            <param name="source5">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SyncLinkTo``4(Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``1}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``2}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``3}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Tuple{``0,``1,``2,``3}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <typeparam name="T3">The type of the value that comes from block <paramref name="source3"/>.</typeparam>
            <typeparam name="T4">The type of the value that comes from block <paramref name="source4"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="source3">A source block.</param>
            <param name="source4">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SyncLinkTo``3(Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``1}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``2}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Tuple{``0,``1,``2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <typeparam name="T3">The type of the value that comes from block <paramref name="source3"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="source3">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SyncLinkTo``2(Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``1}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{System.Tuple{``0,``1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Links several source blocks carrying project versioned valued to a target block
            such that only consistently versioned tuples are posted to the target block.
            </summary>
            <typeparam name="T1">The type of the value that comes from block <paramref name="source1"/>.</typeparam>
            <typeparam name="T2">The type of the value that comes from block <paramref name="source2"/>.</typeparam>
            <param name="source1">A source block.</param>
            <param name="source2">A source block.</param>
            <param name="target">The block that receives consistently versioned tuples from the source blocks.</param>
            <param name="linkOptions">
            The link options to apply between the source blocks and the target block.
            If <c>null</c> the default behavior is to propagate completion.
            </param>
            <param name="cancellationToken">A token whose cancellation terminates the flow of data.</param>
            <returns>A link that may be disposed to terminate the flow of data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SyncLinkOptions``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Boolean)">
            <summary>
            Wraps a source block and some link options into a structure for convenient passing as
            an argument to one of the SyncLinkTo methods.
            </summary>
            <typeparam name="T">The type of data published by the source block.</typeparam>
            <param name="sourceBlock">The source block.</param>
            <param name="linkOptions">The link options (optional).  The default is for PropagateCompletion = true</param>
            <param name="initialDataAsNewForProjectSubscriptionUpdate">
            If <c>true</c>, causes the first IProjectSubscriptionUpdate message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first IProjectSubscriptionUpdate message at its default value of describing the project and its true prior state.
            </param>
            <returns>The block and link structure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.JoinUpstreamDataSources(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.IJoinableProjectValueDataSource[])">
            <summary>
            Links a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/> to a series of other <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/>s.
            </summary>
            <param name="factory">The factory whose tasks are automatically added to the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/> that should join the others in <paramref name="sources"/>.</param>
            <param name="faultHandlerService">The service to send any internal failures to.</param>
            <param name="sources">The data sources whose <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/>s are to be joined.</param>
            <returns>A value that may be disposed of to cancel the Join.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.JoinUpstreamDataSources(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IJoinableProjectValueDataSource})">
            <summary>
            Links a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/> to a series of other <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/>s.
            </summary>
            <param name="factory">The factory whose tasks are automatically added to the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/> that should join the others in <paramref name="sources"/>.</param>
            <param name="faultHandlerService">The service to send any internal failures to.</param>
            <param name="sources">The data sources whose <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskCollection"/>s are to be joined.</param>
            <returns>A value that may be disposed of to cancel the Join.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.MergeDataSourceVersions(System.Collections.Generic.IEnumerable{System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable}})">
            <summary>
            Create a combined version number from a collection of version numbers from the source of dataflow blocks.
            This method is to help a data source block which is not using SyncLinkTo to produce a version number for the output from mixed versions of the source data.
            A special InconsistentDataVersion mark will be added to indicate whether the output is coming from a consistent data or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetLatestVersionRequirements(Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry,Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions)">
            <summary>
            Gets the version requirements for a project value that would guarantee the most current data,
            given an (older) sample of the data.
            </summary>
            <param name="dataSourceRegistry">The data source registry we can use to find the latest version numbers.</param>
            <param name="dataSample">A potentially less-than-current value that will provide an idea of what data sources are relevant.</param>
            <returns>A version requirement specification.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.IsNewerThan(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Checks whether one project value's version is decidely newer than another.
            </summary>
            <param name="this">The version map that might be newer.</param>
            <param name="that">The version map that might be older.</param>
            <returns>
            <c>true</c> if <paramref name="this"/> is newer than <paramref name="that"/>;
            <c>false</c> if it is older, or undefined due to mixes of version source information.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetSpecificVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is data that satisfies specific data source version requirements.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="valueSource">The source block for tree snapshots.</param>
            <param name="matchTest">The function that determines whether a given value meets requirements.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.PostProcessProjectSubscriptionUpdate(Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions[],System.Collections.Immutable.ImmutableList{Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink{Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions}},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions})">
            <summary>
            Post process the received IProjectSubscriptionUpdate(s) based on what we ever submitted last time.
            - This method will filter out unwanted rules.
              We may receive more than we want. e.g. we specified 4 rules, but the received data contains 10 rules.
            - Normalize the first data.
              If "InitialDataAsNewForProjectSubscriptionUpdate" is true, this method will create a new "diff", by putting everything in added items.
              If "InitialDataAsNewForProjectSubscriptionUpdate" is false, this method will ensure an empty "diff" and an empty "before".
            - Smooth disruption diff.
              The "diff" of the received data may not reflect the actual "diff" comparing to the last submitted data, as some intermediate versioned data may be skipped.
              This method will regenerate the "diff" by comparing the received data to last submitted data.
            </summary>
            <param name="values">original versioned values, and will update the versioned IProjectSubscriptionUpdate value in place.</param>
            <param name="sourceBlocks">source blocks which produce the versioned values.</param>
            <param name="lastSubmittedValues">last submitted values, used to generate the smooth diff.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.CheckValidVersionProgression(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Boolean)">
            <summary>
            Verifies that important versioning rules always hold true.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException">Thrown if any errors are found.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.AreAllDataSourcesAtLeastAsNew(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Checks whether one data source map is at least as new as another.
            </summary>
            <param name="oldDataSourceVersions">The expected older data source.</param>
            <param name="dataSourceVersions">The expected newer data source.</param>
            <returns><c>true</c> if all entries in <paramref name="dataSourceVersions"/> have version numbers that are at least as new as those found in <paramref name="oldDataSourceVersions"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.CreateDataSourceVersionForwardOnlyFilteringBlock``1">
            <summary>
            Creates a dataflow propagator block that filters out messages that do not conform to the expected data source version incrementing flow.
            </summary>
            <typeparam name="T">The type of project versioned value this block propagates.</typeparam>
            <returns>A new propagator block.</returns>
            <remarks>
            This block generally is simply a pass-through block. But if an observed value has data source versions that are older
            than a previously observed value, that value is quietly dropped. The expectation is that another value with a more recent
            data source version will appear shortly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.AddVersionVerifierBlock``1(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.Boolean)">
            <summary>
            Links to the specified broadcast block and reports certain inconsistencies in the progression of data source versions.
            </summary>
            <typeparam name="T">The type of versioned data being produced.</typeparam>
            <param name="sourceBlock">The broadcast block. It is important that this be a broadcast block to avoid this verifier block stealing messages from other recipients.</param>
            <param name="unconfiguredProjectLevel">
            <c>true</c> if the values produced by the block are expected to contain <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ActiveProjectConfiguration"/>
            any time it contains <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ConfiguredProjectVersion"/>; <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.AddVersionVerifierPropagatorBlock``1(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.Boolean)">
            <summary>
            Creates a version verifier propagator block and links the specified <paramref name="sourceBlock"/> to it.
            This allows the caller to expose a block that is fully vetted for version incremental updates before broadcasting.
            </summary>
            <typeparam name="T">The type of value published by the block.</typeparam>
            <param name="sourceBlock">The source block to verify.</param>
            <param name="configuredProjectLevel"><c>true</c> if the block belongs to the ConfiguredProject scope.</param>
            <returns>
            A (non-broadcast) block that repeats the messages from <paramref name="sourceBlock"/>
            but will fault rather than allow invalid progression of version numbers.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.CreateVersionVerifierPropagatorBlock``1(System.Boolean)">
            <summary>
            Creates a propagator block that reports certain inconsistencies in the progression of data source versions.
            </summary>
            <typeparam name="T">The type of versioned data being produced.</typeparam>
            <param name="unconfiguredProjectLevel">
            <c>true</c> if the values produced by the block are expected to contain <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ActiveProjectConfiguration"/>
            any time it contains <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ConfiguredProjectVersion"/>; <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.AsBroadcastBlock``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.String,System.Func{``0,``0})">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> and links the specified <paramref name="sourceBlock"/> to it.
            </summary>
            <typeparam name="T">The type of value produced by the source block.</typeparam>
            <param name="sourceBlock">The source block.</param>
            <param name="name">The name of the dataflow block.</param>
            <param name="cloningFunction">The function that clones the value for each receiver. May be <c>null</c> if <typeparamref name="T"/> is immutable.</param>
            <returns>The broadcast block.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.IsSatisfiedBy(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Gets a value indicating whether all data sources that went into the construction of a given tree snapshot
            are current or newer than a given map of required data source versions.
            </summary>
            <param name="versionRequirements">The map of data sources and required versions.</param>
            <param name="dataSourceVersions">The version of the snapshot to check data sources on.</param>
            <returns><c>true</c> if all data sources meet requirements; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.GetLatestVersionAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement},Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry,System.Func{System.Threading.Tasks.Dataflow.ISourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{``0}},System.IDisposable},System.Threading.CancellationToken)">
            <summary>
            Returns a task whose result is a value that is current with respect to the project's version at the time this call is made.
            </summary>
            <typeparam name="T">The type of data produced by the source block.</typeparam>
            <param name="sourceBlock">The source block for project values.</param>
            <param name="versionMap">The starting version requirements.</param>
            <param name="dataSourceRegistry">The registry of data sources to refer to for looking up the latest version information.</param>
            <param name="linkCreator">An optional delegate to use for creating links between blocks.</param>
            <param name="cancellationToken">A token whose cancellation marks lost interest in the result of this task.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink`1">
            <summary>
            A simple wrapper around a source block and link options.
            </summary>
            <typeparam name="T">The type of values produced by the source block.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink`1.SourceBlock">
            <summary>
            Gets or sets the source block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink`1.LinkOptions">
            <summary>
            Gets or sets the link options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.SourceBlockAndLink`1.InitialDataAsNewForProjectSubscriptionUpdate">
            <summary>
            If <c>true</c>, causes the first IProjectSubscriptionUpdate message the target block receives to present the current project state as if it were just added to the project.
            The snapshot given for the prior state will be empty and the diff will include all data as an add.
            A <c>false</c> value here will leave the first IProjectSubscriptionUpdate message at its default value of describing the project and its true prior state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException">
            <summary>
            An exception that describes an invalid progress of project data source version metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException.#ctor(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException.OldDataSourceVersions">
            <summary>
            Gets the prior data source versions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException.NewDataSourceVersions">
            <summary>
            Gets the proposed new data source versions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException.ToString">
            <summary>
            Returns a description of the error causing this exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.DataSourceRegressionException.DumpToString(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Dumps the version table to a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ProjectVersionedValueEqualityComparer">
            <summary>
            Evaluates equality of project value version maps.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ProjectVersionedValueEqualityComparer.Default">
            <summary>
            The singleton instance to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ProjectVersionedValueEqualityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ProjectVersionedValueEqualityComparer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ProjectVersionedValueEqualityComparer.Equals(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectDataSources.ProjectVersionedValueEqualityComparer.GetHashCode(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1">
            <summary>
            A common base class for project value data sources.
            </summary>
            <typeparam name="T">The type of value produced by this data source.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.disposableBag">
            <summary>
            A bag of values to be disposed of with this instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.dataSourceRegistry">
            <summary>
            The data source registry from the scope that this data source block belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1"/> class.
            </summary>
            <param name="commonServices">The CPS common services.</param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
            <param name="registerDataSource"><c>true</c> to register the data source.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContextNode,Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService,Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1"/> class.
            </summary>
            <param name="joinableTaskContextNode">The joinable task context.</param>
            <param name="faultHandlerService">The project fault handler service.</param>
            <param name="dataSourceRegistry">
            The project data source registry for the applicable scope, if this instance should register itself.
            </param>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.DataSourceKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.DataSourceVersion">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.Microsoft#VisualStudio#ProjectSystem#IProjectValueDataSource#SourceBlock">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.ProjectFaultHandlerService">
            <summary>
            Gets the project fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.JoinableCollection">
            <summary>
            Gets the collection of all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.JoinableFactory">
            <summary>
            Gets the factory to use for all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.FaultSeverity">
            <summary>
            The impact to the project when the current data source failed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.Microsoft#VisualStudio#ProjectSystem#IJoinableProjectValueDataSource#Join">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.JoinUpstreamDataSources(Microsoft.VisualStudio.ProjectSystem.IJoinableProjectValueDataSource[])">
            <summary>
            Joins a set of data sources, arranging to disjoin them when this instance is disposed.
            </summary>
            <returns>A value that *may* be disposed of to cancel this join.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.JoinUpstreamDataSources(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IJoinableProjectValueDataSource})">
            <summary>
            Joins a set of data sources, arranging to disjoin them when this instance is disposed.
            </summary>
            <returns>A value that *may* be disposed of to cancel this join.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.MonitorDataSourceFault(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{`0}},Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Monitor the data source, and report as a product issue, when the data flow failed.
            </summary>
            <param name="sourceBlock">The final data flow block of this data source</param>
            <param name="project">The project, which this dataflow block belongs to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectValueDataSourceBase`1.ReportDataSourceUserFault(System.Exception,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Report an error caused by the customer's environment to the user.
            </summary>
            <param name="exception">Exception containing the fault information.</param>
            <param name="severity">The severity of the failure if one occurs.</param>
            <param name="project">The project related to the failure, if applicable and if an error occurs.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectVersionedValue`1">
            <summary>
            An immutable implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1"/>.
            </summary>
            <typeparam name="T">The type of value being represented.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectVersionedValue`1.#ctor(`0,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectVersionedValue`1"/> class.
            </summary>
            <param name="value">The project versioned value.</param>
            <param name="dataSourceVersions">The versions of the data sources that went into the production of this value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectVersionedValue`1.Value">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectVersionedValue`1.DataSourceVersions">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement">
            <summary>
            Describes a version requirement for a particular data source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.#ctor(System.IComparable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement"/> class.
            </summary>
            <param name="version">The version required of the data source.</param>
            <param name="allowMissingData">A value indicating whether no data at all from a data source is considered out of date data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.Version">
            <summary>
            Gets the version required of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.AllowMissingData">
            <summary>
            Gets a value indicating whether no data at all from a data source is considered out of date data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.op_Equality(Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement,Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement)">
            <summary>
            Returns true if two versions are identical.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.op_Inequality(Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement,Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement)">
            <summary>
            Returns true if two versions are not equal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.ToString">
            <summary>
            Writes this instance as a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.Equals(System.Object)">
            <summary>
            Returns true if two TreeDataSourceVersionRequirement's are equal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectVersionRequirement.GetHashCode">
            <summary>
            Returns the versions' hashcode.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeDescription">
            <summary>
            A simple implementation of the immutable <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeDescription.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeDescription"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeDescription.Before">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeDescription.Difference">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeDescription.After">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint">
            <summary>
            A helper class for creating file-related project change hints.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.AddedFileAsString">
            <summary>
            Represents a change that adds a file to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.EditedFileAsString">
            <summary>
            Represents a change that edits a file inside the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectOnlyAsString">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectAndStorageAsString">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.AddedFolderAsString">
            <summary>
            Represents a change that adds a folder to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectOnlyAsString">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectAndStorageAsString">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.AddedFile">
            <summary>
            Represents a change that adds a file to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.EditedFile">
            <summary>
            Represents a change that edits a file inside the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectOnly">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFileFromProjectAndStorage">
            <summary>
            Represents a change that entirely removes a file from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.AddedFolder">
            <summary>
            Represents a change that adds a folder to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectOnly">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.RemovedFolderFromProjectAndStorage">
            <summary>
            Represents a change that entirely removes a folder from the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="files">The full paths to the relevant files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="changeAlreadyOccurred">A value indicating whether this is a "catch-up" hint, and TrackProjectDocument events should be suppressed.</param>
            <param name="files">The full paths to the relevant files.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityHint.Files">
            <summary>
            Gets the full paths of the affected files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint">
            <summary>
            A helper class for creating file rename related project change hints.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint.RenamedFolderAsString">
            <summary>
            Represents a change that renames a directory related to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint.RenamedFileAsString">
            <summary>
            Represents a change that renames a file related to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint.RenamedFolder">
            <summary>
            Represents a change that renames a directory related to the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint.RenamedFile">
            <summary>
            Represents a change that renames a file related to the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="beforeAndAfterFiles">The full paths to the relevant files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint.#ctor(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Guid,System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint"/> class.
            </summary>
            <param name="project">The project in which a file was impacted.</param>
            <param name="changeKind">The kind of change applied to the file.</param>
            <param name="changeAlreadyOccurred">A value indicating whether this is a "catch-up" hint, and TrackProjectDocument events should be suppressed.</param>
            <param name="beforeAndAfterFiles">The full paths to the relevant files.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeFileSystemEntityRenameHint.RenamedFiles">
            <summary>
            Gets the full paths of the affected files, where the key is the old path and the value is the new path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase">
            <summary>
            A convenient base class for building project change hint types.
            </summary>
            <remarks>
            Derived types should be immutable and thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase.#ctor(System.Guid,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase"/> class.
            </summary>
            <param name="kind">The kind of hint being created.</param>
            <param name="project">The unconfigured project that the hint relates to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase.#ctor(System.Guid,System.Boolean,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase"/> class.
            </summary>
            <param name="kind">The kind of hint being created.</param>
            <param name="changeAlreadyOccurred">A value indicating whether this is a "catch-up" hint, and TrackProjectDocument events should be suppressed.</param>
            <param name="project">The unconfigured project that the hint relates to.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase.Kind">
            <summary>
            Gets a unique identifier for the kind of hint this instance represents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase.ChangeAlreadyOccurred">
            <summary>
            Gets a value indicating whether the change being hinted has already occurred.
            </summary>
            <remarks>
            A <c>true</c> value here suggests that the hint-author is helping to "catch up" to changes made
            by a third party. Therefore if this is <c>true</c>, IVsTrackProjectDocument events should not be raised
            when processing hints whose value for this property is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintBase.UnconfiguredProject">
            <summary>
            Gets the project that was changed that this hint describes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintKindAttribute">
            <summary>
            Causes the decorated part to activate and receive notifications regarding project change hints of a given kind.
            </summary>
            <devremarks>
            Dev15 TODO: Make this attribute internal, as we'd prefer most folks to use the
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintService.Subscribe(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintReceiver,System.Collections.Generic.IEnumerable{System.Guid})"/> method instead so that we don't
            activate parts before they need notifications.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintKindAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintKindAttribute"/> class.
            </summary>
            <param name="hintKindGuid">The string representation of the GUID that identifies the kind of change the listener is interested in.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeHintKindAttribute.ProjectChangeHintKind">
            <summary>
            Gets the kind of change the listener is interested in.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory">
            <summary>
            A joinable task factory that coordinates with the CPS project lock service to avoid deadlocks from when
            the main thread wants a project lock, and a threadpool thread holding a project lock wants to switch
            to the main thread at the same time.
            </summary>
            <remarks>
            The strategy is to break the deadlock by allowing the background thread that already has the project lock
            to re-enter the main thread and get its work done so that it will eventually release the project lock,
            allowing the main thread to acquire the lock and continue.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory.#ctor(System.Lazy{Microsoft.VisualStudio.ProjectSystem.IProjectLockService},Microsoft.VisualStudio.Threading.JoinableTaskContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory.#ctor(System.Lazy{Microsoft.VisualStudio.ProjectSystem.IProjectLockService},Microsoft.VisualStudio.Threading.JoinableTaskCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory.OnTransitioningToMainThread(Microsoft.VisualStudio.Threading.JoinableTask)">
            <summary>
            Raised when a joinable task has requested a transition to the main thread.
            </summary>
            <param name="joinableTask">The task requesting the transition to the main thread.</param>
            <remarks>
            This event may be raised on any thread, including the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwareJoinableTaskFactory.OnTransitionedToMainThread(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)">
            <summary>
            Raised whenever a joinable task has completed a transition to the main thread.
            </summary>
            <param name="joinableTask">The task whose request to transition to the main thread has completed.</param>
            <param name="canceled">A value indicating whether the transition was cancelled before it was fulfilled.</param>
            <remarks>
            This event is usually raised on the main thread, but can be on another thread when <paramref name="canceled"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost">
            <summary>
            Bootstraps CPS when no host IDE is available with a service-level MEF composition.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.CreateSelfHostAsync(System.Collections.Generic.IReadOnlyCollection{System.Reflection.Assembly},Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel,System.Collections.Immutable.IImmutableSet{System.String},System.Boolean)">
            <summary>
            Creates a project service that operates over the given list of project assemblies.
            </summary>
            <param name="assemblies">The project assemblies that will make up the catalog.</param>
            <param name="threadingModel">The threading model.</param>
            <param name="serviceCapabilities">Additional service capabilities to define.</param>
            <param name="throwCompositionErrors">A flag indicating whether to throw exception when composition error happens.</param>
            <returns>The CPS project service.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.CreateSelfHostContainerAsync(System.Collections.Generic.IReadOnlyCollection{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Creates a MEF container around the specified assemblies.
            </summary>
            <param name="assemblies">The project assemblies that will make up the catalog.</param>
            <param name="throwCompositionErrors">A flag indicating whether to throw exception when composition error happens.</param>
            <returns>The MEF container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.CreateSelfHostContainer(Microsoft.VisualStudio.Composition.ComposableCatalog,System.Boolean)">
            <summary>
            Creates a project service that operates over the specified catalog.
            </summary>
            <param name="catalog">The catalog containing all necessary project assemblies.</param>
            <param name="throwCompositionErrors">A flag indicating whether to throw exception when composition error happens.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.GetProjectService(Microsoft.VisualStudio.ProjectSystem.ProjectServiceThreadingModel,System.Collections.Immutable.IImmutableSet{System.String},System.Nullable{System.Boolean},Microsoft.VisualStudio.Composition.ExportProvider)">
            <summary>
            Initializes CPS within the container.
            </summary>
            <param name="threadingModel">The threading model.</param>
            <param name="serviceCapabilities">Additional service capabilities to define.</param>
            <param name="diagnosticRuntime">A flag indicating whether to load CPS in diagnostic mode.</param>
            <param name="container">The MEF container.</param>
            <returns>The CPS <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectService"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.AdditionalEnvironmentVariables">
            <summary>
            A class whose lifetime temporarily sets an environment variable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.AdditionalEnvironmentVariables.name">
            <summary>
            The name of the environment variable to set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.AdditionalEnvironmentVariables.oldValue">
            <summary>
            The value of the environment variable to restore upon disposal of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.AdditionalEnvironmentVariables.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.AdditionalEnvironmentVariables"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectServiceSelfHost.AdditionalEnvironmentVariables.Dispose">
            <summary>
            Restores the old value of the variable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectThreadingServiceExtensions">
            <summary>
            Extentsion methods for <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectThreadingServiceExtensions.SwitchToUIThread(Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,System.Runtime.CompilerServices.StrongBox{System.Boolean})">
            <summary>
            Gets an awaitable whose completion will execute on the UI thread, mitigating deadlocks and unwanted reentrancy.
            </summary>
            <param name="threading">The threading service from CPS</param>
            <param name="yielded">If provided, a value set to <c>true</c> if the caller was not previously on the UI thread.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools">
            <summary>
            Provides tools for working with CPS snapshots.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.CompareSnapshots(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Compares to project snapshots and generates a change description for them.
            </summary>
            <param name="before">The "before" snapshot.</param>
            <param name="after">The "after" snapshot.</param>
            <param name="renameHints">Hints for resolving new/missing items as renames.  Each tuple represents the old and new name in a rename operation.</param>
            <returns>A change description.  Never null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.SynthesizeDiffFromNothing(System.Collections.Immutable.IImmutableDictionary{System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot})">
            <summary>
            Generates a project delta object that treats a project snapshot as if it is all newly added data.
            </summary>
            <param name="initialSnapshot">The snapshot to treat as all new data.</param>
            <returns>A dictionary whose keys are rule names and values are change descriptions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.GetSimpleRenames(System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Extracts the rename hints that qualify as simple user renames.
            </summary>
            <param name="beforeItems">The items appearing in a "before" snapshot.</param>
            <param name="afterItems">The items appearing in an "after" snapshot.</param>
            <param name="renameHints">The rename hints collected recently.</param>
            <returns>The map of simply renamed files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ApplyRenameHints(System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableDictionary{System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String}},System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}},System.Collections.Immutable.ImmutableHashSet{System.String}@,System.Collections.Immutable.ImmutableHashSet{System.String}@)">
            <summary>
            Modifies sets of added removed items based on rename hints.
            </summary>
            <param name="before">The items appearing in a "before" snapshot.</param>
            <param name="after">The items appearing in an "after" snapshot.</param>
            <param name="renameHints">The rename hints collected recently.</param>
            <param name="addedItems">The set of items that appear only in the 'after' snapshot.</param>
            <param name="removedItems">The set of items that appear only in the 'before' snapshot.</param>
            <returns>The map of simply renamed files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ContainsKeyWithOrdinalStringComparison``1(System.Collections.Immutable.IImmutableDictionary{System.String,``0},System.String)">
            <summary>
            Checks if the dictionary contains a key using ordinal (case sensitive) comparison even if the dictionary is ignore case.
            </summary>
            <param name="dictionary">The dictionary to search into.</param>
            <param name="key">The key to searching for.</param>
            <returns>True if the item was found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.EmptyProjectRuleSnapshot">
            <summary>
            Represents a snapshot that does not contain any data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.EmptyProjectRuleSnapshot.#ctor(System.String,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.EmptyProjectRuleSnapshot"/> class.
            </summary>
            <param name="ruleName">The name of the rule this snapshot represents.</param>
            <param name="dataSourceVersions">The data source versions to associate with this empty snapshot.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.EmptyProjectRuleSnapshot.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.EmptyProjectRuleSnapshot.Items">
            <summary>
            Gets an empty dictionary of items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.EmptyProjectRuleSnapshot.Properties">
            <summary>
            Gets an empty dictionary of properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.EmptyProjectRuleSnapshot.DataSourceVersions">
            <summary>
            Gets the version of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot"/> from which this rule snapshot was created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff">
            <summary>
            An immutable description of the difference between two <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.EmptyInstance">
            <summary>
            An static empty instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.changedItems">
            <summary>
            backing field for lazily initialized changed items
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.changedProperties">
            <summary>
            backing field for lazily initialized changed properties
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.addedRemovedItems">
            <summary>
            backing field of lazily initialized added and removed items
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff"/> class.
            </summary>
            <param name="before">The before snapshot.</param>
            <param name="after">The after snapshot.</param>
            <param name="renameHints">Rename hints, if available.  May be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff"/> class
            that describes no changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.AnyChanges">
            <summary>
            Gets a value indicating whether the snapshots being compared have any differences at all.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.AddedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.RemovedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.RenamedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.ChangedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.ChangedProperties">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes">
            <summary>
            data holder to lazily calculate changes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes.AddedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes.RemovedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes.RenamedItems">
            <summary>
            See IProjectChangeDiff
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes"/> class
            that describes no changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes.#ctor(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot,System.Collections.Immutable.IImmutableList{System.Tuple{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.SnapshotTools.ProjectChangeDiff.Changes"/> class.
            </summary>
            <param name="before">The before snapshot.</param>
            <param name="after">The after snapshot.</param>
            <param name="renameHints">Rename hints, if available.  May be null.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.StandardProjectConfiguration">
            <summary>
            Core implementation of ProjectConfiguration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.StandardProjectConfiguration.#ctor(System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.StandardProjectConfiguration"/> class.
            </summary>
            <param name="name"> The name of this project configuration. Cannot be null or empty. </param>
            <param name="dimensions"> The names and values of configuration dimensions contained in this project configuration. Cannot be null. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.StandardProjectConfiguration.Equals(Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Compares two ProjectConfigurations for equality based on configuration dimensions. Name is not considered in the comparison.
            </summary>
            <param name="other">Object to compare against</param>
            <returns>True if the objects represent the same configuration, even if reference equality is not true.</returns>
            <remarks> We don't use name in the comparison since name will not end up being an MSBuild property/metadata. </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines">
            <summary>
            A set of common functions for both internal and external debuggers.
            </summary>
            <remarks>
            This class should contain only references to types that are externally visible,
            so that this file can be easily compiled into external assemblies.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.ManagedLegacyEngine">
            <summary>
            The Legacy Debugger Engine this would be added to AdditionalDebuggerEngines in DebugLaunchSettings
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.SqlEngine">
            <summary>
            The SQL debug engine that may be added to other debuggers optionally.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.NativeOnlyEngine">
            <summary>
            The native-only debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.ManagedOnlyEngine">
            <summary>
            The managed-only debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.MixedNativeAndManagedEngine">
            <summary>
            The managed and native debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.ScriptEngine">
            <summary>
            The script-only debugging engine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.GPUDebugEngine">
            <summary>
            Guid for REF GPU Debug Engine in Concord (default)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.ManagedCoreEngine">
            <summary>
            The Core Clr debug engine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerEngines.GetDebugEngineAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType,System.Lazy{Microsoft.VisualStudio.ProjectSystem.Debug.IDebuggerImageTypeService},System.String)">
            <summary>
            Attempts to find the appropriate debug engine GUID for a given <see cref="T:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType">
            <summary>
            The various types of debuggers (managed, native, etc.).
            </summary>
            <remarks>
            Designed to look like Microsoft.VisualStudio.VCProjectEngine.TypeOfDebugger.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.NativeOnly">
            <summary>
            A native-only debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.ManagedOnly">
            <summary>
            A managed-only debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.Mixed">
            <summary>
            A managed + native debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.Auto">
            <summary>
            The debugger may be native, managed, or both depending on the debuggee.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.Script">
            <summary>
            A script debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.GPUOnly">
            <summary>
            A GPU only debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.NativeWithScript">
            <summary>
            A native + script debugger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.ManagedCore">
            <summary>
            Managed core debugger
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebuggerType.NativeWithManagedCore">
            <summary>
            Native + Managed Core debugger
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.ExportDebuggerAttribute">
            <summary>
            Marks a class as a MEF export and indicates what type of debugger is launched.
            </summary>
            <remarks>
            See also <see cref="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProviderMetadataView"/>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.ExportDebuggerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.Debug.ExportDebuggerAttribute"/> class.
            </summary>
            <param name="debuggerName">The name of the debugger that a provider is prepared to serve.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debug.ExportDebuggerAttribute.DebuggerName">
            <summary>
            The name of the debugger that a provider is prepared to serve.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProviderMetadataView">
            <summary>
            Metadata that project system debuggers should include.
            </summary>
            <remarks>
            See also the ExportDebuggerAttribute in the utilities assembly.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProviderMetadataView.DebuggerName">
            <summary>
            Gets the name of the debugger that should match with the debugger name as found
            in the XAML file that describes the debugger's properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDynamicDebugTargetsGenerator">
            <summary>
            An interface exported at or above the ConfiguredProject scope to supply
            a dynamic list of debug targets that may appear in the debug target dropdown.
            </summary>
            <remarks>
            Exports of this interface should also have ExportMetadata with a key of "Name"
            and a value that matches the EnumProvider attribute's value in the debugger's XAML file.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.ILocalDebuggerPathContributor">
            <summary>
            An interface extensions can export to add directories to the PATH environment variable in debuggee's processes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debug.ILocalDebuggerPathContributor.AdditionalDirectoriesForSearchPath">
            <summary>
            Gets the set of directories to add to a debuggee's process when launched.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDeployedProjectItemMappingProvider">
            <summary>
            Optionally implemented by <see cref="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider"/> implementations to provide a
            mapping from deployed files back to the local project item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDeployedProjectItemMappingProvider.TryGetProjectItemPathFromDeployedPath(System.String,System.String@)">
            <summary>
            Attempts to translate a given path seen by the debugger to the local full path of the equivalent item
            in the project's source directory.
            </summary>
            <param name="deployedPath">The path (or URL) of the item as seen by the debugger.</param>
            <param name="localPath">
            Receives the absolute path to the local project item, if such a translation can be made.
            May be <c>null</c> if the Provider cannot translate the <paramref name="deployedPath"/> to a valid
            local path.
            </param>
            <returns>
            A value indicating whether this extension can speak authoritatively for the given
            <paramref name="deployedPath"/>.  A <c>false</c> result indicates that this extension
            does not recognize the format of the deployed string.
            A <c>true</c> result indicates that <paramref name="localPath"/> is correctly initialized,
            or that if <paramref name="localPath"/> is <c>null</c> that this implementation is stating
            that this deployed item is definitely <i>not</i> in this project.
            </returns>
            <remarks>
            Implementations that have no implementation should return <c>false</c> rather than throwing
            <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.ImageClrType">
            <summary>
            The various purities of native or managed code that is in a debuggee's process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.ImageClrType.Native">
            <summary>
            The debuggee is pure native code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.ImageClrType.Mixed">
            <summary>
            The debuggee contains a mix of native and managed code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.ImageClrType.Managed">
            <summary>
            The debuggee contains nothing but managed code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDebuggerImageTypeService">
            <summary>
            A service a project system may offer to provide insight as to whether the built
            application is managed or native.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debug.IDebuggerImageTypeService.TargetImageClrType">
            <summary>
            Gets the project system's best guess as to whether the built application
            is managed or native.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debug.IDebuggerImageTypeService.PackageMoniker">
            <summary>
            see VsAppPackageLaunchInfo
            </summary>
            <remarks>
            TODO: remove this property in Dev12+1
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.Debug.IDebuggerImageTypeService.AppUserModelID">
            <summary>
            see VsAppPackageLaunchInfo
            </summary>
            <remarks>
            TODO: remove this property in Dev12+1
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebuggerImageTypeService.GetIs64BitAsync">
            <summary>
            Gets a value indicating whether the built application is 64-bit.
            </summary>
            <value><c>true</c> if the image is 64-bit; <c>false</c> if it is 32-bit.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebuggerImageTypeService.GetIsConsoleAppAsync">
            <summary>
            Gets whether the project will compile to a console app.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions">
            <summary>
            Debugging flags. The managed equivalent of VSDBGLAUNCHFLAGS.
            </summary>
            <remarks>
            The members of this enum have values that match the native VSDBGLAUNCHFLAGS structure to allow direct copying.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.Silent">
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.LocalDeploy">
            <summary>
            passed to IVsDebuggableProjectCfg::Launch to allow optimizations
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.NoDebug">
            <summary>
            launch without attaching a debugger
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.DetachOnStop">
            <summary>
            Detach instead of terminate when debugging stopped.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.Selected">
            <summary>
            launch selected project instead of startup project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.StopDebuggingOnEnd">
            <summary>
            When this process ends, debugging is stopped.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.WaitForAttachComplete">
            <summary>
            When DLO_LaunchByWebServer, wait for the attach to finish before continuing to launch other targets
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.MergeEnvironment">
            <summary>
            provided environment should be merged with system environment
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.DesignTimeExpressionEvaluation">
            <summary>
            launched for design-time expression evaluation
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.StopAtEntryPoint">
            <summary>
            Stop at the entrypoint (step-into)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.CannotDebugAlone">
            <summary>
            this process cannot be debugged alone -- stop debugging when only processes with this flag remain
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.WaitForEvent">
            <summary>
            Debugger should wait for a named event to become signaled after launching the first debug target and before launching more targets
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.UseDefaultBrowser">
            <summary>
            Debugger should use the Default Web Browser; this flag used in conjunction with DLO_LaunchBrowser.
            The default browser is obtained via IVsUIShellOpenDocument:: GetFirstDefaultPreviewer().
            The bstrEXE in VsDebugTargetInfo2 points to the URL to be launched. Web Site projects will use
            this for Silverlight projects. This allows, for example, Firefox to be used which is single
            instance and so has to be handled differently on launch. Other project systems (e.g. C++) that
            currently use DLO_LaunchBrowser will continue to use that and IE will get launched as before.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.PrepForDebug">
            <summary>
            We will eventually debug this process, so allow the debugger to perform additional setup
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.TerminateOnStop">
            <summary>
            Terminate the debuggee when debugging is stopped. It is an error to specify both this and DBGLAUNCH_DetachOnStop
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.BreakOneProcess">
            <summary>
            Disable 'Break all processes when one process breaks' debugger option for the debugging session; this option is ignoring if debugging has already started.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.BlockCredentialsDialog">
            <summary>
            Blocks the credentials dialog from being shown on authentication errors
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.BlockWWSDialog">
            <summary>
            Blocks the WWS install dialog from being shown
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.StartInSimulator">
            <summary>
            For DLO_AppPackageDebug, debugger should launch the application (or expect the application to start) in the simulator
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.AllowEventsAfterStopped">
            <summary>
            Allow stopping events in break-mode
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.Force32BitDebug">
            <summary>
            Force use of the 32-bit debugger (currently used only for DLO_CreateProcess)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.Force64BitDebug">
            <summary>
            Force use of the 64-bit debugger (currently used only for DLO_CreateProcess)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.ContainsStartupTask">
            <summary>
            Use Startup Task activator (currently used only for DLO_AppPackageDebug)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions.Profiling">
            <summary>
            Launch process for profiling
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider">
            <summary>
            A contract that debuggers implement for integration with Visual Studio.
            </summary>
            <remarks>
            <para>Implementations should be thread-safe.</para>
            <para>
            Only one instance of each implementation of this interface will be instantiated by the project system.
            Instances should therefore be stateless.  If multiple projects in a solution are configured as
            startup projects, these projects will each be launched through successive calls to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.CanLaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            Gets whether the debugger can launch in the current configuration.
            </summary>
            <param name="launchOptions">
            The launch options that would be passed to a subsequent call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>.
            </param>
            <remarks>
            This method may be called at any time and the implementation should be fast enough to
            perform well if called every time the UI is updated (potentially several times per second).
            Implementers SHOULD NOT rely on this method being called directly before a call to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/>.  No state should be saved within this method to be used
            by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProvider.LaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions)">
            <summary>
            Launches the project's target executable (or some other configured process)
            and optionally attaches a debugger to it.
            </summary>
            <param name="launchOptions">
            A set of default launch options given by the IDE.
            These options may be customized by the particular debug launch implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if the debugger cannot start.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProviderValidation">
            <summary>
            Interface definition for MPI Cluster Debugger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Debug.IDebugLaunchProviderValidation.ValidatePropertiesAsync">
            <summary>
            Validate the properties, return false if invalid properties exist.
            </summary>
            <remarks>
            This method is called by the MPI Cluster Debugger.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1">
            <summary>
            The standard implementation of IProjectItem for use in CPS.
            </summary>
            <typeparam name="TProjectItemInterface">The IProjectItem or derived interface that the provider is typed with.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.provider">
            <summary>
            The items provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.evaluatedIncludeAsFullPath">
            <summary>
            A cache of the evaluated include value of the item make into a full path
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.metadata">
            <summary>
            Backing store for the Metadata property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.fileSystemItem">
            <summary>
            Whether it is a file system item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.syncObject">
            <summary>
            Lock to acquire when lazy-initializing fields.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase{`0},Microsoft.Build.Evaluation.ProjectItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase{`0},Microsoft.Build.Framework.ITaskItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.ItemType">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.UnevaluatedInclude">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.EvaluatedInclude">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.EvaluatedIncludeAsFullPath">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.EvaluatedIncludeAsRelativePath">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.PropertiesContext">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.Metadata">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.SetItemTypeAsync(System.String)">
            <summary>
            Sets the item type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.SetUnevaluatedIncludeAsync(System.String)">
            <summary>
            Sets the item name, which may include MSBuild expressions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            See IProjectItem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.ResetMsbuildProjectItem(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Attach the new msbuild project item to the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.FindItem(Microsoft.Build.Evaluation.Project)">
            <summary>
            Finds the MSBuild.ProjectItem that this instance represents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.InitializePropertiesContext(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Sets the <see cref="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.PropertiesContext"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.InitializePropertiesContext(Microsoft.Build.Construction.ProjectItemElement)">
            <summary>
            Sets the <see cref="P:Microsoft.VisualStudio.ProjectSystem.CpsProjectItem`1.PropertiesContext"/> property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException">
            <summary>
            An exception thrown when a project tree mutation fails.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.#ctor(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider,Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.ProjectPath">
            <summary>
            Gets the project whose tree is corrupted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.PriorTree">
            <summary>
            Gets the prior tree before it was mutated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.FreshTree">
            <summary>
            Gets the freshly generated tree that was used as the "correct" tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.MutatedTree">
            <summary>
            Gets the mutated tree that is believed to be incorrect.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.FaultedProvider">
            <summary>
            Gets the tree provider that faulted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeCorruptionException.ToString">
            <summary>
            Renders the faulty and correct trees as a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeDataSources">
            <summary>
            Common data sources for project trees, and checking version information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeDataSources.BaseTreeGeneration">
            <summary>
            The base tree's generation number.  Useful when waiting on non-project altering changes such as toggling
            Show All Files view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeDataSources.ReferencesFolderProjectSnapshotVersion">
            <summary>
            The References folder.  Useful when waiting for project changes to appear in the tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeDataSources.DirectoryTreeGeneration">
            <summary>
            The "show all files" project directory tree provider.  Useful when waiting for a particular file system event
            to appear in the tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeDataSources.ProjectSnapshotBasedDataSources">
            <summary>
            Gets the set of all data sources that are dependent upon the project snapshot version, that are defined by this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeDataSources.GetGenerationRequirement(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot})">
            <summary>
            Obtains a description of the version of the specified tree snapshot for use in checking whether that version
            is present somewhere downstream.
            </summary>
            <param name="treeGeneration">The tree snapshot obtained from the tree provider that is required on the UI thread.</param>
            <returns>A map containing the base tree data source key and the generation number obtained from the snapshot.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/> producers and manipulators.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.IsRoot(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Checks whether the given node is a root node in its tree.
            </summary>
            <param name="node">The node to test.</param>
            <returns><c>true</c> if the node is the root node; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ClearChildren``1(``0)">
            <summary>
            Removes all children from an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/>.
            </summary>
            <typeparam name="T"><see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/> or <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree"/>.</typeparam>
            <param name="tree">The tree to remove all children from.</param>
            <returns>The <paramref name="tree"/> with all children removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.CopyChildrenFrom``1(``0,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Copies the children from <paramref name="source"/> onto <paramref name="tree"/>.
            The two trees must not have conflicting children.
            </summary>
            <typeparam name="T"><see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/> or <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree"/>.</typeparam>
            <param name="tree">The tree to copy children into.</param>
            <param name="source">The tree to copy children from.</param>
            <returns>The <paramref name="tree"/> with <paramref name="source"/> children added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.GetProjectPropertiesContext(Microsoft.VisualStudio.ProjectSystem.IProjectItemTree)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/> instance that describes the location of the MSBuild item that backs a given project tree node.
            </summary>
            <param name="node">The node to get the MSBuild item for.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.GetSelfAndDescendentsBreadthFirst(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Walks a project tree starting at a given node, using a breadth-first search pattern.
            </summary>
            <param name="root">The node at which to begin the search.</param>
            <returns>A sequence of the given node, and all its descendents.  The given node always comes first in the sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.GetSelfAndDescendentsBreadthFirst(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Func{Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Boolean})">
            <summary>
            Walks a project tree starting at a given node, using a breadth-first search pattern.
            </summary>
            <param name="root">The node at which to begin the search.</param>
            <param name="canSkipNodeAndChildren">A test function to know we can skip one nocd and all its children.</param>
            <returns>A sequence of the given node, and all its descendents.  The given node always comes first in the sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.GetSelfAndDescendentsDepthFirst(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Walks a project tree starting at a given node, using a depth-first search pattern.
            </summary>
            <param name="root">The node at which to begin the search.</param>
            <returns>A sequence of the given node, and all its descendents.  The given node does NOT come first in the sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.UpdateSelfAndAllDescendents(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Func{Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Walks a project tree starting at a given node and updates every node using the provided function.
            </summary>
            <param name="tree">The node at which to begin updating.</param>
            <param name="updateAction">The function that returns the new node. If no replacement should be made, either the tree that was passed in or null may be returned.</param>
            <returns>The new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.WithFollowingChildren(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Returns the union of a given set of project tree nodes and their dependent file nodes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.GetAncestry(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets all the ancestor nodes for a given node.
            </summary>
            <param name="leaf">The tree node to get the ancestry for.</param>
            <returns>A sequence of steps starting at the given node's parent, and ending with the root node.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.DescendsFrom(Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets a value indicating whether a project tree node is a descendent of some other given node.
            </summary>
            <param name="leaf">Some leaf node.</param>
            <param name="candidateAncestor">A node that may be in the line between <paramref name="leaf"/> and its root.</param>
            <returns><c>true</c> if the <paramref name="candidateAncestor"/> is an ancestor of <paramref name="leaf"/>; or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.SplitRepositionedToDeleteAdd(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff})">
            <summary>
            Takes a list of project tree change descriptions and transforms single repositioning changes to remove/add change pairs.
            </summary>
            <param name="deltas">The changes to parse.</param>
            <returns>All the changes given in <paramref name="deltas"/>, with the few matching diff objects changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.SplitChangeToDeleteAdd(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff},System.Boolean)">
            <summary>
            Takes a list of project tree change descriptions and transforms single changes to remove/add change pairs.
            </summary>
            <param name="deltas">The changes to parse.</param>
            <param name="onlySplitRenames"><c>true</c> to only split changes to remove/adds if the node was renamed.</param>
            <returns>All the changes given in <paramref name="deltas"/>, with the few matching diff objects changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.SortRootToLeaf(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff},Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Sorts a set of project tree changes so that those changes which impact closer to the root of the tree
            appear earlier in the sequence than those that describe changes to distant leaves.
            </summary>
            <param name="deltas">A sequence of changes.</param>
            <param name="referenceTree">The "new" tree, at the end of the deltas sequence.</param>
            <returns>A sorted sequence of changes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.FilterOutChangesBelowVisibilityChanges(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff},Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Filters out any tree changes that describe nodes that fall beneath another node whose visibility is also changing.
            This must be called on a sorted sequence (the result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.SortRootToLeaf(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff},Microsoft.VisualStudio.ProjectSystem.IProjectTree)"/>).
            </summary>
            <param name="deltas">The sequence of changes to filter.</param>
            <param name="oldTree">The prior tree.</param>
            <param name="newTree">The "new" tree, at the end of the deltas sequence.</param>
            <returns>A sequence of changes with some deltas removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.IsVisible(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Checks whether this tree and all its ancestors are visible.
            </summary>
            <param name="tree">The tree to confirm visbility on.</param>
            <returns><c>true</c> if this tree and all its ancestors are visible; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.GetPreviousVisibleSibling(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets the previous visible sibling for a given node, assuming all ancestors are visible.
            </summary>
            <param name="node">The node whose sibling is sought.</param>
            <returns>The prior sibling, or <c>null</c> if this node has no prior siblings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.WithDuplicates(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Returns an enumerable of <paramref name="tree"/> and all of its duplicate children, if it has any
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.WithFollowingChildren(System.Collections.Immutable.ImmutableHashSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Returns the union of a given set of project tree nodes the specified node's dependent children nodes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff">
            <summary>
            A simple implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff"/> for use by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.SplitRepositionedToDeleteAdd(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff})"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff"/> class.
            </summary>
            <param name="change">The value for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff.Change"/> property.</param>
            <param name="nodeIdentity">The value for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff.NodeIdentity"/> property.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff.Change">
            <summary>
            Gets the kind of change made to the alterered node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff.NodeIdentity">
            <summary>
            Gets the leaf node impacted by this change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff.NodeChange">
            <summary>
            Gets the kinds of changes made to node if <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.ProjectTreeDiff.Change"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind.Replaced"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.TreeChangeSort">
            <summary>
            A project tree change comparer that puts changes closer to the root of the tree closer to the front of the sequence.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.TreeChangeSort.referenceTree">
            <summary>
            The project tree used to calculate node positions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.TreeChangeSort.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.TreeChangeSort"/> class.
            </summary>
            <param name="referenceTree">The project tree used to calculate node positions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeExtensions.TreeChangeSort.Compare(Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff,Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff)">
            <summary>
            Compares two project tree change descriptions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase">
            <summary>
            Bare functionality thought to be common to all project dependent tree providers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.configuredProjectExportsRequired">
            <summary>
            A value indicating whether tree mutating functions require non-null configured project exports.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.initialActiveConfiguredProjectExports">
            <summary>
            The source for a task whose result is the configuredProjectExports field as it is origiinally initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.configuredProjectExports">
            <summary>
            CPS services from the active configured project.  May be null initially, but once initialized will never be null.
            </summary>
            <remarks>
            This is private to reduce the chance that code that executes over time will query this property multiple times
            which would open it to a potential race condition with the UI thread changing the active configured project
            during execution.
            Instead, callers should merely snag the ActiveConfiguredProject&lt;T&gt;.Value property's value
            as a local variable and use that in order to ensure a consistent operation.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.activeConfiguredProjectLink">
            <summary>
            The link to dispose of to terminate updates of the active configured project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase"/> class.
            </summary>
            <param name="threadingService">The thread handling service.</param>
            <param name="unconfiguredProject">The unconfigured project that this instance is associated with.</param>
            <param name="configuredProjectExportsRequired">
            A value indicating whether tree mutating functions require non-null configured project exports.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate">
            <summary>
            A definition for the method signature required for updating the project tree.
            </summary>
            <param name="projectTree">The current version of the project tree (the one prior to the beginning mutation).</param>
            <param name="configuredProjectExports">
            Exports available from the currently active configured project.  Never <c>null</c> unless the constructor
            was called with configuredProjectExportsRequired=false.
            </param>
            <param name="cancellationToken">A token whose cancellation indicates lost interest in this update.</param>
            <returns>A task whose result is the tree update.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions">
            <summary>
            An enumeration of alterations that may be applied to the handling of tree updates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions.None">
            <summary>
            No alterations to default tree update handling behavior.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions.SkipIfNoPriorTree">
            <summary>
            This update should only be executed if a previous tree will be handed to the updating method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions.SkipIfUpdateHasOldDataSources">
            <summary>
            This update should only be executed if its data sources are not older than the tree's current data sources.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ImportingProjectErrorReporting">
            <summary>
            Gets the Watson error reporting service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ProjectErrorReporting">
            <summary>
            Gets the Watson error reporting service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.UnconfiguredProjectAsynchronousTasksService">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ProjectSubscriptionService">
            <summary>
            Gets the subscription service for source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeFactory">
            <summary>
            Gets the tree factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeFactoryImports">
            <summary>
            Gets the tree factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ActiveConfiguredProjectProvider">
            <summary>
            Gets the active configured project provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ActiveConfiguredProject">
            <summary>
            Gets the active ConfiguredProject, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.InitialActiveConfiguredProjectAvailable">
            <summary>
            Gets a task that is complete when the first active configuration is known.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.DefaultCancellationToken">
            <summary>
            Gets the cancellation token to use for tree updates when one is not given when the tree update request is submitted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project for which a tree is currently being constructed or mutated.
            </summary>
            <remarks>
            This property should only be called from within a project tree mutating method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.CurrentCoreConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project that is currently active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.CurrentConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project that is currently active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.RetrieveConfiguredProjectExportsIfRequiredAsync">
            <summary>
            Retrieves <see cref="T:Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.Initialize">
            <summary>
            Initializes this tree provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ActiveConfiguredProjectProviderChanged(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject})">
            <summary>
            Responds to changes in which configured project is activated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.UpdateTreeForActiveConfigurationChange(Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot,Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports,System.Threading.CancellationToken)">
            <summary>
            Updates the project tree based on a change in the active project configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.RenewBrowseObjectPropertiesPerConfiguration(Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog,Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports)">
            <summary>
            Updates an individual project tree node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.BrowseObjectProperties"/> property, if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.SubmitTreeUpdateOnlyAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur, but only if a previous tree exists.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Int64@,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="generationNumber">Receives the generation number that will be applied as a data source for the resulting tree.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSource">The source that was updated, leading to the regeneration of the tree.</param>
            <param name="updatedSourceVersion">The new version of the updated data source.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSources">The map of changed data sources and their new versions.  Updates to data sources given here will be applied even if the tree update delegate throws.</param>
            <param name="options">Optional alterations to standard handling of the tree update submission.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.SubmitTreeUpdateAsync(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeSubmissionOptions,System.Int64@,System.Threading.CancellationToken)">
            <summary>
            Queues a tree update to occur and joins the task.
            </summary>
            <param name="treeTransformation">The function to perform the tree update when this request is processed from the queue.</param>
            <param name="updatedSources">The map of changed data sources and their new versions.  Updates to data sources given here will be applied even if the tree update delegate throws.</param>
            <param name="options">Optional alterations to standard handling of the tree update submission.</param>
            <param name="generationNumber">Receives the generation number that will be applied as a data source for the resulting tree.</param>
            <param name="cancellationToken">A token whose cancellation signifies that this request is now obsolete.</param>
            <returns>The task whose completion indicates that the tree update has occurred and been published.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.PrepublishMutationAsync(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports,System.Threading.CancellationToken)">
            <summary>
            Provides derived classes with an opportunity to further mutate a tree before any publish step.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.PrepublishMutationAsync(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports,System.Threading.CancellationToken)">
            <summary>
            Provides derived classes with an opportunity to further mutate a tree before any publish step.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.GetActiveConfiguredProjectExports(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Gets the exports from the active configured project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.GetActiveConfiguredProjectExports``1(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Gets the exports from the active configured project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission">
            <summary>
            The details of an asynchronous request for a tree update.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateAsyncDelegate,System.Int64,Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable},System.Threading.CancellationToken,System.Threading.Tasks.TaskCompletionSource{Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.GenerationNumber">
            <summary>
            Gets the generation number for this tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.ConfiguredProjectExports">
            <summary>
            Gets the exports from the configured project that was active at the time this update request was submitted.
            If null, at runtime the consumer should use the value of
            initialActiveConfiguredProjectExports.Result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.UpdatedDataSources">
            <summary>
            Gets the map of any updated data sources and their versions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.CancellationToken">
            <summary>
            Gets the cancellation token for this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.PublishCompletedTaskSource">
            <summary>
            Gets a task source that should be completed after the tree has been published.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.UpdateFunction">
            <summary>
            Gets the function that receives the current tree and returns the updated tree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateSubmission.UpdateTree(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue{Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot},Microsoft.VisualStudio.ProjectSystem.CoreProjectTreeProviderBase.CoreConfiguredProjectExports,System.Threading.CancellationToken)">
            <summary>
            Executes the update tree function on this instance.
            </summary>
            <param name="currentTree">The current tree</param>
            <param name="configuredProjectExports">The configured project exports</param>
            <param name="cancellationToken">The cancelation token</param>
            <returns>The new updated tree</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateResult">
            <summary>
            The result of a tree update.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateResult.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Boolean,System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateResult.Tree">
            <summary>
            Gets the new tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateResult.LazyFill">
            <summary>
            Gets a value indicating whether newly added nodes to the tree should *not* cause expansion and selection to automatically occur.
            </summary>
            <remarks>
            TODO Dev14: remove this property, which TreeServce no longer uses.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.TreeUpdateResult.UpdatedSources">
            <summary>
            Gets the map of any updated data sources and their versions, that are beyond anything
            submitted in the original tree update submission.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports">
            <summary>
            Describes services collected from the active configured project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.syncObject">
            <summary>
            A lock object to protect data integrity of this instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.ruleNameToItemType">
            <summary>
            A cache of rule names to item types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.itemTypeToRuleName">
            <summary>
            A cache of item types to rule names.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.PropertyPagesDataModelProvider">
            <summary>
            Gets the property pages data model provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.ConfiguredProjectAsynchronousTasksService">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.RuleFactory">
            <summary>
            Gets the rule factory
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.GetRuleForItem(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot)">
            <summary>
            Gets an IRule to attach to a project item so that browse object properties will be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.GetItemTypeFromRuleName(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot,System.Boolean)">
            <summary>
            Gets the item type for a given rule.
            </summary>
            <param name="ruleName">The name of the rule to get an item type for.</param>
            <param name="catalogs">The catalog snapshot to use to find the item type.</param>
            <param name="allowNull">Whether or not to allow a null result for a missing or malformed rule.</param>
            <returns>The matching item type.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.GetRuleNameFromItemType(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot,System.Boolean)">
            <summary>
            Gets the rule name for an item type.
            </summary>
            <param name="itemType">The item type to get a rule name for.</param>
            <param name="catalogs">The catalog snapshot to use to find the rule name.</param>
            <param name="allowNull">Whether or not to allow a null result for a missing or malformed rule.</param>
            <returns>The matching rule name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeProviderBase.ConfiguredProjectExports.GetRuleNameByItemType(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot,System.String,System.String)">
            <summary>
            Returns all rule names from the snapshot that match an item type.
            </summary>
            <remarks>
            In the current CPS world, an item type will only match one rule name at most. This may change in the future.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeSnapshot">
            <summary>
            A default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectTreeSnapshot.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider,Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeSnapshot"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeSnapshot.Tree">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeSnapshot.TreeProvider">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeSnapshot.PopulatingConfiguredProject">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectTreeSnapshot.LazyFill">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot"/>
            </summary>
            <remarks>
            TODO Dev14: remove this property, which TreeServce no longer uses.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1">
            <summary>
            A project item provider whose tracked project items' include values are file system paths.
            </summary>
            <typeparam name="TProjectItemInterface">The specific interface methods should accept for updating/deleting items.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1.#ctor(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1"/> class.
            Obsolete. Only kept because VC++ uses our internal APIs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a new item, recognizing that the include value is a path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1.RemoveAsync(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1.GetItemsAsync(System.String,System.String)">
            <summary>
            Gets items recognizing that the include value is a path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HierarchicalProjectItemProviderBase`1.GetItemsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext})">
            <summary>
            Gets the first item that matches for each of the given context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectItemIdentityEqualityComparer">
            <summary>
            An equality comparer that considers two project items to match if their item types and names equal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemIdentityEqualityComparer.DefaultInstance">
            <summary>
            The shared singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemIdentityEqualityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectItemIdentityEqualityComparer"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemIdentityEqualityComparer.Default">
            <summary>
            Gets the singleton instance to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemIdentityEqualityComparer.Equals(Microsoft.VisualStudio.ProjectSystem.IProjectItem,Microsoft.VisualStudio.ProjectSystem.IProjectItem)">
            <summary>
            Returns true if two project items refer to the same item type and evaluated name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemIdentityEqualityComparer.GetHashCode(Microsoft.VisualStudio.ProjectSystem.IProjectItem)">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1">
            <summary>
            Provides a common implementation for detecting version conflicts with project item snapshots.
            </summary>
            <typeparam name="TProjectItemInterface">The specific interface methods should accept for updating/deleting items.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.supportedItemTypes">
            <summary>
            A read/write collection of the item types this provider manages.
            </summary>
            <remarks>
            This class should NOT use this field except in its property accessor,
            since its property accessor can be overridden in a derived class,
            leaving this field uninitialized.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.readOnlyItemTypes">
            <summary>
            A read-only view of the <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.supportedItemTypes"/> collection.
            </summary>
            <remarks>
            This class should NOT use this field except in its property accessor,
            since its property accessor can be overridden in a derived class,
            leaving this field uninitialized.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.supportedItemTypesLock">
            <summary>
            The object we lock while lazy-initializing the SupportedItemTypes member.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.projectDirectory">
            <summary>
            Cache for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectDirectory"/> property.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemIdentityChanging">
            <summary>
            Event that is fired on the writer thread when an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should attach handlers to this event if they may need to make
            cascading changes as the result of the change causing this event to fire.
            Clients should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Clients should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemIdentityChangedOnWriter">
            <summary>
            Event that is fired on the writer thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemIdentityChanged">
            <summary>
            Event that is fired on a background thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.EventDispatcher">
            <summary>
            Gets or sets the event dispatcher.
            </summary>
            <value>The event dispatcher.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ConfiguredProject">
            <summary>
            Gets the configured project.
            </summary>
            <value>The configured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ConfiguredProjectCacheFactory">
            <summary>
            Gets the configured project cache factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectDirectory">
            <summary>
            Gets the directory the project is found in.  Always ends with a trailing slash.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.PropertiesProvider">
            <summary>
            The provider we'll use for reading/writing project item properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectLockService">
            <summary>
            Gets the project lock service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ThreadingService">
            <summary>
            Gets the thread handling service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectFaultHandlerService">
            <summary>
            Gets the project fault handler service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.UnconfiguredProject">
            <summary>
            UnconfigureProject
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemAddingListeners">
            <summary>
            Gets a sequence of delegates to invoke when we are about to add items.
            </summary>
            <remarks>
            The bool argument indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemRemovingListeners">
            <summary>
            Gets a sequence of delegates to invoke when we are about to remove items.
            </summary>
            <remarks>
            The bool argument 1 indicating whether the items are being deleted from disk as well as from the project file..
            The bool argument 2 indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemRenamingListeners">
            <summary>
            Gets a sequence of delegates to invoke when we are about to rename items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemAddedListeners">
            <summary>
            Gets a sequence of delegates to invoke when we have added items.
            They must be invoked on the writer thread, and the item name must be the evaluated *project-relative* path.
            </summary>
            <remarks>
            The bool argument indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemRemovedListeners">
            <summary>
            Gets a sequence of delegates to invoke when we have removed items.
            </summary>
            <remarks>
            The bool argument 1 indicating whether the items are being deleted from disk as well as from the project file..
            The bool argument 2 indicates whether this is part of a rename operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ItemRenamedListeners">
            <summary>
            Gets a sequence of delegates to invoke when we have renamed items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetExistingItemTypesAsync">
            <summary>
            See IProjectItemProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsAsync">
            <summary>
            Gets all project items with item types in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemTypesAsync"/> collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsAsync(System.String)">
            <summary>
            Gets all project items with the given item type as long as it appears
            in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemTypesAsync"/> collection.
            </summary>
            <returns>
            A sequence of project items with the given item type,
            or an empty sequence if the given item type is not one that is
            managed by this provider.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsAsync(System.String,System.String)">
            <summary>
            Returns an item with the given <paramref name="itemType"/> and <paramref name="evaluatedInclude"/>.
            </summary>
            <param name="itemType">The itemType to match on.  Case insensitive.</param>
            <param name="evaluatedInclude">
            The evaluated value of the Include attribute on the item.  Case insensitive.
            </param>
            <returns>
            All items that match the given criteria.  Never null.
            If the given <paramref name="itemType"/> is not included in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemTypesAsync"/> collection,
            the item is not sought for and an empty sequence is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.FindItemByNameAsync(System.String)">
            <summary>
            Gets any source item that matches a given evaluated name.
            </summary>
            <param name="evaluatedInclude">The evaluated item name to find.</param>
            <returns>The item, or <c>null</c> if no match was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Gets the first item that matches the given context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext})">
            <summary>
            Gets the first item that matches for each of the given context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a new item to the MSBuild project.
            </summary>
            <param name="itemType">The item type for the new item.</param>
            <param name="include">The unevaluated include value for the new item.</param>
            <param name="metadata">The metadata for the new item. May be null.</param>
            <returns>The new project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            Adds new items to the MSBuild project.
            </summary>
            <param name="items">
            A sequence of items to add.  The tuple is made up of the item type, the item name, and its metadata respectively.
            The metadata item may be <c>null</c>.
            </param>
            <returns>The list of added items. May be fewer than <paramref name="items"/> because items that already existed in the project are not omitted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddAsync(System.String)">
            <summary>
            Adds a file to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="path">The absolute or project-relative path to the file to add to the project.</param>
            <returns>The project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds files to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the files to add to the project.</param>
            <returns>The project items actually added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.RemoveAsync(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            NOTE: This method never actually deletes file from storage; it is the caller's responsibility to
            delete the file from disk after this method removes the item from the project if required.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.RemoveAsync(`0,Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes items from the MSBuild project.
            </summary>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemTypesAsync">
            <summary>
            Gets a readonly copy of the set of item types this Provider works with.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.SetUnevaluatedIncludeAsync(Microsoft.VisualStudio.ProjectSystem.CpsProjectItem{`0},System.String)">
            <summary>
            Updates the backing MsBuild store with the new 'Include' value for the item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.SetItemTypeAsync(Microsoft.VisualStudio.ProjectSystem.CpsProjectItem{`0},System.String)">
            <summary>
            Updates the backing MsBuild store with the new item type for the item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.SetUnevaluatedIncludesAsync(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String}})">
            <summary>
            Sets the value that appears in the MSBuild project file as the item name (the literal string in the Include attribute.)
            </summary>
            <param name="renames">A list of project item and the new UnevaluatedInclude value should be set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.OnItemsIdentityChangingAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String}})">
            <summary>
            Helper method for this provider to fire the ItemIdentityChanged event when a batch renaming happens.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.OnItemIdentityChangingAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Helper method for this provider to fire the ItemIdentityChanged event.
            </summary>
            <param name="projectItem">The project item whose identity is changed.</param>
            <param name="propertySheet"> The property sheet/project manifest the item belongs to. </param>
            <param name="oldItemType"> The item type before the change. </param>
            <param name="newItemType"> The item type after the change. </param>
            <param name="oldUnevaluatedInclude"> The unevaluated include before the change. </param>
            <param name="newUnevaluatedInclude"> The unevaluated include after the change. </param>
            <param name="oldEvaluatedInclude"> The evaluated include before the change. </param>
            <param name="newEvaluatedInclude"> The evaluated include after the change. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.OnItemsIdentityChangedAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.Tuple{System.String,System.String}}})">
            <summary>
            Helper method for this provider to fire the ItemIdentityChanged event for a batch renaming.
            </summary>
            <param name="renamedItems">
            A collection of project item, oldUnevaluatedInclude, oldEvaluatedInclude
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.OnItemIdentityChangedAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Helper method for this provider to fire the ItemIdentityChanged event.
            </summary>
            <param name="projectItem">The project item whose identity is changed.</param>
            <param name="propertySheet"> The property sheet/project manifest the item belongs to. </param>
            <param name="oldItemType"> The item type before the change. </param>
            <param name="newItemType"> The item type after the change. </param>
            <param name="oldUnevaluatedInclude"> The unevaluated include before the change. </param>
            <param name="newUnevaluatedInclude"> The unevaluated include after the change. </param>
            <param name="oldEvaluatedInclude"> The evaluated include before the change. </param>
            <param name="newEvaluatedInclude"> The evaluated include after the change. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddFastAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds an item to the project without any extra validation checks.
            </summary>
            <remarks>
            This is used in VC upgrade.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetSupportedItemTypesAsync">
            <summary>
            Gets the set of item types this Provider works with.
            </summary>
            <remarks>
            A derived class must fill this collection in order for this class to do anything worthwhile.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddCoreAsync(System.String)">
            <summary>
            Adds a file to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="path">The absolute or project-relative path to the file to add to the project.</param>
            <returns>The project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddCoreAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds files to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the files to add to the project.</param>
            <returns>The project items actually added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsByPathAsync(System.String)">
            <summary>
            Gets all source items that matches a given evaluated name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsByPathAsync(System.String,System.String)">
            <summary>
            Searches for all MSBuild.ProjectItems whose EvaluatedInclude value matches some relative or absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsByPathAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Searches for all MSBuild.ProjectItems whose EvaluatedInclude value matches some relative or absolute path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetFirstItemByPathsAsync(System.Linq.ILookup{System.String,System.String})">
            <summary>
            Get first project item matches a pair of item type and path (the input was grouped by item types.
            </summary>
            <returns>project item matches the input. It comes with the same order of input values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.CalculateUnevaluatedIncludePathAfterRenaming(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String,System.String,System.String)">
            <summary>
            Caculate the new path of a project item after a renaming operation.
            Return null, if we cannot handle the renaming (if the path uses some macros we don't support.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.Create(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Instantiates a CPS project item that wraps an MSBuild.ProjectItem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetInitialItemTypes">
            <summary>
            Gets the item types the provider is designed to manage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddItemsToProjectAsync(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser,Microsoft.Build.Evaluation.Project,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            A helper method to add new project items to the msbuild.
            </summary>
            <param name="access">The current write lock.</param>
            <param name="project">The msbuild project.</param>
            <param name="items">The information about items to be added, include item type, the unevaluated include value, and extra metadata.</param>
            <returns>A collection of project items added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.RemoveItemsFromProjectAsync(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser,Microsoft.Build.Evaluation.Project,System.Collections.Generic.List{Microsoft.Build.Evaluation.ProjectItem},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            A helper method to remove items from the project. This method takes care of globs usage.
            Note: This method will update the items collection.
             This logic eventually need be included in the msbuild side.
            </summary>
            <param name="access">The current write lock.</param>
            <param name="project">The msbuild project</param>
            <param name="items">Msbuild project items to be deleted</param>
            <param name="deleteOptions">Delete options: exclude from the project or delete from the storage.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.AddAllMetadataAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds all metadata to a project item using <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectProperties"/>
            </summary>
            <param name="item">The item to add metadata to.</param>
            <param name="metadata">The metadata to add. Can be null or empty.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsByPathHelperAsync(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.Build.Evaluation.Project)">
            <summary>
            A helper method to <see cref="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.GetItemsByPathAsync(System.Collections.Generic.IEnumerable{System.String},System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.NeedToAddItemToProject(Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase{`0}.ProjectItem,Microsoft.Build.Evaluation.Project,System.String,System.String,System.Boolean)">
            <summary>
            Checks if an item needs to be added to the project.
            This includes adding an Update item if the metadata is different.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectItem">
            <summary>
            temporary struct to hold intermediate data across method boundaries
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectItem.ItemName">
            <summary>
            project item name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectItem.EvaluatedName">
            <summary>
            project item's evaluated name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectItemProviderBase`1.ProjectItem.Metadata">
            <summary>
            metadata for the item
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs">
            <summary>
            Arguments for the ItemIdentityChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.item">
            <summary>
            The item whose identity is changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.propertySheet">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.oldItemType">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.newItemType">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.oldUnevaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.newUnevaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.oldEvaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.newEvaluatedInclude">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.hasItemTypeChanged">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.hasUnevaluatedIncludeChanged">
            <summary>
            See the corresponding property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.#ctor(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.Item">
            <summary>
            Gets the item whose identity was changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.PropertySheet">
            <summary>
            The evaluated full path of the property sheet/project manifest
            that contains this item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.OldItemType">
            <summary>
            The old item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.NewItemType">
            <summary>
            The new item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.OldUnevaluatedInclude">
            <summary>
            The old unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.NewUnevaluatedInclude">
            <summary>
            The new unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.OldEvaluatedInclude">
            <summary>
            The old evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.NewEvaluatedInclude">
            <summary>
            The new evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.HasItemTypeChanged">
            <summary>
            Indicates if the item type has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.StandardItemIdentityChangedEventArgs.HasUnevaluatedIncludeChanged">
            <summary>
            Indicates if the unevaluated include has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UtilityStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.AbsolutePathExpected">
            <summary>
              Looks up a localized string similar to An absolute path is required for this parameter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.AbsolutePathRequired">
            <summary>
              Looks up a localized string similar to An absolute path is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.Argument_EmptyArray">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must contain at least one element..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.Argument_EmptyString">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be an empty string (&quot;&quot;) or start with the null character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.Argument_NullElement">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot contain a null (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.Argument_Whitespace">
            <summary>
              Looks up a localized string similar to The parameter &quot;{0}&quot; cannot consist entirely of white space characters..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.BeforeAfterConstraintContradiction">
            <summary>
              Looks up a localized string similar to The &quot;after&quot; phase constraint must be set to a phase that occurs prior to the &quot;before&quot; phase constraint (or may be equal)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.CannotRemoveImplicitImport">
            <summary>
              Looks up a localized string similar to The implicit import {0} cannot be removed from the project..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.CannotSaveProjectOutsideProjectDirectory">
            <summary>
              Looks up a localized string similar to The project file can only be saved into the project location &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.CapabilitiesNotYetReady">
            <summary>
              Looks up a localized string similar to Project capabilities are not ready from the project capability provider..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.CollectionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to At least one element must be present in the collection..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DataFlowFaults">
            <summary>
              Looks up a localized string similar to Project system data flow &apos;{0}&apos; closed because of an exception: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DataflowLinkOptionsOrCloneable">
            <summary>
              Looks up a localized string similar to An instance of type DataflowLinkOptions or one that implements System.ICloneable was expected..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DefaultCloseText">
            <summary>
              Looks up a localized string similar to Skip error report and continue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DefaultConsentDialogBody">
            <summary>
              Looks up a localized string similar to It may take several minutes to collect an error report..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DefaultConsentDialogHeader">
            <summary>
              Looks up a localized string similar to Visual Studio project system has encountered a non-fatal error..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DefaultOfflineSolutionCheckText">
            <summary>
              Looks up a localized string similar to Send error report and continue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DefaultOnlineSolutionCheckText">
            <summary>
              Looks up a localized string similar to Send error report and continue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DelimitedStringListMissingDelimiterAfterQuote">
            <summary>
              Looks up a localized string similar to A delimiting &apos;{0}&apos; character was expected after the closing quote at position {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DelimitedStringMissingClosingQuote">
            <summary>
              Looks up a localized string similar to The last element in the string list was missing its closing quote character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DelimiterCannotBeQuoteCharacter">
            <summary>
              Looks up a localized string similar to Delimiter cannot be the &quot; character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DeprecatedMethod">
            <summary>
              Looks up a localized string similar to The method or property &quot;{0}&quot; is deprecated and no longer implemented..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DuplicateFolderProjectItem">
            <summary>
              Looks up a localized string similar to Duplicated folder item found in the project: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DuplicateKey">
            <summary>
              Looks up a localized string similar to An element with the same key but a different value already exists..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.DuplicateLinkedProjectItem">
            <summary>
              Looks up a localized string similar to Duplicated linked item found in the project: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ImportCardinalityMismatchExpectsAtLeastOne">
            <summary>
              Looks up a localized string similar to Expected at least one export of the {0} contract after filtering but found {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ImportCardinalityMismatchExpectsAtMostOne">
            <summary>
              Looks up a localized string similar to Expected 0 or 1 exports of the {0} contract after filtering but found {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ImportCardinalityMismatchExpectsExactlyOne">
            <summary>
              Looks up a localized string similar to Expected exactly 1 export of the {0} contract after filtering but found {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.IncompatibleSnapshots">
            <summary>
              Looks up a localized string similar to The snapshots have conflicting rule names (&quot;{0}&quot; and &quot;{1}&quot;)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InternalExceptionMessage">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please contact Microsoft Product Support Services..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidCapabilityExpressionWithPosition">
            <summary>
              Looks up a localized string similar to Invalid capability expression at position {0} in the expression &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidEmptyOperation">
            <summary>
              Looks up a localized string similar to This operation does not apply to an empty instance..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidProjectItemWithTrailingSlash">
            <summary>
              Looks up a localized string similar to Invalid project item: &quot;{0}&quot;. A file item cannot end with a path separator..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidPropertyValue">
            <summary>
              Looks up a localized string similar to Error while reading property &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidStringToValueConversion">
            <summary>
              Looks up a localized string similar to String value &apos;{0}&apos; cannot be translated to any value from type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidTypeConversion">
            <summary>
              Looks up a localized string similar to There is no serialization code for type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidValueToStringConversion">
            <summary>
              Looks up a localized string similar to There is no serialization code for value: {0} from type: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.InvalidWhileWriteLockHeld">
            <summary>
              Looks up a localized string similar to This operation is not valid while a project write lock is held..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ItemTypeNotSupported">
            <summary>
              Looks up a localized string similar to The item type &apos;{0}&apos; is not supported by this project item provider..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.KeyNotFound">
            <summary>
              Looks up a localized string similar to The element with the given key was not found in this set..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.NoComponentImplementationFound">
            <summary>
              Looks up a localized string similar to No project component for interface &quot;{0}&quot; was found in this context..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.NoItemTypeForRule">
            <summary>
              Looks up a localized string similar to Expected to find item type for rule {0}. The rule file is either missing or malformed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.NotSupportedReadOnlyCollection">
            <summary>
              Looks up a localized string similar to This operation is not supported on a read-only collection..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterCannotBeNull">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterCannotHaveZeroLength">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot have zero length..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterContainsInvalidCharacters">
            <summary>
              Looks up a localized string similar to The parameter &quot;{0}&quot; with value &quot;{1}&quot; contains a disallowed character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterListHadNullElement">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; contained a null element which is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterMustEndWithAnySubstringSuffix">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; value must end with one of these suffixes &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterOutOfRange">
            <summary>
              Looks up a localized string similar to Parameter value was outside the range of expected or supported values..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterPathMustBeRooted">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot be a relative path..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterPathMustIncludeFileName">
            <summary>
              Looks up a localized string similar to The file name is missing from the path &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParametersMustHaveTheSameLength">
            <summary>
              Looks up a localized string similar to Parameters &quot;{0}&quot; and &quot;{1}&quot; must have the same number of elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ParameterWrongConcreteType">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; expected concrete type &quot;{1}&quot; but was &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.PathCannotEndWithSeperator">
            <summary>
              Looks up a localized string similar to A file path cannot end with a directory separator..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ProjectFileIsInvalid">
            <summary>
              Looks up a localized string similar to The project file path &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ProjectFilePathEmptyOrWhitespace">
            <summary>
              Looks up a localized string similar to The project file path is invalid because it is empty or contains only whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ProjectHasNoFilename">
            <summary>
              Looks up a localized string similar to Cannot save a project that was not loaded by a file. Try using the Save method with a file name..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ProjectItemNotFound">
            <summary>
              Looks up a localized string similar to Could not find project item with item type &apos;{0}&apos; and include value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ProjectRenameNotAllowed">
            <summary>
              Looks up a localized string similar to Renaming project &quot;{0}&quot; is currently not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.PropertyMissing">
            <summary>
              Looks up a localized string similar to The required property &apos;{0}&apos; is missing or empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.RuleMissing">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; rule is missing from the project..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.RulePropertyMissing">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; rule is missing the &quot;{1}&quot; property..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ServiceMissing">
            <summary>
              Looks up a localized string similar to Cannot find an instance of the {0} service..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.ThereMustBeAtleastOneDimensionInAProjectConfiguration">
            <summary>
              Looks up a localized string similar to There must be at least one dimension defined in a project configuration..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.TooManyComponentImplementationsFound">
            <summary>
              Looks up a localized string similar to Only one implementation for interface &quot;{0}&quot; should exist in this context..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.TreeUpdateRejected">
            <summary>
              Looks up a localized string similar to The request to update the project tree was rejected..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.TypeConversionAlreadyMapped">
            <summary>
              Looks up a localized string similar to Serialization code for type {0} has already been set..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UtilityStrings.UnbalancedQuotes">
            <summary>
              Looks up a localized string similar to This string list cannot include any items that contain an odd number of &quot; characters..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed">
            <summary>
            A base class that offers thread-safe initialization and disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.syncObject">
            <summary>
            The synchronization object used by this instance, including within derived-type code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.synchronousDisposal">
            <summary>
            A flag indicating whether this instance must be synchronously disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.lifecycle">
            <summary>
            This instance's point in the lifecycle.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.wasInitialized">
            <summary>
            Indicates we successfully initialized at some point in the past.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed"/> class,
            leaving MEF imports to be satisfied via reflection.
            </summary>
            <param name="synchronousDisposal">
            A flag indicating whether the derived type's Dispose method must be executed synchronously.
            If this is true and this is a MEF part, it should not take any private locks within its
            Dispose method to avoid deadlocks.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.LifetimeState">
            <summary>
            The various stages of an object's lifecycle.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.LifetimeState.Uninitialized">
            <summary>
            The instance has not yet been initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.LifetimeState.Initializing">
            <summary>
            The instance is being initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.LifetimeState.Initialized">
            <summary>
            The instance has been initialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.LifetimeState.Disposing">
            <summary>
            The instance is being disposed of.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.LifetimeState.Disposed">
            <summary>
            The instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.IsInitializing">
            <summary>
            Gets a value indicating whether this instance is being initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized (and has not yet been disposed).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.IsDisposing">
            <summary>
            Gets a value indicating whether this instance is being disposed of.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.SyncObject">
            <summary>
            Gets the synchronization object for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.DisposeAsync">
            <summary>
            Disposes of this instance asynchronously unless disabled by derived type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.EnsureInitialized(System.Boolean)">
            <summary>
            Initializes this instance if it has not yet been.
            </summary>
            <param name="allowInitializing">A value indicating whether to allow a partially initialized instance if this is the thread performing that initialization.</param>
            <remarks>
            This method throws an exception if it is called from within the Initialize() method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and unmanaged resources owned by this instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync">
            <summary>
            A base class that offers asynchronous thread-safe initialization and disposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.initializeTrigger">
            <summary>
            The task that represents the initialization operation.
            </summary>
            <remarks>
            This lazy should *only* be triggered (initially anyway) by the <see cref="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.InitializeAsync(System.Threading.CancellationToken)"/> method,
            since it orchestrates some surrounding scheduling as well.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.initializationCompletionEvent">
            <summary>
            An event that must be signaled after the <see cref="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.initializeTrigger"/> lazy value factory has completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.disposeTrigger">
            <summary>
            The task that represents the disposing operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.disposingToken">
            <summary>
            A token that is canceled when disposing starts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContextNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.IsDisposing">
            <summary>
            Gets a value indicating whether this instance is being disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.IsInitializing">
            <summary>
            Gets a value indicating whether this instance is being initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized (and has not yet been disposed).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.JoinableCollection">
            <summary>
            Gets the collection of all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.JoinableFactory">
            <summary>
            Gets the factory to use for all joinable tasks initiated by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.InitializationCompletion">
            <summary>
            Gets the task that completes when initialization has completed.
            It does *not* guarantee that initialization has even begun, and does not Join the initialization effort.
            </summary>
            <remarks>
            This is for a very specific case of someone within the initializer wanting to fork
            off execution of something that might call <see cref="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.InitializeAsync(System.Threading.CancellationToken)"/>.
            To avoid an exception from <see cref="M:Microsoft.VisualStudio.Threading.AsyncLazy`1.GetValueAsync(System.Threading.CancellationToken)"/> due to
            alleged recursion into the value factory, we need to wait for the value factory to complete
            before proceeding.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.DisposalToken">
            <summary>
            Gets a token that is canceled when this instance is being disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.DisposeAsync">
            <summary>
            Disposes of this instance asynchronously unless disabled by derived type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes this instance if it has not yet been.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates that the caller no longer is interested in the result.
            Note that this will not cancel the initialization (since other callers may exist).
            But this token will result in an expediant cancellation of the returned Task,
            and a dis-joining of any <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/> that may have occurred as a result of this call.
            </param>
            <remarks>
            This method throws an exception if it is called from within the Initialize() method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.InitializeCoreAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="cancellationToken">A token whose cancellation indicates that disposal of this instance has been requested.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.DisposeCoreAsync(System.Boolean)">
            <summary>
            Disposes of managed and unmanaged resources owned by this instance.
            </summary>
            <param name="initialized">A value indicating whether this instance had been previously initialized.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IJoinableProjectValueDataSource">
            <summary>
            A joinable data source, that often also implements <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IJoinableProjectValueDataSource.Join">
            <summary>
            Extends any access to the UI thread held by the caller to this instance
            to assist in its regular execution, if needed.
            </summary>
            <returns>
            A value whose disposal stops any UI thread sharing from the caller to this service.
            May be <c>null</c> if this data source never needs to be joined.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintService">
            <summary>
            A service that captures semantic descriptions of project changes
            and allows subscription to those events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintService.Subscribe(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintReceiver,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Subscribes a receiver to receive project change events.
            </summary>
            <param name="unconfiguredProject">The unconfigured project the receiver is interested in receiving events for.</param>
            <param name="receiver">The event sink.</param>
            <param name="interestedEventKinds">The kinds of events the sink would like to receive.</param>
            <returns>A value that may be disposed to cancel the subscription.</returns>
            <remarks>
            A subscriber is guaranteed to receive matching calls to
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintReceiver.HintingAsync(Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint)"/> and
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintReceiver.HintedAsync(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint}})"/>.
            When a subscription is created in between two such events, the subscriber will not receive the latter call.
            When a subscription is disposed of in between two such events, the subscriber will still receive the latter call.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext">
            <summary>
            A structure to provide input values to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider.CalculatePropertyValues(Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext,Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues)"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.ItemType">
            <summary>
            Gets the item type of the current item. It is null for a non-project item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.ItemName">
            <summary>
            Gets the current project item name. This is the file name (caption) of the item, without path information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.Metadata">
            <summary>
            Gets the metadata of the current project item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.ParentNodeFlags">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Flags"/> of the parent node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.ExistsOnDisk">
            <summary>
            Whether the project item is physically on the disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.ProjectTreeSettings">
             <summary>
            Gets the project level settings.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.IsFolder">
            <summary>
            Whether this item represents a folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext.IsNonFileSystemProjectItem">
            <summary>
            Whether this item does not represent a file system item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues">
            <summary>
            A structure that represents customizable properties of a project tree node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues.Flags">
            <summary>
            Gets or sets the value which will be used in <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Flags"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues.Icon">
            <summary>
            Gets or sets the value which will be used in <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Icon"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues.ExpandedIcon">
            <summary>
            Gets or sets the value which will be used in <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.ExpandedIcon"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider">
            <summary>
            Extensibility point that allows to calculate properties of the project tree item based on its context.
            The extension should not depend on other changable values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreePropertiesProvider.CalculatePropertyValues(Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyContext,Microsoft.VisualStudio.ProjectSystem.IProjectTreeCustomizablePropertyValues)">
            <summary>
            Update the default value of customizable properties based on the context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSettingsProvider">
            <summary>
            Extensibility point that allows to calculate additional project tree settings, based on project properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSettingsProvider.ProjectPropertiesRules">
            <summary>
            Rules to return additional project properties which are used to compute project tree settings.
            This should return a constant collection, and should not be changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSettingsProvider.UpdateProjectTreeSettings(System.Collections.Immutable.IImmutableDictionary{System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot},System.Collections.Immutable.IImmutableDictionary{System.String,System.String}@)">
            <summary>
            Update project tree settings (which is represent as a string dictionary), when the result from ProjectPropertiesRules has changed.
            The entire tree will be refreshed when the global setting is changed, so it should be only used to collect project level values,
            which affects the behavior of the project tree.
            </summary>
            <param name="ruleSnapshots">The current rule snapshots, which contains the result from the rule defined in <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSettingsProvider.ProjectPropertiesRules"/>.</param>
            <param name="projectTreeSettings">
            The project tree settings used in the physical project tree provider. It contains the current setting data. The provider is expected to
            add its setting to the dictionary, but leaves other settings as it is.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource">
            <summary>
            A source of versioned data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource.DataSourceKey">
            <summary>
            Gets the data source key that is unique to this data source, if applicable; otherwise null
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource.DataSourceVersion">
            <summary>
            Gets the current version of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource.SourceBlock">
            <summary>
            Gets a block that broadcasts the project-versioned values.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements">
            <summary>
            Stores requirements information about capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.CapabilitiesRequirements">
            <summary>
            Lists which capabilities are expected to be present or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.IsEmpty">
            <summary>
            Verifies whether the set of requirements is empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.IsSatisfiedBy(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot)">
            <summary>
            Checks if the current set of capabilities requirements satisfy the specified capabilities snapshot.
            </summary>
            <param name="capabilitiesSnapshot">The capabilities snapshot to check against.</param>
            <returns>True if the snapshot the current requirements satisfy the specified snapshot.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.ConflictsWith(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <summary>
            Checks if the current set of requirements conflicts with a different set.
            <remarks>A capability requirement is considered conflicting if it exists in both sets, but with different values.</remarks>
            </summary>
            <param name="other">The other set to check against.</param>
            <returns>True if the sets contain conflicting information.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.Add(System.String,System.Boolean)">
            <summary>
            Adds information about the specified capability.
            </summary>
            <param name="capability">The capability we are adding.</param>
            <param name="expectedPresence">Whether we expect it to be present or not.</param>
            <returns>A new instance that contains the new data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.Add(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <summary>
            Combines the current set capabilities requirements with another set.
            </summary>
            <param name="projectCapabilitiesRequirements">The other set of capability requirements to add</param>
            <returns>Combined set.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.Remove(System.String[])">
            <summary>
            Removes the specified set of capabilities from the set of capabilities requirements.
            </summary>
            <param name="capabilities">The capabilities to remove.</param>
            <returns>A new instance that contains the updated set.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements.Remove(Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesRequirements)">
            <summary>
            Removes the specified set of capabilities from the set of capabilities requirements.
            </summary>
            <param name="capabilitiesRequirements">The capabilities to remove.</param>
            <returns>A new instance that contains the updated set.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.NamedIdentity">
            <summary>
            Represents an unique identity inside CPS system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.NamedIdentity"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.Id">
            <summary>
            Gets the real Id
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.Name">
            <summary>
            Gets the name of the object.
            Name is only used to help inside a debugger. It is not used to compare two identities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.GetHashCode">
            <summary>
            Gets the hashcode for the identity object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.Equals(Microsoft.VisualStudio.ProjectSystem.NamedIdentity)">
            <summary>
            <see cref="M:System.IEquatable`1.Equals(`0)"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.CompareTo(Microsoft.VisualStudio.ProjectSystem.NamedIdentity)">
            <summary>
            <see cref="M:System.IComparable`1.CompareTo(`0)"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.NamedIdentity.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IFileSystemErrorMessageProvider">
            <summary>
            Exported to the UnconfiguredProject scope to provide more descriptive error messages for
            some exceptions/OS error codes instead of actual exception/error message.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFileSystemErrorMessageProvider.CanProvideCustomErrorMessage(Microsoft.VisualStudio.ProjectSystem.IProjectChangeFileHint,System.Int32,System.String@)">
            <summary>
            Provides a way to show more descriptive error messages to user when some IO related
            operations failed.
            </summary>
            <param name="hint">Hints what IO operation it was</param>
            <param name="nativeErrorCode">Win32 IO error code</param>
            <param name="formattedMessage">If handled by extension, contains a message that user should see</param>
            <returns>True if extension handled specified error, false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IItemTypeGuidProvider">
            <summary>
            Provides support to supply an appropriate value for <code>__VSHPROPID.VSHPROPID_TypeGuid</code>
            </summary>
            <remarks>
            See also https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.shell.interop.__vshpropid.aspx
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IItemTypeGuidProvider.ProjectTypeGuid">
            <summary>
            Identifier for the type of the project hierarchy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSharedImportRegister">
            <summary>
            An UnconfiguredProject-scoped exported service that registers shared files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSharedImportRegister.RegisteredSharedProjectFiles">
            <summary>
            Gets the current set of registered project files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSharedImportRegister.RegisterInitialSharedProjectFilesAsync">
            <summary>
            Registers the initial set of shared project files with the central service.
            </summary>
            <remarks>
            Invoking this method kicks off a service that keeps the shared project file
            registration current for the lifetime of the project.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IAsyncCommandGroupHandler.GetCommandStatusAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},System.Int64,System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.CommandStatus)"/>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.UnhandledTask">
            <summary>
            A reusable completed task that wraps an unhandled command status response.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.handled">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.Handled"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.commandText">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.CommandText"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.status">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.Status"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.sharedInstance">
            <summary>
            A value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.#ctor(System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.CommandStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult"/> struct.
            </summary>
            <param name="handled">true if the command is recognized and the result specified should be returned to Visual Studio. false otherwise.</param>
            <param name="commandText">The default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.</param>
            <param name="status">The query result thus far (as default, or as handed off from previous handler).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.Unhandled">
            <summary>
            Gets a value that represents an unhandled command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.Handled">
            <summary>
            Gets or sets a value indicating whether the command is recognized and the result specified should be returned to Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.CommandText">
            <summary>
            Gets or sets the default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.Status">
            <summary>
            Getes or sets the query result thus far (as default, or as handed off from previous handler).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.AsTask">
            <summary>
            Wraps this instance in a Task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.CommandStatusResult.Equals(Microsoft.VisualStudio.ProjectSystem.CommandStatusResult)">
            <summary>
            Checks equality between this value and another.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectImportTreeSnapshot">
            <summary>
            A snapshot of the import tree for a ConfiguredProject.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectImportTreeSnapshotService">
            <summary>
            Produces snapshots of the import tree for a ConfiguredProject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectImportTreeSnapshotService.GetCurrentImportTreeAsync">
            <summary>
            Returns a current snapshot of the project's import tree, acquiring a project lock as necessary.
            </summary>
            <returns>
            A task whose result is the import tree snapshot.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot">
            <summary>
            Describes an imported project file and the project files it imports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot.ProjectPath">
            <summary>
            Gets the full path to the imported file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot.Label">
            <summary>
            Gets the value of the Label on the Import element responsible for importing this project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot.GroupLabel">
            <summary>
            Gets the value of the Label attribute on the ImportGroup element (if any) containing the Import responsible for importing this project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot.Imports">
            <summary>
            Gets the list of imports that appear in this project file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFolder">
            <summary>
            Describes a shared folder that may be imported by a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFolder.FolderPath">
            <summary>
            Gets the full path to the shared folder.
            </summary>
            <value>An absolute path that ends with a trailing path separator.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFolder.ProjectPath">
            <summary>
            Gets the full path to the project file that tracks this shared folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersService">
            <summary>
            A service exported at the UnconfiguredProject scope for managing shared folders for that project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersService.CreateSharedFolderAsync(System.String)">
            <summary>
            Creates a new Shared Folder on disk at the specified path.
            </summary>
            <param name="folderPath">The absolute or project-relative path of the shared folder (including leaf name.)</param>
            <returns>A task whose result is the absolute path to the shared.items file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersService.AddSharedFolderAsync(System.String)">
            <summary>
            Adds the specified Shared.items file as an import to this project.
            </summary>
            <param name="sharedItemsPath">The absolute or project-relative path to the shared.items file that is directly within the Shared Folder to be added.</param>
            <returns>A task whose result is <c>true</c> if the shared folder was added; <c>false</c> if it was already a member of the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersService.RenameSharedFolderAsync(System.String,System.String)">
            <summary>
            Renames a shared folder.
            </summary>
            <param name="sharedItemsPath">The project-relative or absolute path to the shared.items file within the folder to be renamed.</param>
            <param name="newFolderName">The new name for the shared folder.</param>
            <returns>A task that represents the async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersService.RemoveSharedFolderAsync(System.String)">
            <summary>
            Removes the Shared Folder associated with the specified Shared.items file.
            </summary>
            <param name="sharedItemsPath">The absolute or project-relative path to the Shared.items file found within the Shared Folder to be removed.</param>
            <returns>A task that captures the result of the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshotService">
            <summary>
            A subscription service for shared folders in a ConfiguredProject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshotService.GetSharedFoldersAsync">
            <summary>
            Returns a current snapshot of the project's shared folders, acquiring a project lock as necessary.
            </summary>
            <returns>
            A task whose result is the snapshot of current shared folders.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot">
            <summary>
            A snapshot of shared folders imported by a project.
            </summary>
            <remarks>
            The strings are absolute paths with trailing slashes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot.ProjectDirectory">
            <summary>
            Gets the full path to the project directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot.ContainsSharedFolder(System.String)">
            <summary>
            Checks membership of some folder in the shared folders collection.
            </summary>
            <param name="folderPath">A full path to the folder to check for.</param>
            <returns><c>true</c> if <paramref name="folderPath"/> represents a Shared Folder in this snapshot; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ISharedImportSnapshotService">
            <summary>
            A service that publishes snapshots of shared import ProjectRootElements as they are updated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.RegistrationOption">
            <summary>
            This enum specifies options available when registering a shared project file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.RegistrationOption.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.RegistrationOption.ProjectAffinity">
            <summary>
            Attempt to register the shared project file as being owned by the calling project
            if possible. If this flag is not specified, then the shared project file will be
            managed in another project. If no other project registered the file specifying
            ProjectAffinity, then the shared project file will be managed in a (Solution-scoped)
            project-independent manner.
            </summary>
            <remarks>
            Projects that want to use this option need to meet the following criteria:
              1. The Project manages a node in its hierarchy for the shared project file.
                 NOTE: In Visual Studio this means that the project has an implementation
                       of IVsProject.IsDocumentInProject that will return the itemid for
                       the sharedProjectFile. It is also responsible to return an appropriate
                       string (of the project's choice) as the VSPROPID_SaveName for this itemid.
                       The project is also expected to implement IVsProject3.TransferItem.
                       This method is called to transfer ownership of the open shared
                       project file document to the project; the project is expected to
                       call IVsRunningDocumentTable.RenameDocument passing itself as the
                       IVsHierarchy and their itemid for the shared project file.
              2. The project is responsible to save the sharedProjectFile when asked to
                 save its corresponding project item.
                 NOTE: In Visual Studio this means that the project has an implementation of
                       IVsPersistHierarchyItem that will lookup the sharedProjectFile in the
                       SVsRunningDocumentTable and call IVsPersistDocData.SaveDocData on
                       the open document (DocData object).
            The first preference is to give ownership of the open shared project file document to
            the single project that registers with SharedProjectFileOwnerProject. If there
            is not a OwnerProject, then an attempt is made to give the ownership to the project
            that registers with ProjectAffinity. If multiple projects register the same shared
            project file with ProjectAffinity, then the ownership of the open document is given to the
            registering project which is the highest-level common parent project if there is one.
            Shared project files that are registered by either a project that does not meet
            the above requirements or which have been registered by multiple projects with no
            common parent project will be managed in a project-independent manner.
            NOTE: In Visual Studio they will be managed by the special, solution-scoped,
                  invisible hierarchy called "[Shared MSBuild Project Files]".
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.RegistrationOption.InMemoryReload">
            <summary>
            This flag is used by projects that support light-weight reloading of their
            use of a shared project file without fully requiring the project to be closed.
            </summary>
            <remarks>
            This means that the project supports reloading by directly telling the MSBuild
            ProjectCollection to reload the MSBuild project file in memory without unloading
            the project completely.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.RegistrationOption.EnableSccSupport">
            <summary>
            This flag is used by projects that want to enable Source Code Control (SCC)
            support for this shared project file.
            </summary>
            <remarks>
            In Visual Studio this means that the shared project file will managed as a
            "Project IVsHierarchy" in the Solution that has an implementation of
            IVsSccProject.GetSccFiles that returns the shared project file as its
            "project file" (for VSITEMID_ROOT). This also enables the implemenation
            to save a special PropertyGroup inside of the shared project file to store
            the ProjectID Guid and the SccLocation strings assigned to the project
            when it is added to SCC.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.RegistrationOption.SharedProjectFileOwnerProject">
            <summary>
            This flag is used by the distinguished project user of a shared MSBuild file
            that wraps the user's access to the shared project file (aka Shared Assets Project).
            </summary>
            <remarks>
            <para>
            When a clear owner for the shared project file can be established, then this project trumps
            all projects that register with ProjectAffinity as the project that is given the
            ownership of the open shared MSBuild file in the RunningDocumentTable (RDT).
            </para>
            <para>
            There normally should only be one project that registers as the user of a shared MSBuild
            file with "SharedMSBuildFileOwnerProject" flag in the Solution. In this case this project
            is the assigned OwnerProject.
            In the rare event that more than one project registers with the "SharedMSBuildFileOwnerProject"
            flag, then if only one of these project is loaded (i.e. all of the others are unloaded),
            then the single, LOADED project would be assigned as the OwnerProject.
            </para>
            <para>
            NOTE: In Visual Studio the project that should specify this flag is the "real",
            top-level shared project file listed in the Solution file that wraps an importable
            shared project file (aka shared assets project or shared items project).
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SaveOption">
            <summary>
            This option specifies the desired persistance operation to be performed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SaveOption.NoSave">
            <summary>
            Save nothing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SaveOption.SaveIfDirty">
            <summary>
            Save silently anything that is dirty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SaveOption.PromptSave">
            <summary>
            Prompt the user if they want to save.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService">
            <summary>
            A ProjectService scoped export which projects which use shared project files (e.g. import files) should use to register
            their shared files.
            </summary>
            <remarks>
            A host application (e.g. Visual Studio) could use this registration to coordinate the handling and persistence of
            shared project files.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.RegisterSharedProjectFiles(System.Collections.Generic.IReadOnlyCollection{System.String},System.String,Microsoft.VisualStudio.ProjectSystem.RegistrationOption,System.String)">
             <summary>
             Called by projects which use (or have used) shared project files (e.g. import files) to register
             those files during the project open operation.
             </summary>
             <param name="sharedFileFullPaths">list of shared project files the project wants to register</param>
             <param name="sharedFileUserFullPath">full path of the project that is calling to register its use of a
             shared project files.</param>
             <param name="options">Registration options.</param>
             <param name="categoryName">optional category (or role) for this shared project file, e.g. "SharedItemsImports".
             It may be null or String.Empty if no category grouping is required.</param>
             <remarks>
             Notes:
                 1. This method is normally called during the project opening operation. It may also be called while a project
                    is open when new shared files are introduced to the project.
                 2. Projects must be sure to call UnregisterAnySharedProjectFilesAsync when their project is closing.
                 3. If a project has ever called this services to register use of shared project files, then
                    it must continue to call the service from then on even if all of the imported project files
                    have been removed from the project. This is necessary so the service can properly track
                    when shared project files are no longer in use. Because the initialization operation of a project
                    may be asyncronous, the service won't assume that because a project is loaded and it never
                    called to register any files, that its previously registered shared project files are no longer in use.
                    It could just be that the project's initialization operation is not yet complete.
            
             IN VISUAL STUDIO:
                 When this is being called during the Project creation sequence it must be called after
                 IVsProjectFactory.CreateProject has returned (and ideally before IVsSolutionEvents.OnAfterOpenProject
                 is fired). It may also be called at later times when new shared MSBuild file import statements are added.
                 Recommended points to call this during project creation are the following:
                    1. IVsPrioritizedSolutionEvents.PrioritizedOnAfterOpenProject
                    2. if your are a flavored project is from IVsAggregatableProject.OnAggregationComplete.
                    3. IVsParentProject.OpenChildren.
             <para>
                 Registering shared project files with this service gives the following benefits:
                 1. A document (DocData object) will be registered in the RunningDocumentTable that will block the user from
                    opening the file simultaneously in a text (or other) editor. The user will be given the message that
                    The document 'blah' is already open as a project or a solution and cannot be opened in an editor at this time.".
                 2. The user will be prompted to save the shared project file in the Save Changes dialog at the correct
                    times. This includes when closing the solution or unloading/removing a project that has registered
                    the file. Ownership of the open document will continually be updated as projects that register the
                    file are opened/closed. If the file is managed with ProjectAffinity, then the shared project file
                    will appear a sub node under the highest-level registered project. If there is not a suitable
                    common parent project (with ProjectAffinity), the the shared project file will appear as a node
                    under the Solution-scoped "[Shared MSBuild Project Files]" project in the SaveChanges dialog.
                 3. The shared project file along with any contained item files will automatically be saved whenever
                    a registering project is saved.
                    This service tracks the IVsRunningDocTableEvents.OnAfterSave event fired when a registering project is saved.
                 4. This service automatically takes care of calling QuerySaveFiles with SVsQueryEditQuerySave service
                    when saving the shared project file. This is important for proper SCC handling during a save operation.
                 5. This service coordinates the Open Solution From Source Code Control (SCC) operation and automatically
                    adds the shared project files as invisible project files in the Solution (.sln) so that they are managed
                    by the active SccProvider. This achieves the goal of getting the shared project files downloaded from
                    SCC by file-based SCC Providers (e.g. MSSCCI SccProviders).
             </para>
             <para>
             Note:
                 Category names are optional and at the descretion of the caller. A project can use any names it likes.
                 Category names do not need to be predefined at install time; they can be generated at runtime.
                 One possible strategy is to use the project Configuration name (e.g. "Debug|x86") as the category name.
                 If the project uses such names that are user defined and can be added/removed, then it should call
                 RegisterSharedProjectFileCategoriesAsync after it as finished calling RegisterSharedProjectFilesAsync for
                 all of its categories. This allows the system to clean out stale category information that is no longer
                 being used.
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.UnregisterAnySharedProjectFilesAsync(System.String)">
            <summary>
            Unregisters any shared files previously registered by the specified project.
            </summary>
            <param name="sharedFileUserFullPath">full path of the project that is calling to unregister its use of its
            shared project files.</param>
            <returns>A task that completes when the unregistration operation has finished.</returns>
            <remarks>
            This method is typically called during the project's close/dispose operation.
               * It is not treated as an error to call this for a projectFullPath that actually has not
            registered any files.
               * The shared project files that are being unregistered will still be considered as "in use".
            e.g. In Visual Studio this means the the unregistered shared project files will still be recorded as
            files to be managed by Source Code Control (SCC) in the Solution (.sln) file.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.RegisterSharedProjectFileCategories(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Called by projects that use dynamic shared project file category names (e.g. based on the names
            of project configurations (e.g. "Debug|x86"), in order to allow cleanup of stale persisted category data.
            </summary>
            <param name="sharedFileUserFullPath">full path of the project that is calling to register its use of a
            shared project files.</param>
            <param name="allPossibleProjectFileCategories">list of possible file categories still in use by the project.
            </param>
            <remarks>
            For example, if the project uses category names based on project configuration names and a configuration was
            deleted, then it is important to have called this method with the now current set of configuration based
            category names. If the project uses such names that are user defined and can be added/removed, then it should
            call RegisterSharedProjectFileCategories after it as finished calling RegisterSharedProjectFilesAsync for
            all of its categories.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.ReloadSharedProjectFileAsync(System.String)">
            <summary>
            Called by projects that want to request the SharedProjectFileRegistrationService to orchestrate the reloading
            of all projects that have registered as using (i.e. importing) the specified shared project file.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>A bool returning Task that completes when the reloading of all registered client projects have
            been reloaded. A true return value for this Task indicates that the specified shared project file
            had actually been registered as being used by a client project and that reloading of client project
            had been performed. A false return value of the Task indicates that the file had not been
            registered as being used by any client project with the SharedProjectFileRegistrationService.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.GetUserFullPathsOfSharedProjectFile(System.String)">
            <summary>
            Returns the list full paths of shared project file user projects for a particular shared project file.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>list of shared project file user project full paths</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.GetUsersOfSharedProjectFile(System.String)">
            <summary>
            Returns the list ProjectID Guids of shared project file user projects for a particular shared project file.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>list of shared project file user project ProjectID Guids</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.GetOwnerProjectForSharedProjectFile(System.String)">
            <summary>
            Returns the shared project file user project that registered use of the shared project file
            with RegistrationOption.SharedProjectFileOwnerProject.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <returns>project file full path for the SharedProjectFileOwnerProject; or <c>null</c> if none is found.</returns>
            <remarks>
            <para>
            When a clear owner for the shared project file can be established, then this project trumps
            all projects that register with ProjectAffinity as the project that is given the
            ownership of the open shared MSBuild file in the RunningDocumentTable (RDT).
            </para>
            <para>
            There normally should only be one project that registers as the user of a shared MSBuild
            file with "SharedProjectFileOwnerProject" flag. After this project is loaded, it
            would would be the project returned from GetOwnerProjectForSharedProjectFile. When
            this project is unloaded or removed, then GetOwnerProjectForSharedProjectFile would
            return Guid.Empty indicating there is no owner for the shared MSBuild file loaded.
            </para>
            <para>
            In the case that more than one project registers with the "SharedProjectFileOwnerProject"
            flag, then if only one of these project is loaded (i.e. all of the others are unloaded),
            then the single, LOADED project would be considered the current owner for the shared MSBuild
            file and would be the project returned from GetOwnerProjectForSharedProjectFile.
            If there are multiple loaded projects that registered with the "SharedProjectFileOwnerProject"
            flag, then GetOwnerProjectForSharedProjectFile would return Guid.Empty indicating there is
            no clear owner for the shared MSBuild file. In this case, the ownership status is ambiguous.
            </para>
            <para>
            NOTE: In Visual Studio the project that should specify this flag is the "real",
            top-level shared project file listed in the Solution file that wraps an importable
            shared project file (aka shared assets project or shared items project).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.EnsureUsersOfSharedProjectFileAreLoaded(System.String)">
            <summary>
            Ensure all users of a given shared project file are fully loaded.
            </summary>
            <param name="sharedFileFullPath">full path of a (potential) shared project file</param>
            <remarks>
            <para>IN VISUAL STUDIO:
            This method will force all async loading of the shared project file user projects to be
            completed (by ASL).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.EnsureActiveUserOfSharedProjectFileIsLoaded(System.String)">
            <summary>
            Ensures that the active user of a given shared project file is fully loaded.
            </summary>
            <param name="sharedFileFullPath">Full path of a (potential) shared project file.</param>
            /// <remarks>
            <para>IN VISUAL STUDIO:
            This method will force async loading of the active shared project file user project to be
            completed (by ASL).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.IsSharedProjectFilesManagerHierarchyLoadedAsync">
            <summary>
            Is the shared project files manager hierarchy already loaded?
            </summary>
            <return>A task whose result is true if the shared project files manager hierarchy is already loaded.</return>
            <remarks>This method is for perf optimization, in order to avoid loading the shared project files manager hierarchy when it is not necessary.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.QueryRenameSharedProjectFile(System.String,System.String)">
            <summary>
            Checks with the environment for approval to rename a shared project file, and
            if approved performs any necessary prior steps (such as checking out of the solution file).
            Must be invoked on the UI thread.
            </summary>
            <param name="oldSharedFileFullPath">The old full path to the shared project file.</param>
            <param name="newSharedFileFullPath">The new full path to the shared project file.</param>
            <returns>A value indicating whether the rename is allowed to proceed.</returns>
            <exception cref="T:System.Exception">May be thrown if an error occurs while validating the rename.</exception>
            <remarks>
            NOTE: In Visual Studio this will result in:
            If the shared file is enabled for SCC integration, this method will invoke:
             * IVsSolution.QueryRenameProject
               * IVsTrackProjectDocuments2.QueryRenameFile
            Otherwise for non SCC-enabled shared files this will simply call:
             * IVsTrackProjectDocuments2.QueryRenameFile
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISharedProjectFileRegistrationService.OnAfterRenameSharedProjectFile(System.String,System.String)">
            <summary>
            Informs the environment of a renamed shared project file.
            Must be invoked on the UI thread.
            </summary>
            <param name="oldSharedFileFullPath">The old full path to the shared project file.</param>
            <param name="newSharedFileFullPath">The new full path to the shared project file.</param>
            <remarks>
            <para>
            It is the caller's responsibility to have actually renamed the file on disk,
            and to update all imports of this file.
            </para>
            <para>
            NOTE: In Visual Studio this will result in:
            If the shared file is enabled for SCC integration, this method will invoke:
             * IVsSolution.OnAfterRenameProject
               * IVsTrackProjectDocuments2.OnAfterRenameFile
               * IVsSolutionEvents.OnAfterRenameProject
               * RunningDocumentTable.RenameDocument
               * etc.
            Otherwise for non SCC-enabled shared files this will simply call:
             * IVsTrackProjectDocuments2.OnAfterRenameFile
             </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IVetoProjectPreLoad">
            <summary>
            An interface that allows an extension to prevent a specific project
            from loading.
            </summary>
            <remarks>This component exists on the UnconfiguredProject level.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVetoProjectPreLoad.AllowProjectLoadAsync(System.Boolean,Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration,System.Threading.CancellationToken)">
            <summary>
            Checks whether the project should be allowed to load.
            </summary>
            <param name="isNewProject">A value indicating whether the project is being newly created; <c>false</c> indicates we are loading an existing project.</param>
            <param name="activeConfiguration">The anticipated active configuration for this project.</param>
            <param name="cancellationToken">A token whose cancellation token that signals lost interest in the result of this call.</param>
            <returns>A task whose result is true if the project is allowed to load; false otherwise.</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException">May also be thrown to reject a project load with a specific error.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ICommandGroupHandler">
            <summary>
            An interface that extensions can export to indicate that they support
            handling a specific group of commands. CPS extensions can export as
            many command group handlers as needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ICommandGroupHandler.GetCommandStatus(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},System.Int64,System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.CommandStatus)">
            <summary>
            Check if a specific command is supported and enabled.
            </summary>
            <param name="nodes">The project nodes being queried.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandText">The default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.</param>
            <param name="progressiveStatus">The query result thus far (as default, or as handed off from previous handler).</param>
            <returns>A value that describes how this command may be handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ICommandGroupHandler.TryHandleCommand(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},System.Int64,System.Boolean,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Indicates that the user wants to execute a specific command.
            </summary>
            <param name="nodes">The project nodes to execute on.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandExecuteOptions">Values describe how the object should execute the command.</param>
            <param name="variantArgIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="variantArgOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>true if the extension has handled execution for this command and should prevent other handlers from processing the command. false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject">
            <summary>
            The ConfiguredProject represents the set of components that are available
            for a given set of project capabilities, as defined by the MSBuild project
            instance provided and the configuration under which the project is evaluated.
            </summary>
            <remarks>
            Implementing classes must be multi-threaded safe.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectUnloading">
            <summary>
            An event raised after background tasks have completed (or timed out) but before the MEF container is disposed of.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectChanged">
            <summary>
            Occurs after any write lock is released that caused a change to this project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectChangedSynchronous">
            <summary>
            Occurs as any write lock is about to be released that caused a change to this project.
            </summary>
            <remarks>
            This event is raised while the write lock is still held, but on another thread.
            Handlers of this event therefore cannot get any access to the project.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectVersion">
            <summary>
            Gets a value which may be used to identify the current version of the project
            in data sources of other values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectVersionBlock">
            <summary>
            Gets a broadcast block that publishes the project version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.ProjectConfiguration">
            <summary>
            The ProjectConfiguration used for the evaluation of this ConfiguredProject
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.Capabilities">
            <summary>
            Gets the project capabilities of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.UnconfiguredProject">
            <summary>
            The unconfigured instance of the loaded project that created this configured instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.Services">
            <summary>
            Gets an accessor to the well known services and arbitrary extensions published to this configured project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject.NotifyProjectChange">
            <summary>
            Notify that the project has to be reevaluated due to changes outside of the project file.
            MSBuild evaluation may depend on the status of the file system or registries. This method allows the other watching service to
            notify the project system to start reevaluation. This method must be called inside a write lock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions">
            <summary>
            Options for dealing with cached values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.None">
            <summary>
            Default options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.InvalidateOnAllGlobalPropertyChanges">
            <summary>
            Always invalidate the cache if a property in <see cref="P:Microsoft.Build.Evaluation.ProjectCollection.GlobalProperties" />
            is changed, even if the property is specifically set in such a way to not normally
            invalidate the project evaluation state.
            </summary>
            <remarks>
            Some global properties changes specifically do NOT affect the evaluation counter
            (the solution configuration XML blob, for example).
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.ValueFactoryRequiresUpgradeableRead">
            <summary>
            Indicates the value factory performs in-context project reads, which currently requires
            write locks on occasion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.DoNotHoldLockForValueFactoryCompletion">
            <summary>
            This flag avoids holding a project read lock around the invocation
            of the value factory.
            This flag is incompatible with the <see cref="F:Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions.ValueFactoryRequiresUpgradeableRead"/> flag.
            </summary>
            <devremarks>
            In Dev12+1, we should probably remove this flag and make the ConfiguredProjectCache always behave as if it were set.
            </devremarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException">
            <summary>
            Thrown when an active project configuration switch makes continuation some operation impossible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IActiveProjectTreeProvider">
            <summary>
            A service that provides a stream of project tree snapshot updates from the currently active project tree provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IActiveProjectTreeProvider.Tree">
            <summary>
            Gets the source block for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IActiveProjectTreeProvider.SetActiveTreeProviderAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider)">
            <summary>
            Changes the active project tree provider.
            </summary>
            <param name="treeProvider">The new tree provider to use.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions">
            <summary>
            Exposes the data sources and versions of each that went into computing the value this interface is implemented on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueVersions.DataSourceVersions">
            <summary>
            Gets a map documenting each source for the makeup of this value
            and the version backing that source's current input.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectSnapshotService">
            <summary>
            Defines a service which tracks the active configured project and provides a stream of its snapshots through a dataflow block.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectSubscriptionService">
            <summary>
            Provides cross-sectional views of the project's evaluation and post design-time build states.
            </summary>
            <remarks>
            This service is available at the UnconfiguredProject level, and watches the ConfiguredProject
            associated with the active solution configuration.
            When the active solution configuration changes, this service reports that as a project change
            complete with a snapshot from the activated ConfiguredProject, and a diff between the last
            snapshot from the previously active ConfiguredProject and the newly activated one.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IHandsOffService">
            <summary>
            Defines a service which allows clients to notify interested parties when they can and cannot have access to specified files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IHandsOffService.HandsOnFilesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notify VS that the specified files are available for others to access.
            </summary>
            <param name="files">The files to hands-on.</param>
            <returns>A task representing the work involved in ensuring everyone else can now use the specified files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IHandsOffService.HandsOffFilesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notify VS that these files are needed for an exclusive operation.
            </summary>
            <param name="files">The files to hands-off.</param>
            <returns>A task representing the work involved in ensuring no one else is using the specified files.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectDirectoryBasedTreeProvider">
            <summary>
            An interface describing a tree provider that has a backing directory tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectDirectoryBasedTreeProvider.CurrentDirectoryTree">
            <summary>
            Gets the current file system directory tree backing this tree provider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHostHandler">
            <summary>
            A contract exported by CPS hosts that wish to take actions when CPS suffers internal errors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHostHandler.HandleFaultAsync(System.Exception,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Invoked when interesting CPS failures occur that the user should be notified about.
            </summary>
            <param name="failure">The exception describing the failure.</param>
            <param name="severity">The severity of the failure.</param>
            <param name="project">The project related to the failure, if applicable.</param>
            <returns>A task that is completed when the fault has been fully reported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectFaultProvider">
            <summary>
            Defines an object which can detect and resolve project faults
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectFaultProvider.FaultChanged">
            <summary>
            Event raised when the faulted condition changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectFaultProvider.FaultMessage">
            <summary>
            A message explaining the current fault.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectFaultProvider.IsFaulted">
            <summary>
            Flag indicating if the current state is faulted or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultProvider.ResolveFault(System.Boolean@)">
            <summary>
            Method to be invoked to resolve the fault.
            </summary>
            <param name="reload">Set to true when the resolution requires the project to reload.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.FaultChangedEventArgs">
            <summary>
            The event args for IProjectFaultProvider.FaultChanged.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.FaultChangedEventArgs.IsFaulted">
            <summary>
            Flag indicating if the faulted state is active.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot">
            <summary>
            Describes a snapshot of some state of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot.ProjectInstance">
            <summary>
            Gets an immutable ProjectInstance that captures some state of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot.ProjectFileEncoding">
            <summary>
            Gets the encoding for the project file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot.FullPath">
            <summary>
            Gets the full path of the project file
            </summary>
            <remarks>
            ProjectInstance's FullPath won't reflect the case-only change, so we need this
            property to keep and pass the true full path to all the clients.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot.DependentFileTimes">
            <summary>
            Gets a dictionary to all dependent files and its last modified time,
             only if the project snapshot bases on files on the disk, it will contain .
            If the snapshot uses any change done in the memory, the collection will be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshot.EvaluationVersion">
            <summary>
            The evaluationCounter value to check whether the snapshot is upToDate to the current project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate">
            <summary>
            Describes a set of changes made to the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate.ProjectChanges">
            <summary>
            Gets the map of rule names to change descriptions for those rules.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate.CurrentState">
            <summary>
            Gets the map of rule names to the current state of the project for that data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate.ProjectConfiguration">
            <summary>
            Gets the project configuration for this update.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeService">
            <summary>
            Describes an UnconfiguredProject level service that manages the tree to be displayed in the Solution Explorer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeService.CurrentTree">
            <summary>
            Gets the most recently published tree, or <c>null</c> if none has been published yet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeService.PublishLatestTreeAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Waits for the latest tree to be published as the <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeService.CurrentTree"/>,
            promoting any and all tasks that require UI thread execution to reentrant-priority
            to ensure their completion.
            </summary>
            <param name="blockDuringLoadingTree"><c>true</c> if the caller wants to block until the initial (real) project tree (not the loading tree) is published.</param>
            <param name="waitForFileSystemUpdates">A flag indicating whether to also block for pending file system change hints to be reflected in the tree.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>The tree that was published by this call.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException">Thrown when the data source requirements include a project configuration and the active configuration is switched before other data source requirements are satisfied.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeService.PublishTreeAsync(System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement},System.Threading.CancellationToken)">
            <summary>
            Returns a task that will complete when a tree that includes data that meets the specified requirements
            is published, and whose result will be the data about that tree.
            </summary>
            <param name="minimumRequiredDataSourceVersions">The minimum required versions of various data sources that may be included in the tree.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task.</returns>
            <exception cref="T:Microsoft.VisualStudio.ProjectSystem.ActiveProjectConfigurationChangedException">Thrown when the data source requirements include a project configuration and the active configuration is switched before other data source requirements are satisfied.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeService.PublishAnyNonLoadingTreeAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a task that will complete when a tree that includes any project data (not just the "loading tree" placeholder)
            has been published.
            </summary>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeService.PublishAnyNonNullTreeAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a task that will complete when any tree is published.
            </summary>
            <param name="cancellationToken">A token that indicates the caller no longer wants the result.</param>
            <returns>A task whose result is the published tree.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeServiceState">
            <summary>
            Gets an immutable description of a project tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeServiceState.Tree">
            <summary>
            Gets the project tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeServiceState.TreeSnapshot">
            <summary>
            Gets the project tree and supporting data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeServiceState.ProjectSnapshot">
            <summary>
            Gets the project snapshot from which the tree was produced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeServiceState.SourceItems">
            <summary>
            The source items from the project version from which the tree was produced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeServiceState.TreeProvider">
            <summary>
            Gets the provider of the <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeServiceState.Tree"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot">
            <summary>
            Describes the progressive state of a project tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot.Tree">
            <summary>
            Gets the newly published tree.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot.TreeProvider">
            <summary>
            Gets the tree provider that produced this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot.PopulatingConfiguredProject">
            <summary>
            Gets the configured project whose data went into populating this tree.
            </summary>
            <value>May be null if the tree does not include any data from a configured project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot.LazyFill">
            <summary>
            Gets a value indicating whether the updates made in the new tree represent
            either lazy-filled items or item changes that are benign to the user.
            </summary>
            <remarks>
            A value of <c>true</c> is a hint that new items should not be selected, or their parents expanded.
            TODO Dev14: remove this property, which TreeServce no longer uses.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1">
            <summary>
            Describes the versions of various data sources that went into the production of some value.
            </summary>
            <typeparam name="T">The type of the versioned value.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement">
            <summary>
            Describes a version requirement for a particular data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement.Version">
            <summary>
            Gets the version required of the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectVersionRequirement.AllowMissingData">
            <summary>
            Gets a value indicating whether no data at all from a data source is considered out of date data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService">
            <summary>
            Provides cross-sectional views of the project's evaluation and post design-time build states.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current MSBuild ProjectInstance snapshots, with a few other trivial MSBuild data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current MSBuild ProjectInstance snapshots, with a few other trivial MSBuild data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ImportTreeSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts the current project import tree state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.SharedFoldersSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts the current project shared folders.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.OutputGroupsSource">
            <summary>
            Gets the source of a TPL Dataflow block that broadcasts output groups.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectCatalogBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project snapshots bundled with rules for how to interpret the data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectCatalogSource">
            <summary>
            Gets the source of the TPL Dataflow that broadcasts current project snapshots bundled with rules for how to interpret the data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project evaluation state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectRuleSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current project evaluation state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectBuildRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project build state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.ProjectBuildRuleSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current project build state, along with the previous state and a diff describing what changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.JointRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project evaluation and build state jointly, along with the previous state and a diff describing what changed.
            </summary>
            <remarks>
            Currently, this block's messages may differ from the one-type data of the other blocks.
            Specifically this block only publishes data when the evaluation and build rule blocks publish
            data based on the same version of the project snapshot, which during multiple project changes
            made in fast succession can result in less frequent updates than either of the other two blocks.
            When updates are "skipped" by this block, file renames are not guaranteed to be preserved.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.JointRuleSource">
            <summary>
            Gets the TPL Dataflow source that broadcasts current project evaluation and build state jointly, along with the previous state and a diff describing what changed.
            </summary>
            <remarks>
            Currently, this block's messages may differ from the one-type data of the other blocks.
            Specifically this block only publishes data when the evaluation and build rule blocks publish
            data based on the same version of the project snapshot, which during multiple project changes
            made in fast succession can result in less frequent updates than either of the other two blocks.
            When updates are "skipped" by this block, file renames are not guaranteed to be preserved.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.SourceItemsRuleBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts current project source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.SourceItemsRuleSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts current project source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.SourceItemRuleNamesBlock">
            <summary>
            Gets the TPL Dataflow block that broadcasts the set of names of rules that describe source items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionService.SourceItemRuleNamesSource">
            <summary>
            Gets the source of the TPL Dataflow block that broadcasts the set of names of rules that describe source items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeFileRenameHint">
            <summary>
            Describes a project change having to do with a file rename operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeFileRenameHint.RenamedFiles">
            <summary>
            Gets the full paths of the affected files, where the key is the old path and the value is the new path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices">
            <summary>
            An interface that provides access to common configured project scoped services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.OutputGroups">
            <summary>
            Gets the output groups service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.Build">
            <summary>
            Gets the build service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.BuildSupport">
            <summary>
            Gets the build support service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.AssemblyReferences">
            <summary>
            Gets the assembly references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ComReferences">
            <summary>
            Gets the COM references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.SdkReferences">
            <summary>
            Gets the SDK references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.PackageReferences">
            <summary>
            Gets the package references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.WinRTReferences">
            <summary>
            Gets the WinRT references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectReferences">
            <summary>
            Gets the project references service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.SourceItems">
            <summary>
            Gets the source items service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectPropertiesProvider">
            <summary>
            Gets a service that can read and write properties to the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.UserPropertiesProvider">
            <summary>
            Gets a service that can read and write properties to the user file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectAsynchronousTasks">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.AdditionalRuleDefinitions">
            <summary>
            Gets the additional rule definition service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.PropertyPagesCatalog">
            <summary>
            Gets the provider of property Rule files.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectSubscription">
            <summary>
            Gets the project subscription service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.ProjectSnapshotService">
            <summary>
            Gets the project snapshot service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectServices.HostObject">
            <summary>
            Gets a host-specific object associated with this configured project.
            </summary>
            <value>May be null if this service is not available for this project.</value>
            <remarks>
            Inside Visual Studio, this object implements IVsProjectCfg.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CopyPasteOperations">
            <summary>
            Defines the types of copy/paste operations. This is used to declare/determine what operations are supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CopyPasteOperations.None">
            <summary>
            The command is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CopyPasteOperations.Copy">
            <summary>
            Copy the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CopyPasteOperations.Cut">
            <summary>
            Cut/move the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CopyPasteOperations.Drag">
            <summary>
            Drag the source items. Cut, copy, or both should also be specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CopyPasteOperations.All">
            <summary>
            All operations.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DropEffects">
            <summary>
            Defines the type of operation to perform on drop/paste.
            </summary>
            <remarks>Matches type defined in oleidl.h</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DropEffects.None">
            <summary>
            The command is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DropEffects.Copy">
            <summary>
            Copy the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DropEffects.Move">
            <summary>
            Move the source items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DropEffects.Link">
            <summary>
            Link to the source items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectActivationTracking">
            <summary>
            A ConfiguredProject-scope service that exposes events regarding activation.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectActivationTracking.Activated">
            <summary>
            Occurs when the active solution configuration is changed
            from not including this configured project to including this configured project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectActivationTracking.Deactivated">
            <summary>
            Occurs when the active solution configuration is changed
            from including this configured project to not including this configured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectActivationTracking.IsActive">
            <summary>
            Gets a value indicating whether this configured project is a member
            of the active solution configuration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectActivationTracking.ActivationTask">
            <summary>
            Gets a task that is completed when this configuration is activated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ICopyPackager">
            <summary>
            An interface that may be MEF exported by components that want to set
            clipboard data for a set of selected nodes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ICopyPackager.ClipboardDataFormats">
            <summary>
            Gets the data formats this packager supports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ICopyPackager.GetAllowedOperations(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider)">
            <summary>
            Determines whether or not this copy packager can provide data for the given set of nodes and what type
            of operations can be performed on the nodes.
            </summary>
            <param name="selectedNodes">The currently selected nodes.</param>
            <param name="currentProvider">The current tree provider.</param>
            <returns>The operations allowed on the specified set of nodes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ICopyPackager.GetPointerToDataAsync(System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider)">
            <summary>
            Gets a pointer to data to set on the clipboard object that represents the selected nodes for each data format supported.
            </summary>
            <param name="types">The types of data to package. This will be a subset of the types returned by ClipboardDataFormats.</param>
            <param name="selectedNodes">The currently selected nodes.</param>
            <param name="currentProvider">The current tree provider.</param>
            <returns>
            An IntPtr pointing to AllocHGlobal'd memory representing the selected nodes for each supported data format. Implementations
            may leave out a supported format or specify zero for the IntPtr if no data should be set.
            </returns>
            <remarks>
            GetAllowedOperations will have been called prior to any copy or drag operation. Therefore, the implementation of
            this method can assume that <paramref name="selectedNodes"/> is valid for this packager assuming that
            the implementation of GetAllowedOperations always returns the same result for any set of selected nodes.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem">
            <summary>
            Describes an item participating in a copy/paste operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem.Cancelled">
            <summary>
            Gets or sets whether or not the user has cancelled this item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem.Exception">
            <summary>
            Gets or sets the exception that occured during handling of the item, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem.Children">
            <summary>
            Gets a list of children that should also be added to the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IPasteDataObjectProcessor">
            <summary>
            An interface that may be MEF exported by components that want to process an OLE data object.
            Implementations are responsible for converting the data object into ICopyPasteItem instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteDataObjectProcessor.CanHandleDataObject(System.Object,Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider)">
            <summary>
            Checks whether or not the processor can handle this data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="dropTarget">The tree item that will accept new project items.</param>
            <param name="currentProvider">The current tree provider of the drop target.</param>
            <returns>True if the processor can process the data object for pasting to the specified node, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteDataObjectProcessor.QueryDropEffect(System.Object,System.Int32,System.Boolean)">
            <summary>
            Returns the type of drop effect needed for this data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="grfKeyState">Key state.</param>
            <param name="draggedFromThisProject"><c>true</c> if the drag originated from this project; <c>false</c> otherwise.</param>
            <returns>The drop effect desired by the caller. Null indicates that the default behavior is desired by the caller.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteDataObjectProcessor.ProcessDataObjectAsync(System.Object,Microsoft.VisualStudio.ProjectSystem.IProjectTree,Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider,Microsoft.VisualStudio.ProjectSystem.DropEffects)">
            <summary>
            Processes the data object with the given effect (e.g. copy, move, link).
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="dropTarget">The tree item that will accept new project items.</param>
            <param name="currentProvider">The current tree provider of the drop target.</param>
            <param name="effect">The type of operation to perform.</param>
            <returns>A list of copy paste items if successful (and the source project should clean up), null otherwise.</returns>
            <remarks>All items returned should be of the same type. Redundant items will be filtered out by the paste handler afterwards.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteDataObjectProcessor.ProcessPostFilterAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem})">
            <summary>
            Does any necessary reprocessing of items after any redundant items have been filtered out by the paste handler.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IPasteHandler">
            <summary>
            An interface that may be MEF exported by components that want to handle
            ICopyPasteItem instances. Implementations are responsible for handling
            the items by, for example, copying the files and adding them to the
            project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteHandler.CanHandleItem(System.Type)">
            <summary>
            Checks whether or not the handler can handle this type of copy/paste item.
            </summary>
            <param name="itemType">The type of ICopyPasteItem that needs to be handled.</param>
            <returns>True if the handler can handle items of the specified type, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteHandler.FilterItemList(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.DropEffects)">
            <summary>
            Filters an item list by marking any redundant ones as cancelled.
            </summary>
            <param name="items">The full list of items being pasted.</param>
            <param name="effect">The type of operation to perform.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteHandler.ValidateItemListAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.DropEffects)">
            <summary>
            Checks an item list for any errors.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
            <param name="effect">The type of operation to perform.</param>
            <returns>A list of localized errors, if any.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteHandler.PromptForAnyOverwrites(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.DropEffects@)">
            <summary>
            Prompts the user to accept or cancel any items that will cause overwrites.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
            <param name="effect">The type of operation to perform.</param>
            <returns>True to continue the paste operation, false to abort.</returns>
            <remarks>
            Must be called on the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IPasteHandler.PasteItemsAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.DropEffects)">
            <summary>
            Performs the actual pasting of the items. Run after all filtering and validation.
            </summary>
            <param name="items">All uncancelled items that were pasted.</param>
            <param name="effect">The intended paste/drop effect.</param>
            <returns>The result of the paste operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult">
            <summary>
            Describes the result of a call to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IPasteHandler.PasteItemsAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.ICopyPasteItem},Microsoft.VisualStudio.ProjectSystem.DropEffects)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult.#ctor(System.Boolean,Microsoft.VisualStudio.ProjectSystem.DropEffects)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult.#ctor(System.Boolean,Microsoft.VisualStudio.ProjectSystem.DropEffects,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult.Success">
            <summary>
            Gets a value indicating whether the paste was completed successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult.ActualEffect">
            <summary>
            The actual effect that was applied by the paste operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.PasteItemsResult.TotalDropItems">
            <summary>
            Total number of items dropped.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription">
            <summary>
            A description of a set of changes made to the project within the project subset described by a Rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription.Before">
            <summary>
            A snapshot of the project subset described by a Rule from before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription.Difference">
            <summary>
            A description of the differences betwen <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription.Before"/> and <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription.After"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription.After">
            <summary>
            A snapshot of the project subset described by a Rule from after the change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff">
            <summary>
            An immutable description of the difference between two <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff.AddedItems">
            <summary>
            Gets the collection of the names of items that were introduced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff.RemovedItems">
            <summary>
            Gets the collection of the names of items that were removed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff.ChangedItems">
            <summary>
            Gets the collection of the names of items whose metadata were changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff.RenamedItems">
            <summary>
            Gets the collection of the before and after names of renamed items.
            </summary>
            <value>A dictionary where the keys are the old item names and the values are the new item names.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff.ChangedProperties">
            <summary>
            Gets the collection of names of properties whose values were changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff.AnyChanges">
            <summary>
            Gets a value indicating whether any differences were observed between the two <see cref="T:Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeFileHint">
            <summary>
            Describes a project change having to do with a file operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeFileHint.Files">
            <summary>
            Gets the full paths of the affected files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint">
            <summary>
            An immutable description of a project change that provides additional semantic meaning
            that may be useful to someone trying to understand the nature of a project change.
            </summary>
            <remarks>
            Implementations of this interface must be thread-safe and should be immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint.Kind">
            <summary>
            Gets a unique identifier for the kind of hint this represents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint.ChangeAlreadyOccurred">
            <summary>
            Gets a value indicating whether the change being hinted has already occurred.
            </summary>
            <remarks>
            A <c>true</c> value here suggests that the hint-author is helping to "catch up" to changes made
            by a third party. Therefore if this is <c>true</c>, IVsTrackProjectDocument events should not be raised
            when processing hints whose value for this property is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint.UnconfiguredProject">
            <summary>
            Gets the project that was changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintReceiver">
            <summary>
            An interface exported by UnconfiguredProject-level parts to receive project change hint notifications.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintReceiver.HintingAsync(Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint)">
            <summary>
            Invoked under a project write lock before a change is actually applied.
            </summary>
            <param name="hint">The hint that is being submitted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintReceiver.HintedAsync(System.Collections.Immutable.IImmutableDictionary{System.Guid,System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint}})">
            <summary>
            Invoked as or after a write lock is released, describing all the hints submitted
            over the course of that write lock.
            </summary>
            <param name="hints">A map of hints, keyed by their type.</param>
            <returns>The task that respresents the asynchronous work done by this method.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintSubmissionService">
            <summary>
            A service that captures semantic descriptions of project changes.
            </summary>
            <devremarks>
            Dev15 TODO: Merge this interface into the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintService"/>.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintSubmissionService.HintAsync(Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint)">
            <summary>
            Supplies a semantic meaning behind some project change that is about to be made.
            </summary>
            <param name="changeHint">The semantic description of the project change.</param>
            <remarks>
            This method must be called while holding the project write lock responsible
            for making the change.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintSubmissionService.ProcessHintsAsync">
            <summary>
            Returns a task that completes after all pending hints have been processed,
            and allows access to the main thread as necessary if the caller has it.
            </summary>
            <returns>A task that completes when all currently pending hints have been processed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectChangeHintSubmissionService.CancelHints(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectChangeHint})">
            <summary>
            Suppresses hints from being forwarded to hint subscribers
            after the project write lock is released.
            </summary>
            <param name="hints">The hints to cancel; or <c>null</c> to cancel them all.</param>
            <remarks>
            This method must be called while holding the project write lock responsible
            for making the change.
            This covers the scenario of changes that had been planned and thus hinted,
            that were later rolled back, thus making the original hints inappropriate.
            Note that the synchronous stage of hint forwarding has already occurred and
            thus cannot be canceled.  Thus this method only cancels the asynchronous
            after-write-lock stage of hinting.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IRefreshableHintableProjectTreeProvider">
            <summary>
            A project tree provider that supports user-invoked refresh and hints for
            when refresh is disabled. The hints are useful for keeping the tree
            up-to-date when auto refresh is disabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IRefreshableHintableProjectTreeProvider.MostRecentHintVersion">
            <summary>
            Gets the data source version number that represents the work of the most recently hinted project directory change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableHintableProjectTreeProvider.HintFileChanged(System.String)">
            <summary>
            Hints to the tree provider that a file change has occured.
            </summary>
            <param name="path">The path to the changed file. This can either be a full path or a path relative to the project.</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableHintableProjectTreeProvider.HintFileCreated(System.String)">
            <summary>
            Hints to the tree provider that a file was created.
            </summary>
            <param name="path">The path to the created file. This can either be a full path or a path relative to the project.</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableHintableProjectTreeProvider.HintFileDeleted(System.String)">
            <summary>
            Hints to the tree provider that a file was deleted.
            </summary>
            <param name="path">The path to the deleted file. This can either be a full path or a path relative to the project.</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableHintableProjectTreeProvider.HintFileRenamed(System.String,System.String)">
            <summary>
            Hints to the tree provider that a file rename has occured.
            </summary>
            <param name="oldPath">The path to the renamed file before the rename. This can either be a full path or a path relative to the project.</param>
            <param name="newFileName">The file's new name (leaf only).</param>
            <returns>A struct that includes the version number that this tree provider will publish when this hint has been accounted for in the tree.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult">
            <summary>
            Describes the result of hinting to a tree provider that a file system event has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult.DataSourceVersionIncludingChange">
            <summary>
            Gets the minimum version number that the tree provider will publish when this hint has been accounted for in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult.op_Equality(Microsoft.VisualStudio.ProjectSystem.HintedTreeResult,Microsoft.VisualStudio.ProjectSystem.HintedTreeResult)">
            <summary>
            Returns true if result1 == result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult.op_Inequality(Microsoft.VisualStudio.ProjectSystem.HintedTreeResult,Microsoft.VisualStudio.ProjectSystem.HintedTreeResult)">
            <summary>
            Returns true if result1 != result2.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult.Equals(System.Object)">
            <summary>
            Returns true if obj equals this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.HintedTreeResult.GetHashCode">
            <summary>
            Returns the hashcode for the reference.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IRefreshableProjectTreeProvider">
            <summary>
            A project tree provider that supports user-invoked refresh.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableProjectTreeProvider.GetAutoRefreshAsync">
            <summary>
            Gets a value indicating whether the tree provider automatically updates itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableProjectTreeProvider.SetAutoRefreshAsync(System.Boolean)">
            <summary>
            Sets a value indicating whether the tree provider automatically updates itself.
            </summary>
            <param name="value">
            <c>true</c> if this tree provider will automatically publish updates
            when the underlying data changes;
            <c>false</c> if it should not or cannot due to the underlying data store not supporting push notifications.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableProjectTreeProvider.CanAutoRefreshAsync">
            <summary>
            Gets a value indicating whether this project tree supports auto refresh.
            </summary>
            <remarks>
            Project tree providers that support auto refresh generally may still depend on their
            underlying data stores (i.e. file system) supporting push notification for changes.
            If a project is on a non-supporting data store, this value may be <c>false</c> to indicate
            that auto refresh cannot be set to <c>true</c>, and that <see cref="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableProjectTreeProvider.RefreshAsync(System.Threading.CancellationToken)"/> must
            be imperatively called periodically.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IRefreshableProjectTreeProvider.RefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Begins an asynchronous refresh of the tree.
            </summary>
            <returns>A task whose result is the new tree.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectChangeNotificationEventArgs">
            <summary>
            The event argument included when raising project change notification events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectChangeNotificationEventArgs.ProjectChanges">
            <summary>
            Gets a dictionary of rules and project change descriptions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider">
            <summary>
            An UnconfiguredProject-level service that provides access to the ConfiguredProject that the host considers to be the active one.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider.Changed">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider.ActiveConfiguredProject"/> changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider.ActiveConfiguredProject">
            <summary>
            Gets the configured project that belongs to the host's active solution configuration,
            if it has already been loaded.
            </summary>
            <value>The active configured project.  May be null if the host has not yet selected an active configuration.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider.ActiveConfiguredProjectBlock">
            <summary>
            Gets a block that broadcasts the currently active configured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider.ActiveProjectConfiguration">
            <summary>
            Gets the project configuration that is active given the active solution configuration.
            </summary>
            <returns>An existing ProjectConfiguration defined in the project, or <c>null</c> if no active project configuration is available.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IActiveConfiguredProjectProvider.ConfigurationActiveCancellationToken">
            <summary>
            Gets a token that is cancelled when the active project configuration changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ActiveConfigurationChangedEventArgs">
            <summary>
            Event arguments sepcifying a before and after activation change for a ConfiguredProject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ActiveConfigurationChangedEventArgs.PreviouslyActive">
            <summary>
            Gets the previously active ConfiguredProject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ActiveConfigurationChangedEventArgs.NowActive">
            <summary>
            Gets the ConfiguredProject that is now active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ActiveConfigurationChangedEventArgs.ActiveConfiguredProjectProviderDataSourceVersion">
            <summary>
            The version of the active configured project provider data source that triggered the configuration change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider">
            <summary>
            Services for working with the default project of a project system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider.DefaultProjectConfiguration">
            <summary>
            Gets the default project configuration to use as a default when no other ProjectConfiguration
            is defined in the project.
            </summary>
            <value>Never null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider.DefaultProjectTemplate">
            <summary>
            Project template content to use for defaults or "projectless state"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider.GetDefaultUnconfiguredProjectAsync">
            <summary>
            Gets the default unconfigured project.
            </summary>
            <value>The default unconfigured project.  Or null if it could not be created.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider.GetDefaultConfiguredProjectAsync">
            <summary>
            Gets the default configured project.
            </summary>
            <value>The default configured project.  Or null if it could not be created.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider.GetTargetsPathAsync">
            <summary>
            Gets the default targets path for the project system.
            </summary>
            <value>An absolute file system path.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IDefaultProjectProvider.GetToolsVersionAsync">
            <summary>
            Gets the tools version for this version of MSBuild tools.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IFileSaveListener">
            <summary>
            An interface that may be MEF exported by components that want to execute code whenever a project is saved.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFileSaveListener.OnFileWriteAsync(System.String)">
            <summary>
            Invoked whenever the UnconfiguredProject is about to be saved.
            </summary>
            <param name="fullPath">The path to the project.</param>
            <returns>An object that will be disposed after saving the project.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider">
            <summary>
            A project tree provider that adds Show All Files functionality.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.ShowAllFiles">
            <summary>
            Gets or sets a value indicating whether files in the project folder but not in the project are visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.CanIncludeItems(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Checks whether a given set of (excluded) nodes can be included into the project.
            </summary>
            <param name="nodes">The set of nodes that might be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.IncludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})"/></param>
            <returns><c>true</c> if these nodes can be included as project items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.IncludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Includes a given set of nodes as project items.
            </summary>
            <param name="nodes">The set of nodes to "upgrade" to project items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.CanExcludeItems(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Checks whether a given set of nodes can be excluded from the project.
            </summary>
            <param name="nodes">The set of nodes that might be passed to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.ExcludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})"/></param>
            <returns><c>true</c> if these nodes can be removed from the project file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IShowAllFilesProjectTreeProvider.ExcludeItemsAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Removes the given set of nodes from the project.
            </summary>
            <param name="nodes">The nodes to downgrade from included to excluded items.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.INewProjectInitializationProvider">
            <summary>
            An extensibility point components may export to execute when a new project is being created.
            This interface is obsoluted. Please use <see cref="T:Microsoft.VisualStudio.ProjectSystem.INewProjectAsyncInitializationProvider"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.INewProjectInitializationProvider.InitializeNewProject">
            <summary>
            Invoked when a new project is being created.
            </summary>
            <remarks>
            Obsolute.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree">
            <summary>
            A node that represents a project item in the tree view of a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.IsLinked">
            <summary>
            Gets a value indicating whether this node is grafted into the tree from an otherwise unnatural location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.Item">
            <summary>
            Gets the description of where the item this tree node describes is.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.PropertySheet">
            <summary>
            Gets the property sheet that contains this item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetProperties(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Nullable{System.Boolean},System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags},Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            update properties of this item to given value.
            null means using existing value as it is
            resetXXX parameter will reset its corresponding property value to its default(T).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetCaption(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Caption"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Icon"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetExpandedIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.ExpandedIcon"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetVisible(System.Boolean)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Visible"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.BrowseObjectProperties"/> property is set to a new value.
            </summary>
            <param name="browseObjectProperties">The new value to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetFlags(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Flags"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetIsLinked(System.Boolean)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.IsLinked"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetItem(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Returns a new tree where this node represents some project item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.SetPropertySheet(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.PropertySheet"/> property is set to a new value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree.ClearItem">
            <summary>
            Returns a new tree where this node no longer represents a project item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSnapshotService">
            <summary>
            Provides access to an immutable snapshot representing the current state of the project
            without holding a project lock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree">
            <summary>
            A node in the tree view of a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Parent">
            <summary>
            Gets the immediate parent of this node.
            </summary>
            <value>The parent; or <c>null</c> if this node is the root of the tree.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Root">
            <summary>
            Gets the root of the tree this node belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Children">
            <summary>
            Gets this node's children.
            </summary>
            <value>An immutable list of nodes.  Never null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Caption">
            <summary>
            Gets the display name for this node.
            </summary>
            <value>A non-empty string.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.FilePath">
            <summary>
            Gets the file path for this node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Icon">
            <summary>
            Gets the icon to display when this node is not expanded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.ExpandedIcon">
            <summary>
            Gets the icon to display when this node is expanded.
            </summary>
            <value>A value of <c>null</c> is appropriate when the node can never be expanded, or the icon should be the same as <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Icon"/>.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Visible">
            <summary>
            Gets a value indicating whether this node or subtree should be visible to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.IsFolder">
            <summary>
            Gets whether this node is a folder. This is a faster way to check the Folder capability.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Flags">
            <summary>
            Gets the set of flags this node possesses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.BrowseObjectProperties">
            <summary>
            Gets the properties to display in the properties tool window when this tree is selected.
            </summary>
            <value>
            May be null if no properties are available for this object.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Identity">
            <summary>
            Gets the identity of this node.
            </summary>
            <value>A non-recycled value that persists across mutations of this node as long as its identity is intact.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Size">
            <summary>
            The total number of nodes in the whole subtree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Add(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Adds the described node that represents an MSBuild project item to a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to add under this node.</param>
            <returns>
            The added node, as a member of a new immutable tree.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Add(Microsoft.VisualStudio.ProjectSystem.IProjectItemTree)">
            <summary>
            Adds the described node that represents an MSBuild project item to a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to add under this node.</param>
            <returns>
            The added node, as a member of a new immutable tree.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Remove(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Removes the specified node from a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to remove.</param>
            <returns>
            A new instance of this node with the modification made.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Remove">
            <summary>
            Removes this node from a new instance of its containing tree.
            </summary>
            <returns>The removed node's parent in the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Replace(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Replaces this node in a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to replace this tree with.</param>
            <returns>
            A new instance of this node with the modification made.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Replace(Microsoft.VisualStudio.ProjectSystem.IProjectItemTree)">
            <summary>
            Replaces this node in a new instance of this tree.
            </summary>
            <param name="subtree">The subtree to replace this tree with.</param>
            <returns>
            A new instance of this node with the modification made.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetProperties(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Nullable{System.Boolean},System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags},Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            update properties of this item to given value.
            null means using existing value as it is
            resetXXX parameter will reset its corresponding property value to its default(T).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetCaption(System.String)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Caption"/> property is set to a new value.
            </summary>
            <param name="caption">The new caption to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Icon"/> property is set to a new value.
            </summary>
            <param name="icon">The new icon to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetExpandedIcon(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.ExpandedIcon"/> property is set to a new value.
            </summary>
            <param name="expandedIcon">The new icon to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetVisible(System.Boolean)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Visible"/> property is set to a new value.
            </summary>
            <param name="visible">The new value to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetBrowseObjectProperties(Microsoft.VisualStudio.ProjectSystem.Properties.IRule)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.BrowseObjectProperties"/> property is set to a new value.
            </summary>
            <param name="browseObjectProperties">The new value to set on the node.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetFlags(Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags)">
            <summary>
            Returns a new tree where this node's <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Flags"/> property is set to a new value.
            </summary>
            <param name="flags">The flags to set on the new node, completely replacing the existing set of flags.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.SetItem(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,System.Boolean)">
            <summary>
            Returns a new tree where this node represents some project item.
            </summary>
            <param name="context">The description of the project item that this node represents.</param>
            <param name="propertySheet">The property sheet from which this item was obtained.</param>
            <param name="isLinked">A value indicating whether this item represents a linked item in the project.</param>
            <returns>A new instance of this node, with the change applied, as part of the new tree.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Contains(System.IntPtr)">
            <summary>
            Determines whether a node with a given <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Identity"/> exists among this node's descendents.
            </summary>
            <param name="nodeId">The ID of the node of interest.</param>
            <returns>
            <c>true</c> if the identified node is among this node's descendents; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Find(System.IntPtr)">
            <summary>
            Finds the node with the given value for <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Identity"/> among this node and its descendents.
            </summary>
            <param name="nodeId">The ID of the node to find.</param>
            <returns>The node with the given node ID.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no node by this ID exists in the tree.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.TryFind(System.IntPtr,Microsoft.VisualStudio.ProjectSystem.IProjectTree@)">
            <summary>
            Finds the node with the given value for <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Identity"/> among this node and its descendents.
            </summary>
            <param name="nodeId">The ID of the node to find.</param>
            <param name="subtree">Receives the node with the given node ID, or <c>null</c> if no match was found.</param>
            <returns><c>true</c> if the node was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.TryFindImmediateChild(System.String,Microsoft.VisualStudio.ProjectSystem.IProjectTree@)">
            <summary>
            Finds the node with the given value for <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Caption"/> among this node's immediate children.
            </summary>
            <param name="caption">The caption of the child to find.</param>
            <param name="subtree">Receives the node with the given caption, or <c>null</c> if no match was found.</param>
            <returns><c>true</c> if the node was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTree.ChangesSince(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets the net effectual changes that were made from a prior version of this tree to this version.
            </summary>
            <param name="priorVersion">The earlier version of this tree to consider changes since then.</param>
            <returns>
            The chronological sequence of changes made that transformed the earlier version of this tree to its present form.
            </returns>
            <remarks>
            The roots of this tree and the given <paramref name="priorVersion"/> instance are the basis of comparison rather than
            any sub-branches that the specific instances provided may refer to.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind">
            <summary>
            The kind of change that took place.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind.Added">
            <summary>
            A node was added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind.Replaced">
            <summary>
            A node's own properties were changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind.Removed">
            <summary>
            A node was removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty">
            <summary>
            The properties on a node that were changed when <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff.Change"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind.Replaced"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.None">
            <summary>
            No change was made to the node.  It was either entirely added or removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.PositionUnderParent">
            <summary>
            The node's position within its parent's list of children changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.Caption">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Caption"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.Icon">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Icon"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.ExpandedIcon">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.ExpandedIcon"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.Visible">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Visible"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.Flags">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTree.Flags"/> property was changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangedProperty.All">
            <summary>
            All flags in this enum.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff">
            <summary>
            A description of a change made to an instance of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff.Change">
            <summary>
            Gets the kind of change made to the alterered node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff.NodeIdentity">
            <summary>
            Gets the leaf node impacted by this change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff.NodeChange">
            <summary>
            Gets the kinds of changes made to node if <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeDiff.Change"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectTreeChangeKind.Replaced"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeFactory">
            <summary>
            Creates new <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeFactory.NewTree(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTree"/>.
            </summary>
            <param name="caption">The display name for the root node in the tree.</param>
            <param name="filePath">The full file path for the node.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="flags">The flags.</param>
            <param name="children">Child tree, which must be created by this factory.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeFactory.NewTree(System.String,Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext,Microsoft.VisualStudio.ProjectSystem.Properties.IPropertySheet,Microsoft.VisualStudio.ProjectSystem.Properties.IRule,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,System.Boolean,System.Nullable{Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags},System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectTree})">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemTree"/> that represents an MSBuild project item.
            </summary>
            <param name="caption">The display name of the node.</param>
            <param name="item">The item.</param>
            <param name="propertySheet">The property sheet.</param>
            <param name="browseObjectProperties">The properties to display when the tree is selected.</param>
            <param name="icon">The icon.</param>
            <param name="expandedIcon">The expanded icon.</param>
            <param name="visible">A value indicating whether this node or subtree should be visible to the user.</param>
            <param name="flags">The flags.</param>
            <param name="isLinked">if set to <c>true</c> [is linked].</param>
            <param name="children">Child tree, which must be created by this factory.</param>
            <returns>The new tree instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider">
            <summary>
            Transforms project data into a hierarchical tree structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.Tree">
            <summary>
            Gets the source block for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectTreeSnapshot"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.FindByPath(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String)">
            <summary>
            Efficiently finds a descendent with the given path in the given tree.
            </summary>
            <param name="root">The root of the tree.</param>
            <param name="path">The absolute or project-relative path to the item sought.</param>
            <returns>The item in the tree if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.GetPath(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets the path to a given node that can later be provided to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.FindByPath(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String)"/> to locate the node again.
            </summary>
            <param name="node">The node whose path is sought.</param>
            <returns>A non-empty string, or <c>null</c> if searching is not supported.  For nodes that represent files on disk, this is the project-relative path to that file.  The root node of a project is the absolute path to the project file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets a value indicating whether the given node is allowed to be renamed.
            </summary>
            <param name="node">The node that might be renamed.</param>
            <returns><c>true</c> if the node can be renamed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.RenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.String)">
            <summary>
            Alters the project file and/or other files as necessary to effectively change a given node's caption.
            </summary>
            <param name="node">The node to rename.</param>
            <param name="value">The desired new name.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.CanRenameAsync(Microsoft.VisualStudio.ProjectSystem.IProjectTree)"/> would return <c>false</c> for this operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.CanCopy(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.IProjectTree,System.Boolean)">
            <summary>
            Gets a value indicating whether a given set of nodes can be copied or moved underneath some given node.
            </summary>
            <param name="nodes">The set of nodes the user wants to copy or move.</param>
            <param name="receiver">
            The target node where <paramref name="nodes"/> should be copied or moved to.
            May be <c>null</c> to determine whether a given set of nodes could allowably be copied anywhere (not necessarily everywhere).
            </param>
            <param name="deleteOriginal"><c>true</c> for a move operation; <c>false</c> for a copy operation.</param>
            <returns><c>true</c> if such a move/copy operation would be allowable; <c>false</c> otherwise.</returns>
            <remarks>
            Even if CanCopy returns true, a copy packager needs to exist before the Copy will succeed in CPS-VS. If CanCopy
            returns false, then the copy packagers will not even be queried.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.CanRemove(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Gets a value indicating whether deleting a given set of items from the project, and optionally from disk, would be allowed.
            </summary>
            <param name="nodes">The nodes that should be deleted.</param>
            <param name="deleteOptions">A value indicating whether the items should be deleted from disk as well as from the project file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.RemoveAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Deletes items from the project, and optionally from disk.
            </summary>
            <param name="nodes">The nodes that should be deleted.</param>
            <param name="deleteOptions">A value indicating whether the items should be deleted from disk as well as from the project file.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.CanRemove(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)"/> would return <c>false</c> for this operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectTreeProvider.GetAddNewItemDirectory(Microsoft.VisualStudio.ProjectSystem.IProjectTree)">
            <summary>
            Gets the directory that new files should be saved and added to the project under
            when the user initiates an Add New Item operation on a particular node in the tree.
            </summary>
            <param name="target">The node in the tree that is the receiver of the Add New Item operation.</param>
            <returns>
            The project-relative path under which to save the new items (empty string when the project directory itself is to be used);
            or <c>null</c> if the target node is not allowed to receive new items.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ISpecialFileProvider">
            <summary>
            An interface that extensions can export to indicate they know
            how to find special files.
            </summary>
            <remarks>This component exists on the ConfiguredProject level.
            It's expected that implementations provide Minimum and Maximum
            SpecialFiles metadata. Use the ExportSpecialFileProviderAttribute
            attribute to do this.</remarks>
            <example>See CustomProjectSpecialFiles.cs within CustomProject for an example implementation.</example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISpecialFileProvider.GetFileAsync(Microsoft.VisualStudio.ProjectSystem.SpecialFiles,Microsoft.VisualStudio.ProjectSystem.SpecialFileFlags,System.Threading.CancellationToken)">
            <summary>
            Allows for querying the project for special files and optionally create them or check the out from source control.
            </summary>
            <param name="fileId">The special file type.</param>
            <param name="flags">Flags for the file.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>The file name of the special file. Providers should always return the full path to the file; or <c>null</c> if no qualified file exists.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity">
            <summary>
            An indication of the expected severity of a fault.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity.Recoverable">
            <summary>
            The fault is expected to be one after which the user may resume work.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity.LimitedFunctionality">
            <summary>
            The fault is expected to cause certain features to deactivate until the process is restarted or the project reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity.NotRecoverable">
            <summary>
            The fault is expected to reflect internal state has been corrupted, and that the user should save whatever possible and restart.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity.Crippling">
            <summary>
            <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity.LimitedFunctionality"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService">
            <summary>
            A service that can provide host-specific error handling for faulted tasks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService.RegisterFaultHandler(System.Threading.Tasks.Task,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Attaches error handling to a task so that if it throws an unhandled exception, the error will be reported to the user.
            </summary>
            <param name="task">The task to attach error handling to.</param>
            <param name="watsonReportSettings">If not <c>null</c>, a Watson report will be filed if this task faults.</param>
            <param name="severity">The severity of the failure if one occurs.</param>
            <param name="project">The project related to the failure, if applicable and if an error occurs.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService.RegisterFaultHandler``1(System.Threading.Tasks.Task{``0},Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Attaches error handling to a task so that if it throws an unhandled exception, the error will be reported to the user.
            </summary>
            <typeparam name="TResult">The type of value returned by the task.</typeparam>
            <param name="task">The task to attach error handling to.</param>
            <param name="watsonReportSettings">If not <c>null</c>, a Watson report will be filed if this task faults.</param>
            <param name="severity">The severity of the failure if one occurs.</param>
            <param name="project">The project related to the failure, if applicable and if an error occurs.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService.HandleFaultAsync(System.Exception,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Immediately handles the specified fault.
            </summary>
            <param name="ex">Exception containing the fault information.</param>
            <param name="watsonReportSettings">If not <c>null</c>, a Watson report will be filed.</param>
            <param name="severity">The severity of the failure.</param>
            <param name="project">The project related to the failure, if applicable.</param>
            <returns>A task that is complete when all fault handlers have responded.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService.ReportUserFaultAsync(System.Exception,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject)">
            <summary>
            Report an error caused by a bad project file or environment, which may cause the project system not to work correctly.
            It is not an internal error, but is caused by the user environment.  Watson report should not be fired.
            </summary>
            <param name="ex">Exception containing the fault information.</param>
            <param name="severity">The severity of the failure if one occurs.</param>
            <param name="project">The project related to the failure, if applicable and if an error occurs.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerServiceInternal">
            <summary>
            Expose more properties for internal tests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerServiceInternal.IsWatsonReportEnabled">
            <summary>
            Enable/disable the watson report.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerServiceInternal.MinimumWatsonReportSubmissionInterval">
            <summary>
            The minimum interval that must pass between individual error submissions for the same failed component.
            The default value is 1 hour.
            </summary>
            <remarks>
            Please ensure the WER server is redirected to the private server before changing this value.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IVetoProjectLoad">
            <summary>
            An interface that allows an extension to prevent a specific project
            from loading.
            </summary>
            <remarks>This component exists on the UnconfiguredProject level.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVetoProjectLoad.AllowProjectLoadAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks whether the project should be allowed to load.
            </summary>
            <param name="isNewProject">A value indicating whether the project is being newly created; <c>false</c> indicates we are loading an existing project.</param>
            <param name="cancellationToken">A token whose cancellation token that signals lost interest in the result of this call.</param>
            <returns>A task whose result is true if the project is allowed to load; false otherwise.</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException">May also be thrown to reject a project load with a specific error.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SpecialFileFlags">
            <summary>
            Defines all flags for getting special files.
            </summary>
            <remarks>Matches the __PSFFLAGS and __PSFFLAGS2 enums.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFileFlags.CreateIfNotExist">
            <summary>
            Create the file if it doesn't exist.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFileFlags.FullPath">
            <summary>
            Filename includes the full path. This flag is handled by CPS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFileFlags.CheckoutIfExists">
            <summary>
            If the file exists, check it out of SCC. This flag is handled by CPS.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.SpecialFiles">
             <summary>
             Defines all the types of special files.
             </summary>
             <remarks>We'll eventually want to remove this enum and use the VS one.
             We can't right now because our single "contracts" assembly isn't allowed
             to reference VS assemblies.  But when we split it up into two, we'll be
             allowed to make ISpecialFileProvider a VS-specific interface.
            
             This enum matches the __PSFFILEID enums in Visual Studio.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AppConfig">
            <summary>
            AppConfig files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.Licenses">
            <summary>
            Licenses.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.WebSettings">
            <summary>
            WebSettings file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AppManifest">
            <summary>
            AppManifest file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AppDesigner">
            <summary>
            AppDesigner file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AppSettings">
            <summary>
            App Settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AssemblyResource">
            <summary>
            Assembly Resource file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AssemblyInfo">
            <summary>
            Assembly info.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AppXaml">
            <summary>
            AppXaml files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.WcfServiceReferencesConfig">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.SpecialFiles.AppxManifest">
            <summary>
            Appx manifest file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent">
            <summary>
            The kind of consent already obtained from the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.NotAsked">
            <summary>
            Allows the error reporting infrastructure to decide whether to ask the user based on their previously established consent level.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.Approved">
            <summary>
            The user has already approved the submission of this error report through another means.
            </summary>
            <remarks>
            This value should not be used without first obtaining approval from mailto:ddwattac.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.Denied">
            <summary>
            Indicates the user has denied permission to submit the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.AlwaysPrompt">
            <summary>
            Causes UI to appear to ask the user before submitting the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent.Max">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType">
            <summary>
            The level of detail and size of the dump to submit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.MicroDump">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.MiniDump">
            <summary>
            By default, a dump that includes callstacks for all threads is submitted.
            If http://watson has been configured to ask for more information, this can be
            automatically upgraded to a heap dump.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.HeapDump">
            <summary>
            Produces a much larger CAB that includes the heap.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.Max">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportType">
            <summary>
            The severity of the error being reported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Noncritical">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Critical">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.ApplicationCrash">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.ApplicationHang">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Kernel">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Invalid">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorFileType">
            <summary>
            The type of files that can be added to the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Microdump">
            <summary>
            A limited minidump that contains only a stack trace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Minidump">
            <summary>
            A minidump file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Heapdump">
            <summary>
            An extended minidump that contains additional data such as the process memory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.UserDocument">
            <summary>
            The document in use by the application at the time of the event. The document is added only if the server asks for this type of document.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileType.Other">
            <summary>
            Any other type of file. This file will always get added to the cab (but only if the server asks for a cab).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags">
            <summary>
            Flags that can be specified when adding a file to the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags.DeleteWhenDone">
            <summary>
            Delete the file once WER is done
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags.AnonymousData">
            <summary>
            This file does not contain any PII
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags">
            <summary>
            Flags that can be specified when submitting a report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.HonorRecovery">
            <summary>
            Honor any recovery registration for the application.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.HonorRestart">
            <summary>
            Honor any restart registration for the application.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.Queue">
            <summary>
            Add the report to the WER queue without notifying the user.
            The report is queued only—reporting (sending the report to Microsoft) occurs later based on the user's consent level.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ShowDebug">
            <summary>
            Show the debug button.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.AddRegisteredData">
            <summary>
            Add the data registered by WerSetFlags, WerRegisterFile, and WerRegisterMemoryBlock to the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.OutOfProcess">
            <summary>
            Spawn another process to submit the report. The calling thread is blocked until the function returns.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.NoCloseUI">
            <summary>
            Do not display the close dialog box for the critical report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.NoQueue">
            <summary>
            Do not queue the report. If there is adequate user consent the report is sent to Microsoft immediately;
            otherwise, the report is discarded. You may use this flag for non-critical reports.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.NoArchive">
            <summary>
            Do not archive the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.StartMinimized">
            <summary>
            The initial UI is minimized and flashing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.OutOfProcessAsync">
            <summary>
            Spawn another process to submit the report and return from this function call immediately.
            Note that the contents of the pSubmitResult parameter are undefined and there is no way to query when the reporting completes or the completion status.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ByPassDataThrottling">
            <summary>
            Bypass data throttling for the report.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ArchiveParameters_Only">
            <summary>
            Archive only the parameters; the cab is discarded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags.ReportMachineID">
            <summary>
            Always send the unique, 128-bit computer identifier with the report, regardless of the consent with which the report was submitted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType">
            <summary>
            Enumeration for the Error Report UI element (for Critical Reports only).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.AdditionalDataDialogHeader">
            <summary>
            The instructions for the additional data dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.IconFilePath">
            <summary>
            The icon to be displayed in the consent dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.ConsentDialogHeader">
            <summary>
            The main instructions for the consent dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.ConsentDialogBody">
            <summary>
            The contents of the consent dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.OnlineSolutionCheckText">
            <summary>
            The text for the link to check for a solution when online.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.OfflineSolutionCheckText">
            <summary>
            The text for the link to check for a solution when offline.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseText">
            <summary>
            The text for the link to just terminate the application.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseDialogHeader">
            <summary>
            The main instructions for the close dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseDialogBody">
            <summary>
            The contents of the close dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CloseDialogButtonText">
            <summary>
            The text for the button in the close dialog box.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType.CustomActionButtonText">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings">
            <summary>
            An immutable description of the type of error report to submit.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.#ctor(Microsoft.VisualStudio.ProjectSystem.ErrorDumpType,Microsoft.VisualStudio.ProjectSystem.ErrorReportType,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile},Microsoft.VisualStudio.ProjectSystem.ErrorReportSubmitFlags,System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.ErrorReportUIType,System.String}},Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.DumpType">
            <summary>
            Gets the type of information to include in the error report.
            </summary>
            <value>The default value is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorDumpType.MiniDump"/>.</value>
            <remarks>
            This value should typically be left at its default unless you first check with
            mailto:ddwattac
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ReportType">
            <summary>
            Gets the type of report being
            </summary>
            <value>The default value is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Noncritical"/>.</value>
            <remarks>
            This value should typically be either <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Noncritical"/> or <see cref="F:Microsoft.VisualStudio.ProjectSystem.ErrorReportType.Critical"/>
            unless you first check with mailto:ddwattac
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.Component">
            <summary>
            Gets the logical component where the failure occurred.
            </summary>
            <value>
            A non-localized constant value.
            If <c>null</c> the default component name is used in the report.
            </value>
            <remarks>
            This value should not contain any parameterized values so that a single Watson bucket collects all instances of this failure.
            Its value will be used to assist in matching a failure to the team that owns the feature.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.EventName">
            <summary>
            Gets the value that will appear as "Event Name" in the Windows Application Log and in the Watson error report.
            </summary>
            <value>
            A non-localized constant value.
            If <c>null</c> the default component name is used in the report.
            </value>
            <remarks>
            This value should not contain any parameterized values so that a single Watson bucket collects all instances of this failure.
            Generally it should be left at <c>null</c> so that the product's reserved event name can be used.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.Files">
            <summary>
            Gets the files being added to report.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.SubmitFlags">
            <summary>
            Gets the submit flags.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.SubmitUIOptions">
            <summary>
            Gets the customized UI options for the submit consent dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.PreferredBucketParameters">
            <summary>
            Gets the preferred bucket parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.AddErrorFile(Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings" /> instance which has the input error file being added.
            </summary>
            <param name="errorFile">The error file that needs be added into the cab.</param>
            <returns>The new <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings" /> instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile">
            <summary>
            Encapsulate the info required to add a file to report.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.#ctor(System.String,Microsoft.VisualStudio.ProjectSystem.ErrorFileType,Microsoft.VisualStudio.ProjectSystem.ErrorFileFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.Path">
            <summary>
            Gets the file path being added to report
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.Type">
            <summary>
            Gets the type of the file being added to report.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.ErrorFile.Flags">
            <summary>
            Gets the flags of the file being added to report.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters">
            <summary>
            Bucket parameters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ModuleName">
            <summary>
            Gets or sets the module name (without the file extension).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ModuleVersion">
            <summary>
            Gets or sets the module version (i.e. 14.0.12345.1).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ModuleTimestamp">
            <summary>
            Gets or sets the module timestamp.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.MethodDef">
            <summary>
            Gets or sets the token to identify the method in module.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.Offset">
            <summary>
            Gets or sets the offset of instruction in the method that threw the exception.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings.BucketParameters.ExceptionType">
            <summary>
            Gets or sets the exception type that caused the error.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IAsyncCommandGroupHandler">
            <summary>
            An interface that extensions can export to indicate that they support
            handling a specific group of commands. CPS extensions can export as
            many command group handlers as needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IAsyncCommandGroupHandler.GetCommandStatusAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},System.Int64,System.Boolean,System.String,Microsoft.VisualStudio.ProjectSystem.CommandStatus)">
            <summary>
            Check if a specific command is supported and enabled.
            </summary>
            <param name="nodes">The project nodes being queried.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandText">The default caption of the command that is displayed to the user.  <c>null</c> to allow the default caption to be used.</param>
            <param name="progressiveStatus">The query result thus far (as default, or as handed off from previous handler).</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IAsyncCommandGroupHandler.TryHandleCommandAsync(System.Collections.Immutable.IImmutableSet{Microsoft.VisualStudio.ProjectSystem.IProjectTree},System.Int64,System.Boolean,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Indicates that the user wants to execute a specific command.
            </summary>
            <param name="nodes">The project nodes to execute on.</param>
            <param name="commandId">The command ID.</param>
            <param name="focused">A value indicating whether <paramref name="nodes"/> or the project have the user focus.  A value of <c>false</c> indicates this command is being routed through the application in search of command handlers to process a command that the focused UI did not handle.</param>
            <param name="commandExecuteOptions">Values describe how the object should execute the command.</param>
            <param name="variantArgIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="variantArgOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>true if the extension has handled execution for this command and should prevent other handlers from processing the command. false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ICriticalPackageService">
            <summary>
            An interface exported on CPS-VS MEF parts that must be initialized with the package.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ICriticalPackageService.Initialize">
            <summary>
            Invoked on the UI thread during CPS package creation to allow this MEF part to initialize.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCache`1">
            <summary>
            Maintains some cached value, automatically refreshing it when called upon if the project has changed at all.
            </summary>
            <typeparam name="T">The type of value being cached.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCache`1.GetValueAsync">
            <summary>
            Gets the current cache value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCache`1.Invalidate">
            <summary>
            Invalidates any previously cached value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheFactory">
            <summary>
            Constructs objects that manage cache invalidation policies for some value whose calculation requires something from
            the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/> scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheFactory.Create``1(System.Func{System.Threading.Tasks.Task{``0}},Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions)">
            <summary>
            Constructs an object that calculates some value and manages its caching invalidation policy.
            </summary>
            <typeparam name="T">The type of value to be cached.</typeparam>
            <param name="cacheUpdateDelegate">The function that calculates the value.</param>
            <param name="options">Flags that alter normal caching behavior.</param>
            <returns>The cache value handling instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheFactory.Create``2(System.Func{``0,System.Threading.Tasks.Task{``1}},Microsoft.VisualStudio.ProjectSystem.ConfiguredProjectCacheOptions)">
            <summary>
            Constructs an object that calculates some value and manages its caching invalidation policy.
            </summary>
            <typeparam name="TKey">The type of key into the caching table.</typeparam>
            <typeparam name="TValue">The type of cached value</typeparam>
            <param name="valueProvider">The delegate that generates a value for a given key.</param>
            <param name="options">Flags that alter normal caching behavior.</param>
            <returns>The cache value handling instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheTable`2">
            <summary>
            Provides a cache for objects that are intensive to generate and should only exist until the project is changed.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IConfiguredProjectCacheTable`2.GetValueAsync(`0)">
            <summary>
            Gets the value for a given key, first checking the cache and passing through to the value generator if necessary.
            </summary>
            <param name="key">The key.</param>
            <returns>Some object created by the value generator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IEnvironmentConfigProvider">
             <summary>
             Provides environment-driven configuration information.
             </summary>
             <remarks>
             In many cases, the project configuration that should be used is
             not defined within the project, but instead is taken from the
             environment (env. vars for example) in which the project is running.
             This contract allows plugins to override the project information.
            
             This contract can exist at the ProjectService or UnconfiguredProject
             level, depending on whether the environment has different settings
             for different project types. It is recommended, as always, to live
             at the highest layer possible.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IEnvironmentConfigProvider.IsEnvironmentActive">
            <summary>
            Returns true if the provider finds the environment defining
            the necessary information to drive the configuration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IEnvironmentConfigProvider.ActiveProjectConfiguration">
            <summary>
            Returns the project configuration active in the environment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService">
            <summary>
            A service used by any and all CPS components that interface directly with the
            MSBuild object model of a project to notify interested parties of changes made.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService.FireProjectChangeEventsAsync(System.Object,System.EventArgs,Microsoft.VisualStudio.Threading.AsyncEventHandler,Microsoft.VisualStudio.Threading.AsyncEventHandler,Microsoft.VisualStudio.Threading.AsyncEventHandler)">
            <summary>
            Invokes event handlers notifying of a project change.
            </summary>
            <param name="sender">The sender of the event.  May be null if handlers are prepared for it.</param>
            <param name="eventArgs">The <em>immutable</em> event arguments to pass to each event handler.  May be null if handlers are prepared for it.</param>
            <param name="changingHandlers">Event handlers to invoke immediately, on this thread.
            May be null.
            These handlers may make cascading changes as the result of the change causing this event to fire.
            Handlers should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Handlers should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.</param>
            <param name="changedWritingHandlers">These handlers are invoked when the write lock is about to be released.</param>
            <param name="changedHandlers">Event handlers to invoke after the write lock has been released.
            May be null.
            <para>Clients should expect be invoked on any thread.</para>
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService.FireProjectChangeEventsAsync``1(System.Object,``0,Microsoft.VisualStudio.Threading.AsyncEventHandler{``0},Microsoft.VisualStudio.Threading.AsyncEventHandler{``0},Microsoft.VisualStudio.Threading.AsyncEventHandler{``0})">
            <summary>
            Invokes event handlers notifying of a project change.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:System.EventArgs"/> type being provided to the handlers.</typeparam>
            <param name="sender">The sender of the event.  May be null if handlers are prepared for it.</param>
            <param name="eventArgs">The <em>immutable</em> event arguments to pass to each event handler.  May be null if handlers are prepared for it.</param>
            <param name="changingHandlers">Event handlers to invoke immediately, on this thread.
            May be null.
            These handlers may make cascading changes as the result of the change causing this event to fire.
            Handlers should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Handlers should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.</param>
            <param name="changedWritingHandlers">These handlers are invoked when the write lock is about to be released.</param>
            <param name="changedHandlers">Event handlers to invoke after the write lock has been released.
            May be null.
            <para>Clients should expect be invoked on any thread.</para>
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IEventDispatcherService.CancelPendingChangedEvents">
            <summary>
            Clears any pending events in this particular write lock from the queue
            so they will not be fired when a write lock is released.
            </summary>
            <remarks>
            This method is useful when a bulk operation ends up failing, the changes are rolled back,
            and the OnChanged events that have been queued up for invocation after the write lock is
            released should not be fired.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IMainThreadPublisher">
            <summary>
            An interface exported for purposes of sharing a reference to the main thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMainThreadPublisher.MainThread">
            <summary>
            Gets the main thread.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the main thread is not yet known.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IMainThreadPublisher.JoinableTaskContext">
            <summary>
            Gets the context to use for all joinable jobs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService">
            <summary>
            A service that assists in managing project-related background tasks.
            </summary>
            <remarks>
            Imports of this interface should generally *not* be Lazy&lt;T&gt; imports to avoid ObjectDisposedExceptions
            from MEF while trying to access lazily initialize imports of this service when the project has already unloaded,
            particularly when such use of this service was to determine whether the project has already unloaded and/or to
            avoid timing issues with project unload.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken">
            <summary>
            Gets a token that is cancelled when the project is unloaded.
            </summary>
            <remarks>
            Any handlers registered via <see cref="M:System.Threading.CancellationToken.Register(System.Action)" /> may be executed
            while background tasks are still running.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)">
            <summary>
            Prevents a project unload from beginning until a given task has completed.
            </summary>
            <param name="joinableTask">
            The asynchronous task to wait on in the event of a project unload.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
            <remarks>
            To reduce the impact of deadlocks and to ensure reasonable project unload times, a timeout may expire and result in project unload resuming before the task is completed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Prevents a project unload from beginning until a given task has completed.
            </summary>
            <param name="task">
            The asynchronous task to wait on in the event of a project unload.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
            <remarks>
            To reduce the impact of deadlocks and to ensure reasonable project unload times, a timeout may expire and result in project unload resuming before the task is completed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation,System.Boolean)">
            <summary>
            Prevents project critical operations (e.g. unload, save, build, rename) from beginning until a given task has completed.
            </summary>
            <param name="joinableTask">
            The asynchronous task to wait on in the event of a critical project operation.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="operationFlags">An enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> indicating the critical project operation.</param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterCriticalAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)">
            <summary>
            Prevents a project unload or other critical operations (e.g. save, build, rename) from beginning until a given task has completed.
            </summary>
            <param name="joinableTask">
            The asynchronous task to wait on in the event of a project unload.
            This task may have <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.UnloadCancellationToken"/> as its cancellation token,
            or as one of its cancellation tokens joined using <see cref="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])"/>.
            </param>
            <param name="registerFaultHandler">A value indicating whether to handle faults from this task so it doesn't bring down the process.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the project has already begun or completed unloading.</exception>
            <remarks>
            To reduce the impact of deadlocks and to ensure reasonable project unload times, a timeout may expire and result in project unload resuming before the task is completed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.DrainTaskQueueAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Joins and waits on any pending asynchronous work relevant to this project.
            </summary>
            <param name="drainCurrentQueueOnly">A value indicating whether the returned task
            should be completed when all the currently queued tasks are completed;
            use <c>false</c> to fully drain the queue (including of tasks that are registered after this call).</param>
            <param name="throwExceptions">A value indicating whether the returned task should fault if
            any registered async tasks fault.</param>
            <param name="cancellationToken">A token whose cancellation signals the caller's lost interest in waiting for tasks to complete.</param>
            <returns>A task, that may fault if any queued tasks fault.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.DrainCriticalTaskQueueAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Joins and waits on any pending asynchronous work relevant to this project.
            </summary>
            <param name="drainCurrentQueueOnly">A value indicating whether the returned task
            should be completed when all the currently queued tasks are completed;
            use <c>false</c> to fully drain the queue (including of tasks that are registered after this call).</param>
            <param name="throwExceptions">A value indicating whether the returned task should fault if
            any registered async tasks fault.</param>
            <param name="cancellationToken">A token whose cancellation signals the caller's lost interest in waiting for tasks to complete.</param>
            <returns>A task, that may fault if any queued tasks fault.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.DrainTaskQueueAsync(Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Joins and waits on any pending asynchronous work relevant to this project.
            </summary>
            <param name="operation">An enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> indicating the critical operation that
            the tasks are associated with; only a single flag is allowed here.</param>
            <param name="drainCurrentQueueOnly">A value indicating whether the returned task
            should be completed when all the currently queued tasks are completed;
            use <c>false</c> to fully drain the queue (including of tasks that are registered after this call).</param>
            <param name="throwExceptions">A value indicating whether the returned task should fault if
            any registered async tasks fault.</param>
            <param name="cancellationToken">A token whose cancellation signals the caller's lost interest in waiting for tasks to complete.</param>
            <returns>A task, that may fault if any queued tasks fault.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.IsTaskQueueEmpty(Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation)">
            <summary>
            Detects if any tasks with the enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> exist.
            </summary>
            <param name="projectCriticalOperation">An enum flag indicating the critical project operation.</param>
            <returns>True if there's any task with the enum flag <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation"/> exist.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider">
            <summary>
            Provides project capability insights from some project context for use in project composition.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesProvider.Current">
            <summary>
            Gets the current snapshot of capabilities and versioning information, if available.
            </summary>
            <value>A versioned snapshot of capabilities; or <c>null</c> if none have been calculated yet.</value>
            <remarks>
            The value for this property may be <c>null</c> if the capabilities have not been determined yet.
            When non-null, this value will be the last computed value, but not necessary the latest value
            considering recent changes to the project or environment.
            When getting the very latest value is important, get the latest value from the
            <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1.SourceBlock"/> on this instance using
            ProjectDataSource.GetLatestVersionAsync.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope">
            <summary>
            Defined a capabilities scope where a capabilities check should be evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesScope.Identity">
            <summary>
            Gets the unique identity of the scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectScopeCapabilitiesSnapshot">
            <summary>
            A snapshot of project scope capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectScopeCapabilitiesSnapshot.ScopeIdentity">
            <summary>
            The identity of the scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectScopeCapabilitiesSnapshot.InheritedProjectScopeCapabilitiesSnapshots">
            <summary>
            Flattened set of project scope capabilities snapshots that are inherited.
            <remarks>The returned value is already flattened, so callers don't need to iterate recursively through the set.</remarks>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot">
            <summary>
            A snapshot of project capabilities that may be tested for specific capabilities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectCapabilitiesSnapshot.IsProjectCapabilityPresent(System.String)">
            <summary>
            Checks whether a specific project capability is defined for this project.
            </summary>
            <param name="projectCapability">The project capability to check for.</param>
            <returns><c>true</c> if <paramref name="projectCapability"/> is defined by this project; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService">
            <summary>
            A service that provides insight into the available project configurations for an UnconfiguredProject.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.Added">
            <summary>
            Occurs at the conclusion of a project write lock, after a project configuration is added to the project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.Removed">
            <summary>
            Occurs at the conclusion of a project write lock, after a project configuration is removed from the project.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.Changed">
            <summary>
            Occurs at the conclusion of a project write lock, after a project configuration is renamed or changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.SuggestedProjectConfiguration">
            <summary>
            Gets the suggested project configuration to use for this project, taking into account
            the active configuration, last known active configuration, any already loaded configurations,
            the default configuration for the project type, and an ultimate fallback configuration.
            </summary>
            <value>Never null.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.GetKnownProjectConfigurationsAsync">
            <summary>
            Returns the list of project configurations that the project knows about. This list is
            read from the project manifest.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.GetProjectConfigurationAsync(System.String)">
            <summary>
            Gets the project configuration with a given name.
            </summary>
            <param name="name">The name of the desired project configuration.</param>
            <returns>The matching ProjectConfiguration.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no matching project configuration can be found.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.AddKnownProjectConfigurationAsync(System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Adds a project configuration to the list of known project configurations.
            </summary>
            <param name="name"> The name of the project configuration. Cannot be null or empty. </param>
            <param name="dimensionNameValuePairs"> The list of configuration dimensions name-value pairs that make up this project configuration. Cannot be null or empty. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.AddProjectConfigurationsByExistingDimensionAsync(System.String,System.String,System.Func{System.Collections.Immutable.IImmutableDictionary{System.String,System.String},System.String})">
            <summary>
            Creates empty project configurations that have a given property name and value.
            </summary>
            <param name="dimensionName">The project configuration property name.</param>
            <param name="dimensionValue">The project configuration property value.</param>
            <param name="getConfigurationName">A delegate that will calculate a unique name for a new project configuration.</param>
            <remarks>
            If a project already has these project configurations:
              Debug|Win32
              Release|Win32
              Debug|x86
              Release|x86
            Then calling this method with "Configuration", "Foo" would add these project configurations:
              Foo|Win32
              Foo|x86
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.RemoveKnownProjectConfigurationAsync(System.String,System.Boolean)">
            <summary>
            Removes a project configuration from the list of known project configurations based on its full name.
            If specified, it also removes all msbuild project elements that are conditioned by only and all of the
            project configuration dimensions.
            Logs a message if duplicate project configurations are found but continues with deleting all.
            Logs a message if the project configuration is not found in the known project configurations list and returns.
            </summary>
            <param name="name"> The full name of the project configuration. Cannot be null or empty. </param>
            <param name="removeConditionedElements"> Specifies whether the method should remove all the msbuild project elements
            that are conditioned on the project configuration. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.RemoveProjectConfigurationDimensionAsync(System.String,System.String,System.Boolean)">
            <summary>
            Removes all project configurations from the list of known project configurations
            which contain the specified dimension.
            If specified, it also removes all msbuild project elements that are conditioned by only this dimension.
            Logs a message if no project configuration is found in the known project configurations list and returns.
            </summary>
            <param name="dimensionName"> The name of the project configuration dimension. Cannot be null or empty. </param>
            <param name="dimensionValue"> The value of the project configuration dimension. Cannot be null or empty. </param>
            <param name="removeConditionedElements"> Specifies whether the method should remove all the msbuild project elements
            that are conditioned on the project configuration dimension. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.RenameProjectConfigurationDimensionAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Changes the dimension value for all known project configurations that contain it.
            If specified, it also updates project element conditions that are based on at least the old value of the dimension.
            Logs a message if the renaming operation results in duplicate project configurations but continues with the renaming process.
            Logs a message if no project configuration is found in the known project configurations list
            that contains the dimension and returns.
            </summary>
            <param name="dimensionName"> The dimension name. Cannot be null or empty. </param>
            <param name="oldValue"> The old value. Cannot be null or empty. </param>
            <param name="newValue"> The new value. Cannot be null or empty. </param>
            <param name="renameConditionedElements"> Specifies whether the method should update conditions for all affected elements. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.CloneKnownProjectConfigurationAsync(System.String,System.String)">
            <summary>
            Clones all project elements conditioned by at least all project configuration dimensions.
            Logs a message and returns if either the template or the clone project configuration is missing
            from the list of known project configurations or is having a duplicate.
            </summary>
            <param name="templateName"> Full name of the project configuration used as cloning template (e.g. "Debug|AnyCPU") </param>
            <param name="cloneName"> Name of the clone project configuration. Cannot be null or empty. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.CloneKnownProjectConfigurationAsync(System.String,System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Creates the clone project configuration if it doesn't exist already.
            Clones all project elements conditioned by at least all project configuration dimensions.
            Logs a message and returns if the template project configuration is missing or having a duplicate.
            Logs a message and returns if the clone project configuration is identical with the template project configuration.
            Logs a message and returns if the clone project configuration is found
            with different metadata than passed with cloneMetadata parameter.
            </summary>
            <param name="templateName"> Name of the project configuration used as cloning template. Cannot be null or empty. </param>
            <param name="cloneName"> Name of the clone project configuration. Cannot be null or empty. </param>
            <param name="cloneMetadata"> Dimensions names and values of the clone configuration. Cannot be null or empty. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsService.CloneProjectConfigurationDimensionAsync(System.String,System.String,System.String)">
            <summary>
            Clones all project elements conditioned by at least this configuration dimension.
            Logs a message and returns if there is no project configuration in the list of known project configurations
            that would contain the dimension name with the old and new values.
            Logs a message if the number of project configurations with dimension name = oldValue is different than
            the number of project configurations with dimension name = newValue, but continues with the cloning operation.
            </summary>
            <param name="dimensionName"> The dimension name. Cannot be null or empty. </param>
            <param name="oldValue"> The old value. Cannot be null or empty. </param>
            <param name="newValue"> The new value. Cannot be null or empty. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsServiceInternal">
            <summary>
            Internal methods on the ProjectConfigurationsService that must be reachable from CPS-VS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsServiceInternal.GetSuggestedProjectConfiguration(System.Boolean)">
            <summary>
            Gets the best ProjectConfiguration to load when we don't know what to load, but would prefer
            to load one that is already loaded or that probably will be.
            </summary>
            <param name="queryActiveConfiguration">
            A value indicating whether to dare ask the system for the active project configuration.
            Doing so is usually a good idea -- but not when it is the query for active project configuration
            that is asking US the question already (leading to recursive loop) or querying VS has already taken place.
            </param>
            <returns>The best project configuration to load.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectConfigurationsServiceInternal.ConvertMinimalConfigurationToProjectConfigurationAsync(Microsoft.VisualStudio.ProjectSystem.IMinimalProjectConfiguration)">
            <summary>
            Converts the given minimal project configuration to CPS project configuration.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectContext">
            <summary>
            An interface that may appear on various other CPS scoped services to provide access
            to other components of CPS.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectContext.ProjectService">
            <summary>
            Gets the project service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectContext.UnconfiguredProject">
            <summary>
            Gets the unconfigured project to which this service applies, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectContext.ConfiguredProject">
            <summary>
            Gets the configured project to which this service applies, if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry">
            <summary>
            Offers a way to register and look up project data sources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry.RegisterDataSource(Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource)">
            <summary>
            Registers a data source.
            </summary>
            <param name="dataSource">The data source to register.</param>
            <returns>A value which may be disposed of to unregister the data source, or <c>null</c> if the data source has already been registered.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if another data source is already registered with a conflicting
            <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource.DataSourceKey"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry.TryGetDataSource(Microsoft.VisualStudio.ProjectSystem.NamedIdentity,Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource@)">
            <summary>
            Searches for a data source with a given <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource.DataSourceKey"/>.
            </summary>
            <param name="dataSourceKey">The value of the <see cref="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource.DataSourceKey"/> for the data source to find.</param>
            <param name="dataSource">Receives the data source instance with the specified key; or <c>null</c> if no match could be found.</param>
            <returns><c>true</c> if a match was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectErrorReporting">
            <summary>
            Describes a service that can submit Watson reports for non-fatal errors.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectErrorReporting.SubmitReportOnFailure(System.Action,System.Func{System.Exception,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings})">
            <summary>
            Executes a delegate and files a Watson report if an exception is thrown.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="reportExceptionCheck">
            An optional delegate that will examine a thrown exception and return report settings
            if a Watson report should be submitted, or <c>null</c> if no report should be filed.
            If the delegate is not provided, all exceptions will generate a Watson report using the default settings.
            </param>
            <remarks>
            If the <paramref name="action"/> throws an exception, it will propagate to the caller of this method,
            whether or not a Watson report is submitted.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectErrorReporting.SubmitErrorReport(System.Exception,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ErrorReportConsent)">
            <summary>
            Submits a Watson report for a given exception.
            </summary>
            <param name="exception">The exception to file a report for.</param>
            <param name="settings">Customizes what is included in the error report.</param>
            <param name="consentGiven">Indicates the level of consent that was given by the user.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService">
            <summary>
            Service for reading/writing arbitrary "project extension" data to a project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.ContainsKeyAsync(System.String)">
            <summary>
            Tests for the presence of some extension data under a given key.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <returns><c>true</c> if this key is defined in the project extensions area.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.GetDataAsync(System.String)">
            <summary>
            Gets the data previously stored using <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetDataAsync(System.String,System.String)"/> under a given key.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <returns>The value previously stored, or the empty string if the key was not found in the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.GetXmlAsync(System.String)">
            <summary>
            Retrieves a snapshot of well-formed XML from a project previously stored with <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetXmlAsync(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})"/>.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <returns>A sequence of elements; an empty sequence if no data under the given key was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetXmlAsync(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Stores well-formed XML in the project.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <param name="elements">The element(s) to store.</param>
            <remarks>
            Data previously stored under the given key, if any, will be replaced with the new data.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.SetDataAsync(System.String,System.String)">
            <summary>
            Sets arbitrary data under a given key in the project.
            </summary>
            <param name="key">Any non-empty, non-null string.</param>
            <param name="value">The value to store, which may be an empty string but must not be null.</param>
            <remarks>
            Data previously stored under the given key, if any, will be replaced with the new data.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectExtensionDataService.DeleteAsync(System.String)">
            <summary>
            Deletes the data or XML stored under a given key, if any exists.
            </summary>
            <param name="key">The key to delete from the project extension storage area.</param>
            <returns><c>true</c> if the key was present and was removed; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags">
            <summary>
            Flags that modify default lock behavior.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.None">
            <summary>
            The default behavior applies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.StickyWrite">
            <summary>
            Causes an upgradeable reader to remain in an upgraded-write state once upgraded,
            even after the nested write lock has been released.
            </summary>
            <remarks>
            This is useful when you have a batch of possible write operations to apply, which
            may or may not actually apply in the end, but if any of them change anything,
            all of their changes should be seen atomically (within a single write lock).
            This approach is preferable to simply acquiring a write lock around the batch of
            potential changes because it doesn't defeat concurrent readers until it knows there
            is a change to actually make.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.SkipInitialEvaluation">
            <summary>
            Skips a step to make sure that a project is initially evaluated when retrieved using <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)"/>.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags.SuppressReevaluation">
            <summary>
            Suppresses MSBuild evaluation of projects while a write lock is held even if
            <see cref="M:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary"/> is called.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockService">
            <summary>
            Exposes the lock which protects access to the MSBuild object model behind projects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsAnyLockHeld">
            <summary>
            Gets a value indicating whether any kind of lock is held by the caller.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsAnyPassiveLockHeld">
            <summary>
            Gets a value indicating whether any kind of lock is held by the caller without regard
            to the lock compatibility of the caller's context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a read lock.
            </summary>
            <remarks>
            This property returns <c>false</c> if any other lock type is held, unless
            within that alternate lock type this lock is also nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsPassiveReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a read lock, even if it is
            currently hidden due to the caller's thread type or current SynchronizationContext.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsUpgradeableReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds an upgradeable read lock.
            </summary>
            <remarks>
            This property returns <c>false</c> if any other lock type is held, unless
            within that alternate lock type this lock is also nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsPassiveUpgradeableReadLockHeld">
            <summary>
            Gets a value indicating whether the caller holds an upgradeable read lock, even if it is
            currently hidden due to the caller's thread type or current SynchronizationContext.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsWriteLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a write lock.
            </summary>
            <remarks>
            This property returns <c>false</c> if any other lock type is held, unless
            within that alternate lock type this lock is also nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.IsPassiveWriteLockHeld">
            <summary>
            Gets a value indicating whether the caller holds a write lock, even if it is
            currently hidden due to the caller's thread type or current SynchronizationContext.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.ReadLockAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains a read lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.UpgradeableReadLockAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains an upgradeable read lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.UpgradeableReadLockAsync(Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags,System.Threading.CancellationToken)">
            <summary>
            Obtains a read lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="options">Modifications to normal lock behavior.</param>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.WriteLockAsync(System.Threading.CancellationToken)">
            <summary>
            Obtains a write lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.WriteLockAsync(Microsoft.VisualStudio.ProjectSystem.ProjectLockFlags,System.Threading.CancellationToken)">
            <summary>
            Obtains a write lock, asynchronously awaiting for the lock if it is not immediately available.
            </summary>
            <param name="options">Modifications to normal lock behavior.</param>
            <param name="cancellationToken">
            A token whose cancellation indicates lost interest in obtaining the lock.
            A canceled token does not release a lock that has already been issued.  But if the lock isn't immediately available,
            a canceled token will cause the code that is waiting for the lock to resume with an <see cref="T:System.OperationCanceledException"/>.
            </param>
            <returns>An awaitable object whose result is the lock releaser.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockService.HideLocks">
            <summary>
            Prevents use or visibility of the caller's lock(s) until the returned value is disposed.
            </summary>
            <returns>The value to dispose to restore lock visibility.</returns>
            <remarks>
            This can be used by a write lock holder that is about to fork execution to avoid
            two threads simultaneously believing they hold the exclusive write lock.
            The lock should be hidden just before kicking off the work and can be restored immediately
            after kicking off the work.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal">
            <summary>
            Exposes the lock that protects the MSBulid object model behind loaded projects, with additional CPS-internal methods.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.ReleasedWriteLock">
            <summary>
            Occurs when a top-level write lock is about to be released.
            </summary>
            <remarks>
            <para>
            Event handlers are invoked on threadpool threads, are invoked
            sequentially and complete before the write lock is released.
            Event handlers MUST NOT attempt to acquire any kind of project lock
            or the writer thread and the event handler's thread will deadlock.
            </para>
            <para>
            One use for this event is for event dispatchers that want to track
            which events get fired by which write locks.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.ReleasingWriteLock">
            <summary>
            Occurs when a top-level write lock is about to be released.
            Event handlers are fired within the write lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.CurrentWriteLockTask">
            <summary>
            A task that is completed when the outermost write lock held by the caller is released.
            </summary>
            <remarks>
            The task is always complete when no write lock is held by the calling thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.SuppressWriteLockCheck(System.String)">
            <summary>
            Suppresses write lock check enforcement for a ProjectRootElement with a given full path temporarily.
            This method should be called as the expression of a C# <c>using</c> clause to ensure proper disposal.
            </summary>
            <param name="projectRootElementFullPath">The value of <see cref="P:Microsoft.Build.Construction.ProjectRootElement.FullPath"/> to allow to be marked dirty without throwing a missing write lock exception if no write lock is present.</param>
            <returns>An object whose disposal will end the temporary write lock suppression for this file.</returns>
            <remarks>
            Write lock enforcement is *very* important.  Please use this method with extreme care and caution.
            For instance, this method should only be used by a caller who has the only reference to the named ProjectRootElement,
            and even then write locks should be obtained whenever possible.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.OnBeforeWriteLockReleased(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Registers a callback to be invoked when the write lock held by the caller is
            about to be ultimately released (outermost write lock).
            </summary>
            <param name="action">
            The asynchronous delegate to invoke.
            Access to the write lock is provided throughout the asynchronous invocation.
            </param>
            <remarks>
            This supports some scenarios VC++ has where change event handlers need to inspect changes,
            or follow up with other changes to respond to earlier changes, at the conclusion of the lock.
            This method is safe to call from within a previously registered callback, in which case the
            registered callback will run when previously registered callbacks have completed execution.
            If the write lock is released to an upgradeable read lock, these callbacks are fired synchronously
            with respect to the writer who is releasing the lock.  Otherwise, the callbacks are invoked
            asynchronously with respect to the releasing thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.RegisterLockHoldingMainThreadJoinableIfApplicable(Microsoft.VisualStudio.Threading.JoinableTask)">
            <summary>
            Registers the caller, who is waiting for the Main thread, as a project lock holder if applicable.
            </summary>
            <param name="joinable">The joinable being used to switch to the Main thread.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.UnregisterLockHoldingMainThreadJoinable(Microsoft.VisualStudio.Threading.JoinableTask)">
            <summary>
            Unregisters the caller's Main thread joinable as a pending Main thread awaiter with a project lock.
            </summary>
            <param name="joinable">The joinable previously supplied to <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.RegisterLockHoldingMainThreadJoinableIfApplicable(Microsoft.VisualStudio.Threading.JoinableTask)"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.PrepareReload(System.String)">
            <summary>
            Prepare to reload a msbuild model into the project system.
            This is a special function should only be called by the code to reload files from the disk. In this phase, we need change
            the in-memory model inside the project collection, but should not check out the file through the source control system.
            </summary>
            <param name="filePath">Full file path to the msbuild file</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser">
            <summary>
            Provides services to the lock structures associated with the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectLockService"/> so that their implementations
            can remain simple in this contract assembly by forwarding the implementation to a unified implementation assembly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.ProjectCollection">
            <summary>
            Gets the project collection protected by the lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.WritableFiles">
            <summary>
            Gets the set of files checked out under the current write lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetAwaiter(Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable,Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable)">
            <summary>
            Gets the awaiter for a given awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetAwaiter(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable,Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable)">
            <summary>
            Gets the awaiter for a given awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.IsCompleted(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter)">
            <summary>
            Returns a value for the awaiter's IsCompleted property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnCompleted(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter,System.Action)">
            <summary>
            Queues a continuation delegate for execution after the awaiter's job is finished.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild Project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectXmlAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild ProjectRootElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.CheckoutAsync(System.String)">
            <summary>
            Checks a file out of source control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.CheckoutAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks files out of source control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.RenameAsync(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser,System.String,System.String)">
            <summary>
            Renames a project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnDispose(Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnDispose(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnReleaseAsync(Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.OnReleaseAsync(Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser)">
            <summary>
            Releases the lock held by the specified releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.SetAllResourcesToUnknownState">
            <summary>
            Sets all resources to unknown state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable">
            <summary>
            A value that can be "awaited" while a project lock isn't immediately available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.awaitable">
            <summary>
            The underlying lock's awaitable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaitable.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable">
            <summary>
            A value that can be "awaited" while a project lock isn't immediately available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.awaitable">
            <summary>
            The underlying lock's awaitable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaitable,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaitable.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter">
            <summary>
            The awaiter for an asynchronous project lock request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.awaiter">
            <summary>
            The underlying lock's awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the lock has been issued.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the delegate to execute when the lock is available.
            </summary>
            <param name="continuation">The delegate.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.GetResult">
            <summary>
            Applies the issued lock to the caller and returns the value used to release the lock.
            </summary>
            <returns>The value to dispose of to release the lock.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockAwaiter.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter">
            <summary>
            The awaiter for an asynchronous project write lock request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.awaiter">
            <summary>
            The underlying lock's awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceAwaiter,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the lock has been issued.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the delegate to execute when the lock is available.
            </summary>
            <param name="continuation">The delegate.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.GetResult">
            <summary>
            Applies the issued lock to the caller and returns the value used to release the lock.
            </summary>
            <returns>The value to dispose of to release the lock.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockAwaiter.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser">
            <summary>
            The result of acquiring a project lock, providing various under-lock services and a means to release the lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.CompletedTask">
            <summary>
            A singleton completed task.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.releaser">
            <summary>
            The underlying lock's releaser.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser"/> struct.
            </summary>
            <param name="releaser">The underlying reader-writer lock releaser.</param>
            <param name="helper">The instance that receives forwarded method calls.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.ProjectCollection">
            <summary>
            Gets the MSBuild project collection.  This should only be used or referenced while holding the lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.LockReleaser">
            <summary>
            Gets the underlying lock's releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project evaluation model for the specified project.
            </summary>
            <param name="configuredProject">The configured project whose underlying MSBuild object model is required.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.GetProjectXmlAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project construction model for the specified file.
            </summary>
            <param name="projectFile">The project file (or import) that is reqiured.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the <see cref="T:Microsoft.Build.Construction.ProjectRootElement"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.Dispose">
            <summary>
            Disposes this lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.ReleaseAsync">
            <summary>
            Disposes this lock.
            </summary>
            <returns>A task that must be awaited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockReleaser.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser">
            <summary>
            The result of acquiring a project write lock, providing various under-lock services and a means to release the lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.releaser">
            <summary>
            The underlying lock's releaser.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.helper">
            <summary>
            The service that provides the actual functionality behind this struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser"/> struct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.ProjectCollection">
            <summary>
            Gets the MSBuild project collection.  This should only be used or referenced while holding the lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.WritableFiles">
            <summary>
            Gets the set of files previously checked out using source control within this write lock.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.LockReleaser">
            <summary>
            Gets the underlying lock's releaser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.GetProjectAsync(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project evaluation model for the specified project.
            </summary>
            <param name="configuredProject">The configured project whose underlying MSBuild object model is required.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.GetProjectXmlAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the MSBuild project construction model for the specified file.
            </summary>
            <param name="projectFile">The project file (or import) that is reqiured.</param>
            <param name="cancellationToken">A token whose cancellation signals lost interest in the result.</param>
            <returns>A task whose result is the <see cref="T:Microsoft.Build.Construction.ProjectRootElement"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.CheckoutAsync(System.String)">
            <summary>
            Checks a file out for editing from source control.
            </summary>
            <param name="file">The file to edit.</param>
            <returns>A task whose successful completion signals approval to edit the file, or whose faulting completion signals rejection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.CheckoutAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks a file out for editing from source control.
            </summary>
            <param name="files">The files to edit.</param>
            <returns>A task whose successful completion signals approval to edit the file, or whose faulting completion signals rejection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.RenameAsync(System.String,System.String)">
            <summary>
            Updates a ProjectRootElement.FullPath property for a matching ProjectRootElement if it is loaded.
            </summary>
            <param name="oldFullPath">The current value of the <see cref="P:Microsoft.Build.Construction.ProjectRootElement.FullPath"/> property.</param>
            <param name="newFullPath">The intended new value of the <see cref="P:Microsoft.Build.Construction.ProjectRootElement.FullPath"/> property.</param>
            <returns>A task that completes when the work is finished.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.Dispose">
            <summary>
            Disposes this lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.ReleaseAsync">
            <summary>
            Disposes this lock.
            </summary>
            <returns>A task that must be awaited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.SetAllResourcesToUnknownState">
            <summary>
            Sets all resources to unknown state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectWriteLockReleaser.helper"/> is <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression">
            <summary>
            A value to dispose to terminate the suppression of the visibility and automatic propagation of a held lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression.suppression">
            <summary>
            The underlying lock's suppression value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression.#ctor(Microsoft.VisualStudio.Threading.AsyncReaderWriterLock.Suppression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectLockSuppression.Dispose">
            <summary>
            Ends the suppression of the project lock.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ReleasingWriteLockEventArgs">
            <summary>
            Arguments to supply to the <see cref="E:Microsoft.VisualStudio.ProjectSystem.IProjectLockServiceInternal.ReleasingWriteLock"/> event handlers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ReleasingWriteLockEventArgs.WrittenProjectXmlPaths">
            <summary>
            Gets the set of paths to MSBuild files that were just changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ReleasingWriteLockEventArgs.RenamedProjectXmlPaths">
            <summary>
            Gets a map of old to new full paths of project files that were renamed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices">
            <summary>
            An interface that provides access common project services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices.ExportProvider">
            <summary>
            Gets the ExportProvider for this scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices.DataSourceRegistry">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectDataSourceRegistry"/> for this scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices.ProjectService">
            <summary>
            Gets the Project Service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectCommonServices.Capabilities">
            <summary>
            Gets the capabilities associated with the applicable scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectReloader">
            <summary>
            A ProjectService scoped service that can reload a given project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectReloader.ReloadIfNecessaryAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Boolean)">
            <summary>
            Causes the project to reload if the host requires it considering changes that have been made to the project.
            </summary>
            <param name="unconfiguredProject">The project to consider reloading.</param>
            <param name="promptUserBeforeReload">A value indicating whether the user should be prompted before a reload if one should occur.</param>
            <returns>
            A task that completes after the project is determined to not need a reload, or after the project has been reloaded.
            The result of the task indicates whether a reload actually occurred.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1">
            <summary>
            A source of versioned data.
            </summary>
            <typeparam name="T">The type of data being published.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectValueDataSource`1.SourceBlock">
            <summary>
            Gets a block that broadcasts the project-versioned values.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ISourceCodeControlIntegration">
            <summary>
            An interface that source code control providers can implement to influence
            project systems policy decisions and process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ISourceCodeControlIntegration.CanChangeProjectFilesAsync(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Invoked before any change is made to a project file or one of its imports.
            </summary>
            <param name="projectFullPaths">The full paths to the files about to be changed.</param>
            <returns>
            A value indicating whether the given file(s) can be written to according to
            the source code control system's policies.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.DeleteOptions">
            <summary>
            These flags qualify the nature of a delete/remove operation. These flags are used to control sending the correct hints which affect notifications to SCC.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DeleteOptions.None">
            <summary>
            No flag specified; indicates the file/folder should be removed from project only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DeleteOptions.DeleteFromStorage">
            <summary>
            Indicates that the file/folder should be deleted from disk/storage. Absence of this flag indicates the file/folder should be removed from project only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.DeleteOptions.DeleteIsPartOfMoveOperation">
            <summary>
            Indicates that this delete operation is completing a move/rename operation within a single project (e.g. Cut/Paste or Drag/Drop).
            In this case we do not want to send any RemovedFile/Folder hints because we would have already sent out RenamedFile/Folder hints.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IAddItemTemplatesGuidProvider">
            <summary>
            Provides support to supply an appropriate value for __VSHPROPID2.VSHPROPID_AddItemTemplatesGuid
            </summary>
            <remarks>
            See also https://msdn.microsoft.com/en-us/library/vstudio/microsoft.visualstudio.shell.interop.__vshpropid2.aspx
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IAddItemTemplatesGuidProvider.AddItemTemplatesGuid">
            <summary>
            GUID to use to get add item templates.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IFolderManager">
            <summary>
            Provides services for adding, removing and renaming source item folders in the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager.IncludeFolderInProjectAsync(System.String,System.Boolean)">
            <summary>
            Ensures that a folder with the given path shows up in a logical tree view of the project.
            </summary>
            <param name="path">The absolute or project-relative path to the folder.</param>
            <param name="recursive">A value indicating whether to recursively add subfolders of the path specified.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager.IncludeFolderInProjectAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Ensures that a folder with the given path shows up in a logical tree view of the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the folders to add.</param>
            <param name="recursive">A value indicating whether to recursively add subfolders of the paths specified.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager.RemoveFolderFromProjectAsync(System.String,Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes a folder and all its contents from the project.
            </summary>
            <param name="path">The absolute or project-relative path to the folder.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            The folder on disk is <em>not</em> deleted.
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager.RemoveFolderFromProjectAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes a folder and all its contents from the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the folders to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            The folder on disk is <em>not</em> deleted.
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager.RenameFolderAsync(System.String,System.String)">
            <summary>
            Renames a file system folder, and updates all folder and item references in the project file.
            </summary>
            <param name="oldPath">The absolute or project-relative path to rename.</param>
            <param name="newPath">The new absolute or project-relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager.RenameFolderInProjectAsync(System.String,System.String)">
            <summary>
            Renames a project folder, similar to RenameFolderAsync but without updating physical folder
            </summary>
            <param name="oldPath">The absolute or project-relative path to rename.</param>
            <param name="newPath">The new absolute or project-relative path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IFolderManager.PrepareToAddFoldersAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Prepare to create new folder by deleting stale excluded path inside the project
            </summary>
            <param name="includedPaths">The absolute or project-relative paths to new included folders to be added later.</param>
            <param name="excludedPaths">The absolute or project-relative paths to new excluded folders to be added later.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectFolderItemProviderExtension">
            <summary>
            Interface to access and manage project folder items not directly present in the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFolderItemProviderExtension.CheckFolderItemOwnershipAsync(System.String)">
            <summary>
            Returns true if this extension manages the folder item.
            </summary>
            <param name="evaluatedInclude">Item name.</param>
            <returns>True if this extension manages the folder item, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFolderItemProviderExtension.AddOwnedFolderItemsAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}})">
            <summary>
            Adds the folder items that the extension owns to the appropriate project file(s).
            </summary>
            <param name="items">Dictionary of folder <c>Include</c> values and their metadata. These values may contain macros and will not be escaped.</param>
            <returns>Collection of folder items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFolderItemProviderExtension.RemoveOwnedFolderItemsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.IProjectItem},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes the folder items that the extension owns from the appropriate project file(s).
            </summary>
            <param name="projectItems">Collection of <c>IProjectItem</c> folder items to remove.</param>
            <param name="deleteOptions">The delete options.</param>
            <returns>Collection of folder items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectFolderItemProviderExtension.RenameOwnedFolderItemAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String)">
            <summary>
            Renames the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItem"/> folder item to the passed-in new value if the extension owns the item.
            </summary>
            <param name="projectItem">The item to rename.</param>
            <param name="newValue">New name of the folder item.</param>
            <returns>The renamed <c>ProjectItem</c> instance if the item was renamed, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemByFileProvider">
            <summary>
            An accessor for project items backed by a specific project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemByFileProvider.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Adds a new item to the specified project.
            </summary>
            <param name="itemType">The item type for the new MSBuild item.</param>
            <param name="include">The unevaluated include value for the new item.</param>
            <param name="metadata">Dictionary of metadata to apply to the item. May be <c>null</c>.</param>
            <param name="projectFileToChange">The backing store of the item.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given <paramref name="itemType"/>
            is not one that is managed by this provider.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemByFileProvider.AddAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}},System.String)">
            <summary>
            Adds new items to the specified project.
            </summary>
            <param name="items">
            A sequence of items to add. The tuple is made up of the item type, the (unevaluated) item name, and its metadata respectively.
            The metadata item may be <c>null</c>.
            </param>
            <param name="projectFileToChange">The backing store of the items.</param>
            <returns>The sequence of added items.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension">
            <summary>
            Interface to access and manage project source items not directly present in the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension.CheckSourceItemOwnershipAsync(System.String,System.String)">
            <summary>
            Returns true if this extension manages the source item.
            </summary>
            <param name="itemType">Msbuild item type.</param>
            <param name="evaluatedInclude">Item name.</param>
            <returns>True if this extension manages the source item, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension.CheckProjectFileOwnershipAsync(System.String)">
            <summary>
            Returns true if this extension manages the project file.
            </summary>
            <param name="projectFilePath">Full path to the project file.</param>
            <returns>True if this extension manages the project file, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension.AddOwnedSourceItemsAsync(System.Collections.Generic.IReadOnlyCollection{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            Adds the source items that the extension owns to the appropriate project file(s).
            </summary>
            <param name="items">Dictionary of source <c>Include</c> values and their metadata. These values may contain macros and will not be escaped.</param>
            <returns>Collection of source items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension.TryAddSourceItemsToOwnedProjectFileAsync(System.Collections.Generic.IReadOnlyCollection{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}},System.String)">
            <summary>
            Adds the source items to the project file if this extension manages the project file.
            </summary>
            <param name="items">Dictionary of source <c>Include</c> values and their metadata.</param>
            <param name="projectFilePath">Full path to the project file.</param>
            <returns>True if the items were added to the project file, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension.RemoveOwnedSourceItemsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.IProjectSourceItem},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes the source items that the extension owns from the appropriate project file(s).
            </summary>
            <param name="projectItems">Collection of <c>IProjectItem</c> source items to remove.</param>
            <param name="deleteOptions">The delete options.</param>
            <returns>Collection of source items that are not owned by this extension and therefore were not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension.RenameOwnedSourceItemAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String)">
            <summary>
            Renames the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItem"/> source item to the passed-in new value if the extension owns the item.
            </summary>
            <param name="projectItem">The item to rename.</param>
            <param name="newValue">New name of the source item.</param>
            <returns>The renamed <c>ProjectItem</c> instance if the item was renamed, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension.SetItemTypeOfOwnedSourceItemAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String)">
            <summary>
            Sets the item type of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItem"/> source item to the passed-in new value if the extension owns the item.
            </summary>
            <param name="projectItem">The item to rename.</param>
            <param name="newItemType">New item type of the source item.</param>
            <returns>The renamed <c>ProjectItem</c> instance if the item was renamed, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema">
            <summary>
            A snapshot of the recognized item types for a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.FallbackContentType">
            <summary>
            Gets the fallback content type that is used for unknown files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetContentTypeAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem)">
            <summary>
            Get the content type schema that is associated with a given project item
            </summary>
            <param name="item"> a project item</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetContentType(System.String)">
            <summary>
            Get the content type schema by name
            </summary>
            <param name="contentTypeName">The content type name.</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetDefaultContentTypeForFile(System.String,System.Boolean)">
            <summary>
            Get default content type for a given filename
            </summary>
            <param name="fileName">file name</param>
            <param name="allowFallback">whether or not to allow a fallback content type for unrecognized extensions.</param>
            <returns>content type</returns>
            <remarks>Never returns null if allowFallback is true.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetDefaultContentTypeForItemType(System.String)">
            <summary>
            Get default content type for a given item type.
            </summary>
            <param name="itemType">The item type.</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetItemType(System.String)">
            <summary>
            Get the item type schema by name
            </summary>
            <param name="itemType">The item type.</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetItemType(Microsoft.VisualStudio.ProjectSystem.IProjectItem)">
            <summary>
            Get the item type schema for a given project item
            </summary>
            <param name="item"> a project item</param>
            <returns>content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetKnownContentTypes">
            <summary>
            Get all known content types (coming from project schema files)
            </summary>
            <returns>List of all known content types for this configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetKnownFileExtensions">
            <summary>
            Get all known file extensions (coming from project schema files)
            </summary>
            <returns>List of all known content types for this configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetKnownItemTypes">
            <summary>
            Get all known content types (coming from project schema files)
            </summary>
            <returns>List of all known content types for this configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetKnownFolderTypes">
            <summary>
            Get all known folder types (coming from project schema files)
            </summary>
            <returns>List of all known content types for this configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchema.GetDefaultContentTypeForExtension(System.String)">
            <summary>
            Get default content type for a file extension.
            </summary>
            <param name="extension">A file extension.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItem">
            <summary>
            Project items that track source items (as opposed to project items that support designers, for example).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItem.RenameAsync(System.String)">
            <summary>
            Renames the item in the project, moves the file on disk, and updates any related items.
            </summary>
            <param name="newLeafName">The new leaf name for the item.</param>
            <returns>A task for the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension2">
            <summary>
            Interface to extend IProjectSourceItemProviderExtension to allow batching renames.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectSourceItemProviderExtension2.RenameOwnedSourceItemsAsync(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String}})">
            <summary>
            Renames a collection of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItem"/> source item to the passed-in new value if the extension owns the item.
            </summary>
            <param name="renames">a collection of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItem"/> and the new include value. </param>
            <returns>a collection of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectItem"/> and updated ProjectItem, if the extension can handle it.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ISourceItemsServiceInternal">
            <summary>
            A unit test support interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ISourceItemsServiceInternal.UnitTestingInitialization">
            <summary>
            List of MSBuild ItemTypes that make up sources for VC projects, used for unit testing
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ForkOptions">
            <summary>
            Special treatment options for forked execution.
            </summary>
            <seealso cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.Fork(System.Func{System.Threading.Tasks.Task},Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.ForkOptions)"/>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.None">
            <summary>
            No special treatment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.SuppressRelevance">
            <summary>
            Any <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/> relevance inherited from the caller is suppressed in the fork.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.HideLocks">
            <summary>
            Any project locks not propagated to the fork.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.NoAssistanceMask">
            <summary>
            A mask of all flags that indicate that the caller does not wish to assist the fork in its execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnMainThread">
            <summary>
            Ensures that the fork begins execution on the main thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnThreadPool">
            <summary>
            Ensures that the fork begins execution on a threadpool thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.CancelOnUnload">
            <summary>
            Allows not executing the delegate if the project context is being disposed of before it would otherwise start execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.IsCriticalTask">
            <summary>
            Registers the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/> with
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterCriticalAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)"/>
            rather than
            <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService.RegisterAsyncTask(Microsoft.VisualStudio.Threading.JoinableTask,System.Boolean)"/>.
            When this flag is set, a project context must be supplied.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.Default">
            <summary>
            The recommended behaviors for fire and forget forked execution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService">
            <summary>
            Describes a CPS service that can apply various threading techniques depending on the threading model CPS is running in.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.JoinableTaskContext">
            <summary>
            Gets the joinable task context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.JoinableTaskFactory">
            <summary>
            Gets the AsyncPump instance for the importing service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.IsOnMainThread">
            <summary>
            Gets a value indicating whether the caller is on the Main thread of the host app.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.ExecuteSynchronously(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes some work synchronously.  When executed on the UI thread, allowing for related work to come back to the UI thread.
            </summary>
            <param name="asyncAction">The delegate to execute.</param>
            <example>
            ThreadingService.ExecuteSynchronously(async delegate {
                // Still on UI thread.
                await SomeWorkAsync();
                // Still on UI thread
                await Task.Run(() => /*background thread work*/);
                // Still on UI thread
            });
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.ExecuteSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes some work synchronously.  When executed on the UI thread, allowing for related work to come back to the UI thread.
            </summary>
            <typeparam name="T">The type of value returned by <paramref name="asyncAction"/></typeparam>
            <param name="asyncAction">The delegate to execute.</param>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.VerifyOnUIThread">
            <summary>
            Throws an exception if not called on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.Fork(System.Func{System.Threading.Tasks.Task},Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.ForkOptions)">
            <summary>
            Executes the specified delegate in a safe fire-and-forget manner.
            </summary>
            <param name="asyncAction">The async delegate to invoke. It is invoked asynchronously with respect to the caller.</param>
            <param name="factory">The factory to use for creating the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask"/>. May be <c>null</c> to use the default.</param>
            <param name="unconfiguredProject">The unconfigured project which the delegate operates on, if applicable. Optional if <paramref name="configuredProject"/> is specified.</param>
            <param name="configuredProject">The configured project which the delegate operates on, if applicable.</param>
            <param name="watsonReportSettings">Whether and how non-fatal Watson reports are filed when the delegate fails.</param>
            <param name="faultSeverity">Suggests to the user how severe the fault is if the delegate throws.</param>
            <param name="options">Influences the environment in which the delegate is executed.</param>
            <remarks>
            The delegate is executed in the same context as the caller unless either <see cref="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnMainThread"/> or <see cref="F:Microsoft.VisualStudio.ProjectSystem.ForkOptions.StartOnThreadPool"/> are specified.
            For example if the caller is on the main thread, the delegate is invoked on the main thread.
            If the caller is on a threadpool thread, the delegate will also be invoked on the threadpool.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.SuppressProjectExecutionContext">
            <summary>
            Prevents the inner block to use the current project system related context, including
             current JoinableTask, project locks, and capabilites context.  This should be used when a dataflow block to publish
            data, so the chained dataflow code won't run inside the same context as the code publishing the data.
            </summary>
            <remarks>
            It is typically used inside a using block.
            UNDONE: consider to change the return type to structure, after merging CPS assemblies.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectInternalServices">
            <summary>
            Gets internal services of the UnconfiguredProject scope.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectInternalServices.VsUnconfiguredProjectIntegrationService">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService"/> service instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices">
            <summary>
            An interface that provides access to common unconfigured project scoped services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ActiveConfiguredProjectSubscription">
            <summary>
            Provides cross-sectional views of the project's evaluation and post design-time build states.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ActiveConfiguredProjectProvider">
            <summary>
            Gets the active configured project provider.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ProjectAsynchronousTasks">
            <summary>
            Gets the project asynchronous tasks service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ProjectConfigurationsService">
            <summary>
            Gets the project configurations service.
            </summary>
            <value>May be null if this service is not available for this project.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.HostObject">
            <summary>
            Gets a host-specific object associated with this configured project.
            </summary>
            <value>May be null if this service is not available for this project.</value>
            <remarks>
            Inside Visual Studio, this object implements IVsProject and IVsHierarchy.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IUnconfiguredProjectServices.ProjectCapabilitiesRequirementsService">
            <summary>
            Gets the project capabilities requirements service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation">
            <summary>
            Describes the critical project operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.None">
            <summary>
            Indicates no operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Build">
            <summary>
            Indicates build operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Save">
            <summary>
            Indicates project save operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Rename">
            <summary>
            Indicates project rename operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectCriticalOperation.Unload">
            <summary>
            Indicates project unload operation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker">
            <summary>
            This type matches the definition of its corresponding interop type from
            Microsoft.VisualStudio.Image.Interop.14.0.DesignTime, and was created to
            facilitate high performance comparison.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Guid">
            <summary>
            Gets the GUID for the image moniker.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Id">
            <summary>
            Gets the ID for the image moniker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.op_Equality(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Overrides the == operator to perform a value equality check.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.op_Inequality(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker,Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <summary>
            Overrides the != operator to perform a value inequality check.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker.Equals(Microsoft.VisualStudio.ProjectSystem.ProjectImageMoniker)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute">
            <summary>
            Specify the scope and constraints of a project system MEF contract.
            </summary>
            <remarks>
            When this attribute is applied to a type or member and <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractType"/> is <c>null</c>
            its default value should be considered to be the type identity that would be determined by MEF.
            When this attribute is applied to an assembly and <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractType"/> is <c>null</c>
            its default value should be considered to be *TODO*.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.#ctor(Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope,Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractType">
            <summary>
            Gets or sets the type identity of this contract.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.ContractName">
            <summary>
            Gets or sets an explicit name of this contract, when applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Provider">
            <summary>
            Gets or sets a value indicating who may export this contract.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Scope">
            <summary>
            Gets or sets the deepest MEF scope where this contract may be exported.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Cardinality">
             <summary>
             Gets or sets a description of the number of exports an import site should be prepared for.
             </summary>
             <remarks>
             When <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Provider"/> is set to <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Host"/> or
             <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.System"/> the default value for this property is
             <see cref="F:Microsoft.VisualStudio.Composition.ImportCardinality.ExactlyOne"/>;
             otherwise the default is <see cref="F:Microsoft.VisualStudio.Composition.ImportCardinality.ZeroOrMore"/>.
            
             If <see cref="P:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractAttribute.Provider"/> is <see cref="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Extension"/>
             then this property MUST be set to <see cref="F:Microsoft.VisualStudio.Composition.ImportCardinality.ZeroOrMore"/>.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider">
            <summary>
            Identifies possible exporters of a project system MEF contract.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.System">
            <summary>
            The contract is provided exclusively by the core project system.
            Third parties should not export this contract.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Host">
            <summary>
            The contract is provided by the project system host.
            Exports of these contracts are often mandatory for full project system functionality.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Extension">
            <summary>
            Third parties may export this contract.
            A default may also be provided by the core project system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractProvider.Private">
            <summary>
            A private contract for certain features only. An extension should not use it unless they define the contract.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope">
            <summary>
            Identifies the MEF scopes into which project system contracts may be exported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope.ProjectService">
            <summary>
            The global scope that is shared across all projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope.UnconfiguredProject">
            <summary>
            A unique scope for each loaded project.
            For example SomeUserProject.csproj and SomeOtherProject.csproj would have unique instances of this scope.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectSystemContractScope.ConfiguredProject">
            <summary>
            A unique scope for each loaded project configuration.
            For example SomeUserProject.csproj may have a Debug and a Release configuration, each of which would unique
            instances of this scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IVsProjectExtensions">
            <summary>
            Visual Studio specific project extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsProjectExtensions.GetUserPropertiesAsync">
            <summary>
            Gets a dictionary of properties.
            </summary>
            <returns>A task whose result is the map of properties.</returns>
            <remarks>
            Values in this dictionary are persisted in the project file under Project/ProjectExtensions/VisualStudio/UserProperties as @key="value" attributes.
            Keys and values are automatically XML encoded so that any non-empty key and non-null value may be stored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IVsProjectExtensions.SetUserPropertiesAsync(System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Sets the map of properties on the project.
            </summary>
            <param name="properties">A map of properties.</param>
            <returns>A task that completes when the async operation has completed.</returns>
            <remarks>
            Values in this dictionary are persisted in the project file under Project/ProjectExtensions/VisualStudio/UserProperties as @key="value" attributes.
            Keys and values are automatically XML encoded so that any non-empty key and non-null value may be stored.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException">
            <summary>
            A cancellation exception thrown when the host has rejected a file change request
            due to insufficient permissions or file lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.rejectedFiles">
            <summary>
            List of rejected files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.String,System.Collections.Immutable.IImmutableSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.OperationCanceledBySourceControlException.RejectedFiles">
            <summary>
            Gets the set of files that source control denied access to.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationChangeEventArgs">
            <summary>
            Describes a project configuration before and after a change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationChangeEventArgs.OldProjectConfiguration">
            <summary>
            Gets the old project configuration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationChangeEventArgs.NewProjectConfiguration">
            <summary>
            Gets the new project configuration.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs">
            <summary>
            Arguments for the ProjectRenamed event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs.OldFullPath">
            <summary>
            The old full path to the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs.NewFullPath">
            <summary>
            The new full path to the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectRenamedEventArgs.OtherRenamedFiles">
            <summary>
            Gets a map of old to new full paths of files that were also renamed as part of the project file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectAccess">
            <summary>
            Signifies the kind of access required on a project when obtaining a lock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.None">
            <summary>
            No access is required or granted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.Read">
            <summary>
            Read-only access is required.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.Write">
            <summary>
            Write access is required. Writers may also read the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.UpgradeableRead">
            <summary>
            Read-only access is required, but write access may be required before the read lock is released.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.SkipInitialEvaluation">
            <summary>
            Skips a step to make sure that a project is initially evaluated when retrieved using <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectLockReleaser.GetProjectAsync(Microsoft.VisualStudio.Threading.AsyncReaderWriterResourceLock{Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.Build.Evaluation.Project}.ResourceReleaser,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,System.Threading.CancellationToken)"/>.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.SuppressReevaluation">
            <summary>
            Suppresses MSBuild evaluation of projects while a write lock is held even if
            <see cref="M:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary"/> is called.
            Setting this flag can have negative side effects to components that write to the MSBuild project,
            so use to improve performance of bulk operations where you know re-evaluating the project
            is not necessary to maintain a consistent state.
            </summary>
            <remarks>
            This flag is dormant for non-write locks.  But if present on an upgradeable read lock,
            this flag will activate for a nested write lock.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.StickyWrite">
            <summary>
            Causes any write lock taken within this (upgradeable read) lock to implicitly upgrade *this*
            lock, such that the write lock will not be released until *this* lock is released.
            </summary>
            <remarks>
            This is useful when a client is calling several methods that *may* require a write lock, and if so,
            you'd like to do all the work across all the methods within just one write lock rather than across
            several "top level" write locks.  The benefits of just one all-encompassing write lock include
            preventing project change event handlers from obtaining read locks and reevaluating the project
            and raising various events before the entire set of changes are fully applied.  While this is not expected
            to impact accuracy of reported events, it can help eliminate wasted CPU cycles processing changes that are
            incomplete, and keep any other threads from reading your half-updated state.
            This is superior than just taking an outer write lock when the outer code doesn't know for sure whether
            a write lock will be needed or which project files need to be "checked out" from SCC beforehand.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.LockMask">
            <summary>
            The bitmask of all kinds of locks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectAccess.OptionMask">
            <summary>
            The bitmask of non-lock type options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration">
            <summary>
            Represents a project configuration - i.e. a collection of configuration dimensions and their values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration.Name">
            <summary>
            The name of this project configuration. Is never null or empty.
            </summary>
            <remarks>
            The name is a general handle for a project configuration for human consumption - there is no guarantee that
            two project configurations of the same name are identical.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration.Dimensions">
            <summary>
            Gets the configuration dimensions contained in this project configuration.
            </summary>
            <remarks>
            Can never be null.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectException">
            <summary>
            Exception class for problems instantiating the project class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectException"/> class
            for deserialization.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType">
            <summary>
            Signifies the type of rename occuring, if known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.Unknown">
            <summary>
            The type of rename is not known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.Rename">
            <summary>
            The rename event is occuring because the project's file name is changing. The old name will no longer exist.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.SaveAs">
            <summary>
            The rename event is occuring because the project is being saved to a new location. The old file will still exist.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectRenameType.CaseOnly">
            <summary>
            This is a case only rename of an existing file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.CommandStatus">
            <summary>
            Defines the status of the command being queried
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatus.NotSupported">
            <summary>
            The command is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatus.Supported">
            <summary>
            The command is supported
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatus.Enabled">
            <summary>
            The command is enabled
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatus.Latched">
            <summary>
            The command is toggled on
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatus.Ninched">
            <summary>
            The command is toggled off (the opposite of LATCHED).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.CommandStatus.Invisible">
            <summary>
            The command is invisible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ItemEventArgs`1">
            <summary>
            Event arguments for item-related events.
            </summary>
            <typeparam name="T">The type of project item the event is regarding.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemEventArgs`1.Item">
            <summary>
            Gets the project item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject">
            <summary>
            The UnconfiguredProject represents the set of components that are available
            for a given set of project capabilities, as defined by the MSBuild project
            instance provided.
            </summary>
            <remarks>
            Implementing classes must be multi-thread safe.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectUnloading">
            <summary>
            An event raised after background tasks have completed (or timed out) but before the MEF container is disposed of.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectRenaming">
            <summary>
            Event that is fired on the writer thread when a project is renamed.
            </summary>
            <remarks>
            Clients should attach handlers to this event if they may need to make
            cascading changes as the result of the change causing this event to fire.
            Clients should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Clients should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectRenamedOnWriter">
            <summary>
            Event that is fired on the writer thread after the project is renamed.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectRenamed">
            <summary>
            Event that is fired on a background thread after the project is renamed.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.FullPath">
            <summary>
            Gets the full path of the project manifest file. Maybe null if not loaded from disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.RequiresReloadForExternalFileChange">
            <summary>
            Returns true if there has been an external change to the project file.
            </summary>
            <remarks>
            The project tracks the time it last saved the project file. If the current
            time of the project file matches its last save time, then there has not
            been an external change to the project file. We track this explicitly
            so we can avoid timing windows of when the OS fires its file change events.
            Clients like Visual Studio should ask for this property before deciding
            to prompt the user to reload the file.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.Capabilities">
            <summary>
            Gets the project capabilities of the project, including any defined by
            the active <see cref="T:Microsoft.VisualStudio.ProjectSystem.ConfiguredProject"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ProjectService">
            <summary>
            Returns the Project service that created this context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.Services">
            <summary>
            Gets an accessor to the well known services and arbitrary extensions published to this unconfigured project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.LoadedConfiguredProjects">
            <summary>
            The set of configured projects that are currently loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.IsLoading">
            <summary>
            Gets whether the project is still being loaded.  Certain operation is unexpected at this stage.
            For example reloading the project is generally unexpected at this stage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.GetFileEncodingAsync">
            <summary>
            Gets the encoding to use for the project XML file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SetFileEncodingAsync(System.Text.Encoding)">
            <summary>
            Sets the encoding to use for the project XML file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.GetIsDirtyAsync">
            <summary>
            Returns true if the project in memory does not match the persistent copy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.LoadConfiguredProjectAsync(System.String,System.Collections.Immutable.IImmutableDictionary{System.String,System.String})">
            <summary>
            Loads an instance of the project for the specified configuration.
            </summary>
            <param name="name">The name to be used for this configuration - cannot be null or empty.</param>
            <param name="configurationProperties">Name-value pairs of configuration properties to use for this configuration.  Must not be null.</param>
            <returns>The configured project evaluated to these configuration properties.</returns>
            <remarks>
            If a configured project with the same name and configuration properties has already been loaded, the same
            instance will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.LoadConfiguredProjectAsync(Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Loads an instance of the project for the specified configuration.
            </summary>
            <remarks>
            If a configured project with the same name and configuration properties has already been loaded, the same
            instance will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.GetSuggestedConfiguredProjectAsync">
            <summary>
            Gets the suggested configured project to use at this moment, taking into account
            the active configuration, last known active configuration, any already loaded configurations,
            the default configuration for the project type, and an ultimate fallback configuration.
            </summary>
            <value>The result of the task may be null if this service is not available for this project.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.CanRenameAsync(System.String)">
            <summary>
            Checks to see if renaming this project is currently allowed.
            </summary>
            <param name="newFilePath">The new path of the project, if known.</param>
            <returns>True if the project can currently be renamed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.RenameAsync(System.String)">
            <summary>
            Renames this project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SaveAsync(System.String)">
            <summary>
            Save the project file to disk.
            </summary>
            <param name="filePath">The file to save to. If null, the current project path is used.</param>
            <devremarks>
            Dev14 TODO: Remove filePath parameter, since we don't support Save As, and backups use SaveCopyAsync.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SaveCopyAsync(System.String,System.Text.Encoding)">
            <summary>
            Saves a copy of the project file without renaming the old one or switching to a new one.
            </summary>
            <param name="filePath">The full path to save the copy to.</param>
            <param name="fileEncoding">The encoding to use for the saved copy. A <c>null</c> value preserves the current encoding.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.SaveUserFileAsync">
            <summary>
            Save the .user file to disk.
            </summary>
            <remarks>
            Instead of saving any changes of .user project file to disk immediately, we prefer to postpone saving until some events being fired
            to avoid the file lock contention with MSBuild; so we need to expose this method for those event handers to save .user project file explicitly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject.ReloadAsync(System.Boolean)">
            <summary>
            Reload the project
            </summary>
            <param name="immediately">
            If true, reloading will be triggered immediately. Otherwise, it just updates a state, and the project is only reloaded, when <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectReloader.ReloadIfNecessaryAsync(Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,System.Boolean)"/> is called.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IContentType">
            <summary>
            item content type definition
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IContentType.Name">
            <summary>
            Name of the content type. Non-localizable sting
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IContentType.DisplayName">
            <summary>
            Display name, localizable string describing the type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IContentType.ItemType">
            <summary>
            Name of the MSbuild item type collection used for this ItemType
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IContentType.DefaultContentTypeForItemType">
            <summary>
            true if this content type is the default for the items that are stored in ItemType collection in MSBuild
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IContentType.Metadata">
            <summary>
            Gets the list of content metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IContentType.GetMetadata(System.String)">
            <summary>
            Content metadata. This would include all behavior properties that can be related to the item content type such as Editor support, icons, etc
            If there is no metadata with "metadataName" it will return null.
            </summary>
            <param name="metadataName">the name of the metadata - case insensitive</param>
            <returns>metadata value</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs">
            <summary>
            Arguments for the ItemIdentityChanged event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.Item">
            <summary>
            Gets the project item that was changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.PropertySheet">
            <summary>
            The evaluated full path of the property sheet/project manifest
            that contains this item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.OldItemType">
            <summary>
            The old item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.NewItemType">
            <summary>
            The new item type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.OldUnevaluatedInclude">
            <summary>
            The old unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.NewUnevaluatedInclude">
            <summary>
            The new unevaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.OldEvaluatedInclude">
            <summary>
            The old evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.NewEvaluatedInclude">
            <summary>
            The new evaluated include.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.HasItemTypeChanged">
            <summary>
            Indicates if the item type has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ItemIdentityChangedEventArgs.HasUnevaluatedIncludeChanged">
            <summary>
            Indicates if the unevaluated include has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IItemType">
            <summary>
            Metadata associated with ItemType groups
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IItemType.Name">
            <summary>
            Item Type name (as used in MSBuild)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IItemType.DisplayName">
            <summary>
            User friendly name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IItemType.UpToDateCheckInput">
            <summary>
            files from this itemtype participate in up to date check.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectItem">
            <summary>
            An item in an MSBuild project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItem.ItemType">
            <summary>
            Gets the ItemType of the MSBuild item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItem.UnevaluatedInclude">
            <summary>
            Gets the unevaluated include value of the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItem.EvaluatedInclude">
            <summary>
            Gets the evaluated include value of the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItem.EvaluatedIncludeAsFullPath">
            <summary>
            Gets the (normalized) full path to the item on the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItem.EvaluatedIncludeAsRelativePath">
            <summary>
            Gets the (normalized) path to this item, relative to the project directory.
            </summary>
            <remarks>
            There may not be any relative relationship between the project root and this item.
            For example, the project may be at c:\proj\feature.proj and the item may be at d:\readme.txt.
            In these cases, RelativePath will equal FullPath..
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItem.PropertiesContext">
            <summary>
            Gets the context of this item, allowing it to be addressed for properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IProjectItem.Metadata">
            <summary>
            Gets the metadata on the item.  Metadata written using this object will NOT include any configurational conditions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItem.SetItemTypeAsync(System.String)">
            <summary>
            Sets the item type for this project item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItem.SetUnevaluatedIncludeAsync(System.String)">
            <summary>
            Sets the value that appears in the MSBuild project file as the item name (the literal string in the Include attribute.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItem.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes the item from the project file.
            </summary>
            <param name="deleteOptions">A value indicating the nature of the delete operation the caller is performing.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider">
            <summary>
            An accessor for reading, writing and removing project items.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.ItemIdentityChanging">
            <summary>
            Event that is fired on the writer thread when an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            <para>This event is not fired when the evaluated include
            changes without a change in the unevaluated include.
            It is also not fired when the metadata under an item changes. </para>
            <para>Clients should attach handlers to this event if they may need to make
            cascading changes as the result of the change causing this event to fire.
            Clients should expect to be invoked on the thread that is writing to the project,
            which may be the UI thread or any background thread.
            Clients should also be aware that they are executing in the middle of what
            may be a bulk write operation, and that any changes the event handlers
            make MAY be rolled back if the overall bulk write operation fails.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.ItemIdentityChangedOnWriter">
            <summary>
            Event that is fired on the writer thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            Clients should expect be invoked on an arbitrary background thread,
            concurrently with other handlers of this same event.  Progress
            on the thread that initiated the project change is blocked until
            execution of all event handlers is completed.
            Changes to the project are <em>not</em> allowed directly in handlers
            of this event, but read access to the project is guaranteed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.ItemIdentityChanged">
            <summary>
            Event that is fired on a background thread after an item's item type
            or item name (unevaluated include) changes.
            </summary>
            <remarks>
            <para>This event is not fired when the evaluated include
            changes without a change in the unevaluated include.
            It is also not fired when the metadata under an item changes. </para>
            <para>Clients should expect be invoked on any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemTypesAsync">
            <summary>
            Gets the set of item types this Provider works with.
            </summary>
            <remarks>
            This collection MAY be read only.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetExistingItemTypesAsync">
            <summary>
            Returns item types that exist in the current project. This is a subset of <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemTypesAsync"/>.
            </summary>
            <returns>Item types that have at least one item in current project</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.AddAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a new item to the MSBuild project.
            </summary>
            <param name="itemType">The item type for the new MSBuild item.</param>
            <param name="include">The unevaluated include value for the new item.  If no MSBuild expressions are believed to be in this value, it should be passed through <see cref="M:Microsoft.Build.Evaluation.ProjectCollection.Escape(System.String)"/> before being provided to this method.</param>
            <param name="metadata">Optional dictionary of metadata to apply to the item.</param>
            <exception cref="T:System.ArgumentException">Thrown if the given <paramref name="itemType"/>
            is not one that is managed by this provider.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.AddAsync(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            Adds new items to the MSBuild project.
            </summary>
            <param name="items">
            A sequence of items to add.  The tuple is made up of the item type, the (unevaluated) item name, and its metadata respectively.
            The metadata item may be <c>null</c>.
            </param>
            <returns>The list of added items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.AddAsync(System.String)">
            <summary>
            Adds an item to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="path">The absolute or project-relative path to the file to add to the project. This value will be MSBuild-escaped.</param>
            <returns>The project item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.AddAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds files to the project with an appropriate item type and metadata as determined by the project.
            </summary>
            <param name="paths">The absolute or project-relative paths to the files to add to the project. The paths will be MSBuild-escaped.</param>
            <returns>The project items actually added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.RemoveAsync(System.String,System.String,Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
            <param name="itemType">The itemtype of the item to remove.</param>
            <param name="include">The name of the item to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.RemoveAsync(Microsoft.VisualStudio.ProjectSystem.IProjectItem,Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes an item from the MSBuild project.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.RemoveAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ProjectSystem.IProjectItem},Microsoft.VisualStudio.ProjectSystem.DeleteOptions)">
            <summary>
            Removes items from the MSBuild project.
            </summary>
            <param name="items">The items to remove.</param>
            <param name="deleteOptions">A value indicating the caller will delete the file from disk after after this method removes the item from the project.</param>
            <remarks>
            This method never actually deletes file/folder from storage; it is the caller's responsibility to
            delete the file/folder from disk after this method removes the item from the project if that is required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemsAsync">
            <summary>
            Gets all the project items that are managed by this provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemsAsync(System.String)">
            <summary>
            Gets project items that are managed by this provider of a given item type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemsAsync(System.String,System.String)">
            <summary>
            Returns an item with the given <paramref name="itemType"/> and <paramref name="evaluatedInclude"/>.
            </summary>
            <param name="itemType">The itemType to match on.  Case insensitive.</param>
            <param name="evaluatedInclude">
            The evaluated value of the Include attribute on the item.  Case insensitive.  Wildcards allowed.
            </param>
            <returns>
            All items that match the given criteria.  Never null.
            If the given <paramref name="itemType"/> is not included in the <see cref="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemTypesAsync"/> collection,
            the item is not sought for and an empty sequence is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.FindItemByNameAsync(System.String)">
            <summary>
            Gets any source item that matches a given evaluated name.
            </summary>
            <param name="evaluatedInclude">The evaluated item name to find.</param>
            <returns>The item, or <c>null</c> if no match was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemAsync(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext)">
            <summary>
            Gets the first item that matches the given context or <c>null</c> for no match.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.SetUnevaluatedIncludesAsync(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{Microsoft.VisualStudio.ProjectSystem.IProjectItem,System.String}})">
            <summary>
            Sets the value that appears in the MSBuild project file as the item name (the literal string in the Include attribute.)
            </summary>
            <param name="renames">A list of project item and the new UnevaluatedInclude value should be set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemProvider.GetItemsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext})">
            <summary>
            Gets the first item that matches each given context or <c>null</c>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchemaService">
            <summary>
            Central entry point for content type data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.IProjectItemSchemaService.GetSchemaAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the latest schema.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService">
            <summary>
            Visual Studio specific semantics for unconfigured projects.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService.ActiveProjectConfigurationChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService.ActiveProjectConfiguration"/> property value changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService.ProjectTypeGuid">
            <summary>
            Gets the project type GUID that was used in the creation of this project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService.SuggestedInitialActiveConfiguration">
            <summary>
            Gets or sets the project configuration in use at the end of the last session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.IVsUnconfiguredProjectIntegrationService.ActiveProjectConfiguration">
            <summary>
            Gets the project configuration that is active given the active solution configuration.
            </summary>
            <returns>An existing ProjectConfiguration defined in the project, or <c>null</c> if no active project configuration is available.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectActiveConfigurationChangedEventArgs">
            <summary>
            Event arguments specifying that the active configuration has changed and whether or not it has changed to
            an invalid value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectActiveConfigurationChangedEventArgs.InvalidConfiguration">
            <summary>
            If true, the active configuration is now invalid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal">
            <summary>
            Internal methods on the UnconfiguredProject objects.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.ChangingProjectFileDependencies">
            <summary>
            Event to be fired when external dependencies of the project file is being changed inside a write lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.ReportProgressAsync(Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint)">
            <summary>
            Reports advancing to a checkpoint during project load.
            </summary>
            <param name="checkpoint">The checkpoint reached.</param>
            <returns>A task that should complete before project load proceeds further.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.IsReloadRequiredAsync(System.Threading.CancellationToken)">
            <summary>
            Checks whether changes have been made to the project that are beyond the host's ability
            to compensate for without a reload.
            </summary>
            <returns><c>true</c> if a reload should be executed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.RenameCompanionFileAsync(System.String,System.String)">
            <summary>
            Renames a project file that is imported by this project, and updates all imports to it
            found in loaded projects.
            </summary>
            <param name="oldCompanionFileFullPath">The old full path to the individual companion file to rename.</param>
            <param name="newCompanionFilePath">The new name or path to the individual companion file.</param>
            <returns>A task that indicates completion of the operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.SetProjectLoadingVetoResult(System.Boolean)">
            <summary>
            Report that all project veto checks have been done, so all delayed loading process can be resumed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.IsProjectLoadingVetoedAsync">
            <summary>
            Get the result of project veto check.
            This tasks ends when we get the result from veto process.
            </summary>
            <returns>Returns true if loading the project is vetoed or aborted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectInternal.MakeRooted(System.String)">
            <summary>
            Gets the absolute path for a given project-relative (or absolute) path.
            </summary>
            <param name="path">The path to create the absolute path from.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint">
            <summary>
            Describes the checkpoints of project load.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint.NotSpecified">
            <summary>
            Indicates the method's execution timing requirements are not specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint.UnconfiguredProjectLocalCapabilitiesEstablished">
            <summary>
            Occurs when the initial calculation of the project capabilities (which doesn't include capabilities from configurations) have been determined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint.InitialActiveConfigurationKnown">
            <summary>
            Occurs when the project has identified what the initial active configuration will be.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint.BeforeLoadInitialConfiguration">
            <summary>
            Occurs before the initial active configuration is loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint.AfterLoadInitialConfiguration">
            <summary>
            Occurs when the initial active configuration has been loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint.ProjectInitialCapabilitiesEstablished">
            <summary>
            Occurs when the real project capablities have been calculated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.ProjectLoadCheckpoint.ProjectFactoryCompleted">
            <summary>
            Occurs when the project factory is about to report completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Empty">
            <summary>
            Contains shared instances of empty collections with commonly used comparers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.OrdinalStringSet">
            <summary>
            An immutable set of strings that are compared by Ordinal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.OrdinalIgnoreCaseStringSet">
            <summary>
            An immutable set of strings that are compared by Ordinal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.FileSet">
            <summary>
            An immutable  set of case insensitive strings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.FileToFileMap">
            <summary>
            An immutable  map of case insensitive keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.RuleToContextMap">
            <summary>
            An immutable  map of case insensitive keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.PropertiesMap">
            <summary>
            An immutable map that can store properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.ItemsMap">
            <summary>
            An immutable map that can store items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.TargetsList">
            <summary>
            An immutable list for storing names of MSBuild targets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.RuleSet">
            <summary>
            An immutable set for storing names of MSBuild targets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.TargetsSet">
            <summary>
            An immutable set for storing names of MSBuild targets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.CapabilitiesSet">
            <summary>
            An immutable set for storing project and service capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.RuleSnapshotMap">
            <summary>
            An empty map of rule names to their snapshots.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.RuleChangeMap">
            <summary>
            An empty map of rule names to their change descriptions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Empty.ProjectValueVersions">
            <summary>
            An empty map of project data source GUIDs and their versions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectImportTreeSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilterByLabel(Microsoft.VisualStudio.ProjectSystem.IProjectImportTreeSnapshot,System.String)">
            <summary>
            Filters an import tree snapshot to include only those imports that have a specified value for Label.
            </summary>
            <param name="snapshot">The import tree to filter.</param>
            <param name="label">The label that must be found on an Import or ImportGroup tag in order to include that import or those imports.</param>
            <returns>The filtered snapshot.</returns>
            <remarks>
            An import is selected by the filter if the Import tag or its parent ImportGroup tag has a Label attribute
            whose value matches <paramref name="label"/>, ignoring case.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.Flatten(Microsoft.VisualStudio.ProjectSystem.IProjectImportTreeSnapshot)">
            <summary>
            Applies some action on all imports of a snapshot.
            </summary>
            <param name="snapshot">The snapshot to recursively visit.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.RecursivelyProcessImports(Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot,System.Action{Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot})">
            <summary>
            Applies some action on all imports of a snapshot.
            </summary>
            <param name="importSnapshot">The root import to visit.</param>
            <param name="action">The action to perform on each visited import.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.Filter(Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot,System.Func{Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot,System.Boolean})">
            <summary>
            Filters an import sub-tree.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot">
            <summary>
            The filtered implementation of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectImportTreeSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot},System.Collections.Immutable.IImmutableDictionary{Microsoft.VisualStudio.ProjectSystem.NamedIdentity,System.IComparable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot.Value">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportTreeSnapshot.DataSourceVersions">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportSnaphot">
            <summary>
            The filtered implementation of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.ProjectSystem.IProjectImportSnapshot})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportSnaphot"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.ProjectPath">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.Label">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.GroupLabel">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectImportTreeExtensions.FilteredProjectImportSnaphot.Imports">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSharedFoldersExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectSharedFoldersExtensions.TryGetSharedFolderForPath(Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot,System.String,System.String@,System.String@)">
            <summary>
            Translates a path into its shared folder and relative path, if applicable.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="path">The absolute or project-relative path to the file or folder being checked.</param>
            <param name="sharedFolderPath">Receives the absolute path to the shared folder, including trailing slash.</param>
            <param name="pathRelativeToSharedFolder">Receives the shared folder relative path to the original <paramref name="path"/>.</param>
            <returns><c>true</c> if a shared folder applies to <paramref name="path"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectSharedFoldersExtensions.IsPathWithinAnySharedFolder(Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot,System.String)">
            <summary>
            Checks if a path lies within a shared folder.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="path">The absolute or project-relative path to the file or folder being checked.</param>
            <returns><c>true</c> if a shared folder contains <paramref name="path"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectSharedFoldersExtensions.IsProjectItemDefinedInASharedImport(Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot,Microsoft.VisualStudio.ProjectSystem.IProjectItem)">
            <summary>
            Checks if a project item is defined in an imported shared project file.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="projectItem">The <c>IProjectItem</c> item being checked.</param>
            <returns><c>true</c> if the project item is defined in a shared import; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectSharedFoldersExtensions.GetImportedProjectForSharedItemPath(Microsoft.VisualStudio.ProjectSystem.IProjectSharedFoldersSnapshot,System.String)">
            <summary>
            Gets the path of the project that contains the shared item represented by the path.
            </summary>
            <param name="sharedFolders">The shared folders snapshot.</param>
            <param name="sharedItemPath">Path to the shared item.</param>
            <returns>Path to project file that contains the shared item represented by the path, null if there is no such project.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.ProjectSubscriptionUpdate">
            <summary>
            Default implementation of <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.ProjectSubscriptionUpdate.#ctor(System.Collections.Immutable.IImmutableDictionary{System.String,Microsoft.VisualStudio.ProjectSystem.IProjectChangeDescription},Microsoft.VisualStudio.ProjectSystem.ProjectConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.ProjectSystem.ProjectSubscriptionUpdate"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSubscriptionUpdate.ProjectChanges">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSubscriptionUpdate.CurrentState">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ProjectSystem.ProjectSubscriptionUpdate.ProjectConfiguration">
            <summary>
            See <see cref="T:Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate"/>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SchemaName">
            <summary>The name of the schema to look for at runtime to fulfill property access.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.PrimaryDataSourceItemType">
            <summary>The ItemType given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.PrimaryDataSourceLabel">
            <summary>The Label given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.ApplicationIconProperty">
            <summary> (The "ApplicationIcon" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.ProjectTypeGuidsProperty">
            <summary> (The "ProjectTypeGuids" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.ProjectGuidProperty">
            <summary> (The "ProjectGuid" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetFrameworkMonikerProperty">
            <summary> (The "TargetFrameworkMoniker" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetFrameworkIdentifierProperty">
            <summary> (The "TargetFrameworkIdentifier" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetFrameworkVersionProperty">
            <summary> (The "TargetFrameworkVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetFrameworkProfileProperty">
            <summary> (The "TargetFrameworkProfile" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetPathProperty">
            <summary> (The "TargetPath" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.DocumentationFileProperty">
            <summary> (The "DocumentationFile" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.AssemblyNameProperty">
            <summary> (The "AssemblyName" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.NameProperty">
            <summary> (The "Name" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.RootNamespaceProperty">
            <summary> (The "RootNamespace" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputNameProperty">
            <summary> (The "OutputName" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputPathProperty">
            <summary> (The "OutputPath" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeProperty">
            <summary> (The "OutputType" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.AvailablePlatformsProperty">
            <summary> (The "AvailablePlatforms" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OptimizeProperty">
            <summary>Should compiler optimize output? (The "Optimize" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.MSBuildProjectDirectoryProperty">
            <summary> (The "MSBuildProjectDirectory" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.DefaultPlatformProperty">
            <summary> (The "DefaultPlatform" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.PackageActionProperty">
            <summary>The MSBuild target to use when packaging a project. (The "PackageAction" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.DefaultContentTypeProperty">
            <summary>The default content type name to use when adding files. (The "DefaultContentType" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.VCInstallDirProperty">
            <summary> (The "VCInstallDir" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.VSInstallDirProperty">
            <summary> (The "VSInstallDir" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.PlatformProperty">
            <summary> (The "Platform" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.ConfigurationProperty">
            <summary> (The "Configuration" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.DebuggerSymbolsPathProperty">
            <summary> (The "DebuggerSymbolsPath" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.IntDirProperty">
            <summary> (The "IntDir" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetPlatformWinMDLocationProperty">
            <summary> (The "TargetPlatformWinMDLocation" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SDKReferenceDirectoryRootProperty">
            <summary> (The "SDKReferenceDirectoryRoot" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SDKReferenceRegistryRootProperty">
            <summary> (The "SDKReferenceRegistryRoot" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SDKExtensionDirectoryRootProperty">
            <summary> (The "SDKExtensionDirectoryRoot" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SDKIdentifierProperty">
            <summary> (The "SDKIdentifier" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SDKVersionProperty">
            <summary> (The "SDKVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetPlatformIdentifierProperty">
            <summary> (The "TargetPlatformIdentifier" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetPlatformVersionProperty">
            <summary> (The "TargetPlatformVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.WindowsAppContainerProperty">
            <summary> (The "WindowsAppContainer" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.WinMDAssemblyProperty">
            <summary> (The "WinMDAssembly" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetRuntimeProperty">
            <summary> (The "TargetRuntime" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.AssemblySearchPathsProperty">
            <summary> (The "AssemblySearchPaths" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.WinRTReferenceTabsProperty">
            <summary> (The "WinRTReferenceTabs" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.AssemblyReferenceTabsProperty">
            <summary> (The "AssemblyReferenceTabs" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.MinimumVisualStudioVersionProperty">
            <summary> (The "MinimumVisualStudioVersion" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SuppressOutOfDateMessageOnBuildProperty">
            <summary>True to just build out-of-date projects without ever prompting the user to confirm. (The "SuppressOutOfDateMessageOnBuild" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.ShowAllFilesProperty">
            <summary> (The "ShowAllFiles" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.AutoRefreshProperty">
            <summary> (The "AutoRefresh" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.AddItemTemplatesGuidProperty">
            <summary> (The "AddItemTemplatesGuid" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.ProjectUISubcaptionProperty">
            <summary> (The "ProjectUISubcaption" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SharedItemContextSubProjectGuidProperty">
            <summary> (The "SharedItemContextSubProjectGuid" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OneAppCapabilitiesProperty">
            <summary> (The "OneAppCapabilities" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SharedProjectAppliesToProperty">
            <summary>Capability match expression that at a minimum tests for the language of the Shared Project; used to filter Add Shared Project Reference choices. (The "SharedProjectAppliesTo" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.AlwaysUseNumericalSuffixInItemNamesProperty">
            <summary>Indicates if names of newly added items should always be suffixed with a number. (The "AlwaysUseNumericalSuffixInItemNames" property).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.SupportedOutputTypesProperty">
            <summary> (The "SupportedOutputTypes" property).</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeValues">
            <summary>Enum values for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeValues.Library">
            <summary>The  ("Library") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeValues.exe">
            <summary>The  ("exe") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeValues.winexe">
            <summary>The  ("winexe") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeValues.AppContainerExe">
            <summary>The  ("AppContainerExe") value for the OutputType property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeValues.WinMDObj">
            <summary>The  ("WinMDObj") value for the OutputType property.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.OutputTypeValues.#ctor">
            <summary>Prevents automatic generation of a default constructor.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetRuntimeValues">
            <summary>Enum values for the TargetRuntime property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetRuntimeValues.Managed">
            <summary>The  ("Managed") value for the TargetRuntime property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetRuntimeValues.Native">
            <summary>The  ("Native") value for the TargetRuntime property.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetRuntimeValues.AppHost">
            <summary>The  ("AppHost") value for the TargetRuntime property.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ProjectSystem.Rules.ConfigurationGeneral.TargetRuntimeValues.#ctor">
            <summary>Prevents automatic generation of a default constructor.</summary>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher">
            <summary>
            Functions for matching file names with patterns.
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.InvalidPathChars">
            <summary>
            Cache of the list of invalid path characters, because this method returns a clone (for security reasons)
            which can cause significant transient allocations
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries">
            <summary>
            Delegate defines the GetFileSystemEntries signature that GetLongPathName uses
            to enumerate directories on the file system.
            </summary>
            <param name="entityType">Files, Directories, or Files and Directories</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The file pattern.</param>
            <param name="projectDirectory">Undocumented.</param>
            <param name="stripProjectDirectory">Undocumented.</param>
            <returns>The array of filesystem entries.</returns>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.FileSystemEntity">
            <summary>
            The type of entity that GetFileSystemEntries should return.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.FileSystemEntity.Files">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.FileSystemEntity.Directories">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.FileSystemEntity.FilesAndDirectories">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.HasWildcards(System.String)">
            <summary>
            Determines whether the given path has any wild card characters.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFileSystemEntries(Microsoft.Build.Shared.FileMatcher.FileSystemEntity,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the files and\or folders specified by the given path and pattern.
            </summary>
            <param name="entityType">Whether Files, Directories or both.</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The pattern to search.</param>
            <param name="projectDirectory">The directory for the project within which the call is made</param>
            <param name="stripProjectDirectory">If true the project directory should be stripped</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFilesAndDirectories(System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria. Inaccessible or non-existent file
            system entries are skipped.
            </summary>
            <returns>Array of matching file system entries (can be empty).</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Same as Directory.GetFiles(...) except that files that
             aren't accessible are skipped instead of throwing an exception.
            
             Other exceptions are passed through.
             </summary>
             <param name="path">The path.</param>
             <param name="filespec">The pattern.</param>
             <param name="projectDirectory">The project directory</param>
             <param name="stripProjectDirectory">Undocumented.</param>
             <returns>Files that can be accessed.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleDirectories(System.String,System.String)">
             <summary>
             Same as Directory.GetDirectories(...) except that files that
             aren't accessible are skipped instead of throwing an exception.
            
             Other exceptions are passed through.
             </summary>
             <param name="path">The path.</param>
             <param name="pattern">Pattern to match</param>
             <returns>Accessible directories.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetLongPathName(System.String,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a path name, get its long version.
            </summary>
            <param name="path">The short path.</param>
            <param name="getFileSystemEntries">Delegate.</param>
            <returns>The long path.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.SplitFileSpec(System.String,System.String@,System.String@,System.String@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, split it into left-most 'fixed' dir part, middle 'wildcard' dir part, and filename part.
            The filename part may have wildcard characters in it.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.PreprocessFileSpecForSplitting(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Do most of the grunt work of splitting the filespec into parts.
            Does not handle post-processing common to the different matching
            paths.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RemoveInitialDotSlash(System.String[])">
            <summary>
            Removes the leading ".\" from all of the paths in the array.
            </summary>
            <param name="paths">Paths to remove .\ from.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.IsDirectorySeparator(System.Char)">
            <summary>
            Checks if the char is a DirectorySeparatorChar or a AltDirectorySeparatorChar
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RemoveProjectDirectory(System.String[],System.String)">
            <summary>
            Removes the current directory converting the file back to relative path
            </summary>
            <param name="paths">Paths to remove current directory from.</param>
            <param name="projectDirectory">Undocumented.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFilesRecursive(System.Collections.IList,System.String,System.String,System.String,System.Int32,System.Text.RegularExpressions.Regex,System.Boolean,System.String,System.Boolean,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Get all files that match either the file-spec or the regular expression.
            </summary>
            <param name="listOfFiles">List of files that gets populated.</param>
            <param name="baseDirectory">The path to enumerate</param>
            <param name="remainingWildcardDirectory">The remaining, wildcard part of the directory.</param>
            <param name="filespec">The filespec.</param>
            <param name="extensionLengthToEnforce">Undocumented.</param>
            <param name="regexFileMatch">Wild-card matching.</param>
            <param name="needsRecursion">If true, then recursion is required.</param>
            <param name="projectDirectory">Undocumented.</param>
            <param name="stripProjectDirectory">Undocumented.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RegularExpressionFromFileSpec(System.String,System.String,System.String,System.Boolean@)">
             <summary>
             Given a file spec, create a regular expression that will match that
             file spec.
            
             PERF WARNING: this method is called in performance-critical
             scenarios, so keep it fast and cheap
             </summary>
             <param name="fixedDirectoryPart">The fixed directory part.</param>
             <param name="wildcardDirectoryPart">The wildcard directory part.</param>
             <param name="filenamePart">The filename part.</param>
             <param name="isLegalFileSpec">Receives whether this pattern is legal or not.</param>
             <returns>The regular expression string.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFileSpecInfo(System.String,System.Text.RegularExpressions.Regex@,System.Boolean@,System.Boolean@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="regexFileMatch">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFileSpecInfo(System.String,System.String@,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">Receives the wildcard directory part.</param>
            <param name="filenamePart">Receives the filename part.</param>
            <param name="matchFileExpression">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.FileMatch(System.String,System.String)">
            <summary>
            Given a pattern (filespec) and a candidate filename (fileToMatch)
            return matching information.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fileToMatch">The candidate to match against.</param>
            <returns>The result class.</returns>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.FileMatchPattern">
            <summary>
            Patterns to match file path.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.Result">
            <summary>
            The results of a match between a filespec and a file name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.Result.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Build.Shared.FileMatcher.Result"/> class.
            </summary>
        </member>
    </members>
</doc>
